From 7e25c6c4537604eab67b3b62a97a23a3057b59c0 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 1 Oct 2014 17:35:22 +0200
Subject: kernel32/tests: Add tests for K32GetModuleInformation.

Test to confirm AFs analysis from bug 33034.
---
 dlls/kernel32/tests/module.c | 44 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 44 insertions(+)

diff --git a/dlls/kernel32/tests/module.c b/dlls/kernel32/tests/module.c
index 0d140a4..fb0130d 100644
--- a/dlls/kernel32/tests/module.c
+++ b/dlls/kernel32/tests/module.c
@@ -20,12 +20,14 @@
 
 #include "wine/test.h"
 #include <windows.h>
+#include <psapi.h>
 
 static DWORD (WINAPI *pGetDllDirectoryA)(DWORD,LPSTR);
 static DWORD (WINAPI *pGetDllDirectoryW)(DWORD,LPWSTR);
 static BOOL (WINAPI *pSetDllDirectoryA)(LPCSTR);
 static BOOL (WINAPI *pGetModuleHandleExA)(DWORD,LPCSTR,HMODULE*);
 static BOOL (WINAPI *pGetModuleHandleExW)(DWORD,LPCWSTR,HMODULE*);
+static BOOL (WINAPI *pK32GetModuleInformation)(HANDLE,HMODULE,MODULEINFO*,DWORD);
 
 static BOOL is_unicode_enabled = TRUE;
 
@@ -514,7 +516,20 @@ static void init_pointers(void)
     MAKEFUNC(SetDllDirectoryA);
     MAKEFUNC(GetModuleHandleExA);
     MAKEFUNC(GetModuleHandleExW);
+    MAKEFUNC(K32GetModuleInformation);
 #undef MAKEFUNC
+
+    /* not all Windows versions export this in kernel32 */
+    if (!pK32GetModuleInformation)
+    {
+        HMODULE hPsapi = LoadLibraryA("psapi.dll");
+        if (hPsapi)
+        {
+            pK32GetModuleInformation = (void *)GetProcAddress(hPsapi, "GetModuleInformation");
+            if (!pK32GetModuleInformation) FreeLibrary(hPsapi);
+        }
+    }
+
 }
 
 static void testGetModuleHandleEx(void)
@@ -696,6 +711,34 @@ static void testGetModuleHandleEx(void)
     FreeLibrary( mod_kernel32 );
 }
 
+static void testK32GetModuleInformation(void)
+{
+    MODULEINFO info;
+    HMODULE mod;
+    BOOL ret;
+
+    if (!pK32GetModuleInformation)
+    {
+        win_skip("K32GetModuleInformation not available\n");
+        return;
+    }
+
+    mod = GetModuleHandleA(NULL);
+    memset(&info, 0xAA, sizeof(info));
+    ret = pK32GetModuleInformation(GetCurrentProcess(), mod, &info, sizeof(info));
+    ok(ret, "K32GetModuleInformation failed for main module\n");
+    ok(info.lpBaseOfDll == mod, "Wrong info.lpBaseOfDll = %p, expected %p\n", info.lpBaseOfDll, mod);
+    todo_wine
+    ok(info.EntryPoint != NULL, "Expected nonzero entrypoint\n");
+
+    mod = GetModuleHandleA("kernel32.dll");
+    memset(&info, 0xAA, sizeof(info));
+    ret = pK32GetModuleInformation(GetCurrentProcess(), mod, &info, sizeof(info));
+    ok(ret, "K32GetModuleInformation failed for kernel32 module\n");
+    ok(info.lpBaseOfDll == mod, "Wrong info.lpBaseOfDll = %p, expected %p\n", info.lpBaseOfDll, mod);
+    ok(info.EntryPoint != NULL, "Expected nonzero entrypoint\n");
+}
+
 START_TEST(module)
 {
     WCHAR filenameW[MAX_PATH];
@@ -724,4 +767,5 @@ START_TEST(module)
     testGetProcAddress_Wrong();
     testLoadLibraryEx();
     testGetModuleHandleEx();
+    testK32GetModuleInformation();
 }
-- 
2.1.1


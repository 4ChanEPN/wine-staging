From 0819075c75d740657873e01d35e8673070c49442 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 1 Oct 2014 17:35:28 +0200
Subject: ntdll: Set ldr.EntryPoint for main executable. (resend)

Fixes: https://bugs.winehq.org/show_bug.cgi?id=33034
No code change (besides the removed todo_wine).
---
 dlls/kernel32/tests/module.c | 1 -
 dlls/ntdll/loader.c          | 7 ++++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/dlls/kernel32/tests/module.c b/dlls/kernel32/tests/module.c
index fb0130d..56b6494 100644
--- a/dlls/kernel32/tests/module.c
+++ b/dlls/kernel32/tests/module.c
@@ -728,7 +728,6 @@ static void testK32GetModuleInformation(void)
     ret = pK32GetModuleInformation(GetCurrentProcess(), mod, &info, sizeof(info));
     ok(ret, "K32GetModuleInformation failed for main module\n");
     ok(info.lpBaseOfDll == mod, "Wrong info.lpBaseOfDll = %p, expected %p\n", info.lpBaseOfDll, mod);
-    todo_wine
     ok(info.EntryPoint != NULL, "Expected nonzero entrypoint\n");
 
     mod = GetModuleHandleA("kernel32.dll");
diff --git a/dlls/ntdll/loader.c b/dlls/ntdll/loader.c
index 18ae29c..3c2fc56 100644
--- a/dlls/ntdll/loader.c
+++ b/dlls/ntdll/loader.c
@@ -934,9 +934,10 @@ static WINE_MODREF *alloc_module( HMODULE hModule, LPCWSTR filename )
     else p = wm->ldr.FullDllName.Buffer;
     RtlInitUnicodeString( &wm->ldr.BaseDllName, p );
 
-    if ((nt->FileHeader.Characteristics & IMAGE_FILE_DLL) && !is_dll_native_subsystem( hModule, nt, p ))
+    if (!(nt->FileHeader.Characteristics & IMAGE_FILE_DLL) || !is_dll_native_subsystem( hModule, nt, p ))
     {
-        wm->ldr.Flags |= LDR_IMAGE_IS_DLL;
+        if (nt->FileHeader.Characteristics & IMAGE_FILE_DLL)
+            wm->ldr.Flags |= LDR_IMAGE_IS_DLL;
         if (nt->OptionalHeader.AddressOfEntryPoint)
             wm->ldr.EntryPoint = (char *)hModule + nt->OptionalHeader.AddressOfEntryPoint;
     }
@@ -1062,7 +1063,7 @@ static NTSTATUS MODULE_InitDLL( WINE_MODREF *wm, UINT reason, LPVOID lpReserved
 
     if (wm->ldr.Flags & LDR_DONT_RESOLVE_REFS) return STATUS_SUCCESS;
     if (wm->ldr.TlsIndex != -1) call_tls_callbacks( wm->ldr.BaseAddress, reason );
-    if (!entry) return STATUS_SUCCESS;
+    if (!entry || !(wm->ldr.Flags & LDR_IMAGE_IS_DLL)) return STATUS_SUCCESS;
 
     if (TRACE_ON(relay))
     {
-- 
2.1.1


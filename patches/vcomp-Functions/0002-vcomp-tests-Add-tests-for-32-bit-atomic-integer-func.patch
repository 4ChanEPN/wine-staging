From 48fc0019e5f426177b420c0115bf813f989fd1e8 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Sun, 26 Jul 2015 01:56:05 +0200
Subject: vcomp/tests: Add tests for 32-bit atomic integer functions.

---
 dlls/vcomp/tests/vcomp.c | 124 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 124 insertions(+)

diff --git a/dlls/vcomp/tests/vcomp.c b/dlls/vcomp/tests/vcomp.c
index 17b37f2..6405f1d 100644
--- a/dlls/vcomp/tests/vcomp.c
+++ b/dlls/vcomp/tests/vcomp.c
@@ -31,6 +31,17 @@ static BOOL   (WINAPI *pActivateActCtx)(HANDLE, ULONG_PTR*);
 static BOOL   (WINAPI *pDeactivateActCtx)(DWORD, ULONG_PTR);
 static VOID   (WINAPI *pReleaseActCtx)(HANDLE);
 
+static void  (CDECL   *p_vcomp_atomic_add_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_and_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_div_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_div_ui4)(unsigned int *dest, unsigned int val);
+static void  (CDECL   *p_vcomp_atomic_mul_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_or_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_shl_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_shr_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_shr_ui4)(unsigned int *dest, unsigned int val);
+static void  (CDECL   *p_vcomp_atomic_sub_i4)(int *dest, int val);
+static void  (CDECL   *p_vcomp_atomic_xor_i4)(int *dest, int val);
 static void  (CDECL   *p_vcomp_barrier)(void);
 static void  (CDECL   *p_vcomp_for_static_end)(void);
 static void  (CDECL   *p_vcomp_for_static_init)(int first, int last, int step, int chunksize, unsigned int *loops,
@@ -175,6 +186,17 @@ static BOOL init_vcomp(void)
         return FALSE;
     }
 
+    VCOMP_GET_PROC(_vcomp_atomic_add_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_and_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_div_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_div_ui4);
+    VCOMP_GET_PROC(_vcomp_atomic_mul_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_or_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_shl_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_shr_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_shr_ui4);
+    VCOMP_GET_PROC(_vcomp_atomic_sub_i4);
+    VCOMP_GET_PROC(_vcomp_atomic_xor_i4);
     VCOMP_GET_PROC(_vcomp_barrier);
     VCOMP_GET_PROC(_vcomp_for_static_end);
     VCOMP_GET_PROC(_vcomp_for_static_init);
@@ -849,6 +871,106 @@ static void test_vcomp_for_static_init(void)
     pomp_set_num_threads(max_threads);
 }
 
+static void test_atomic_int32(void)
+{
+    int val;
+
+    val = 0x11223344;
+    p_vcomp_atomic_add_i4(&val, 0x77665544);
+    ok(val == -0x77777778, "expected val == -0x77777778, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_and_i4(&val, 0x77665544);
+    ok(val == 0x11221144, "expected val == 0x11221144, got %d\n", val);
+
+    val = 0x77665544;
+    p_vcomp_atomic_div_i4(&val, 0x11223344);
+    ok(val == 6, "expected val == 6, got %d\n", val);
+
+    val = 0x77665544;
+    p_vcomp_atomic_div_i4(&val, -0x11223344);
+    ok(val == -6, "expected val == -6, got %d\n", val);
+
+if (0)
+{
+    /* crashes on Windows */
+    val = 0x11223344;
+    p_vcomp_atomic_div_i4(&val, 0);
+}
+
+    val = 0x11223344;
+    p_vcomp_atomic_mul_i4(&val, 0x77665544);
+    ok(val == -0xecccdf0, "expected val == -0xecccdf0, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_mul_i4(&val, -0x77665544);
+    ok(val == 0xecccdf0, "expected val == 0xecccdf0, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_or_i4(&val, 0x77665544);
+    ok(val == 0x77667744, "expected val == 0x77667744, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_shl_i4(&val, 3);
+    ok(val == -0x76ee65e0, "expected val == -0x76ee65e0, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_shl_i4(&val, 35);
+    ok(val == -0x76ee65e0, "expected val == -0x76ee65e0, got %d\n", val);
+
+    val = -0x11223344;
+    p_vcomp_atomic_shl_i4(&val, 3);
+    ok(val == 0x76ee65e0, "expected val == 0x76ee65e0, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_shr_i4(&val, 3);
+    ok(val == 0x2244668, "expected val == 0x2244668, got %d\n", val);
+
+    val = -0x11223344;
+    p_vcomp_atomic_shr_i4(&val, 3);
+    ok(val == -0x2244669, "expected val == -0x2244669, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_sub_i4(&val, 0x77665544);
+    ok(val == -0x66442200, "expected val == -0x66442200, got %d\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_xor_i4(&val, 0x77665544);
+    ok(val == 0x66446600, "expected val == 0x66446600, got %d\n", val);
+}
+
+static void test_atomic_uint32(void)
+{
+    unsigned int val;
+
+    val = 0x77665544;
+    p_vcomp_atomic_div_ui4(&val, 0x11223344);
+    ok(val == 6, "expected val == 6, got %u\n", val);
+
+    val = 0x77665544;
+    p_vcomp_atomic_div_ui4(&val, 0xeeddccbc);
+    ok(val == 0, "expected val == 6, got %u\n", val);
+
+if (0)
+{
+    /* crashes on Windows */
+    val = 0x11223344;
+    p_vcomp_atomic_div_ui4(&val, 0);
+}
+
+    val = 0x11223344;
+    p_vcomp_atomic_shr_ui4(&val, 3);
+    ok(val == 0x2244668, "expected val == 0x2244668, got %u\n", val);
+
+    val = 0x11223344;
+    p_vcomp_atomic_shr_ui4(&val, 35);
+    ok(val == 0x2244668, "expected val == 0x2244668, got %u\n", val);
+
+    val = -0x11223344;
+    p_vcomp_atomic_shr_ui4(&val, 3);
+    ok(val == 0x1ddbb997, "expected val == 0x1ddbb997, got %u\n", val);
+}
+
 START_TEST(vcomp)
 {
     if (!init_vcomp())
@@ -860,6 +982,8 @@ START_TEST(vcomp)
     test_vcomp_sections_init();
     test_vcomp_for_static_simple_init();
     test_vcomp_for_static_init();
+    test_atomic_int32();
+    test_atomic_uint32();
 
     release_vcomp();
 }
-- 
2.4.5


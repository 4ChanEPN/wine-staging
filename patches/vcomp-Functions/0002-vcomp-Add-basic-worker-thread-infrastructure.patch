From e3f58ae29d504bd1f2287566878b7d6674bd5484 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Sat, 11 Jul 2015 18:53:41 +0200
Subject: vcomp: Add basic worker thread infrastructure.

---
 dlls/vcomp/main.c | 221 +++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 211 insertions(+), 10 deletions(-)

diff --git a/dlls/vcomp/main.c b/dlls/vcomp/main.c
index 26f6c67..9de9721 100644
--- a/dlls/vcomp/main.c
+++ b/dlls/vcomp/main.c
@@ -4,6 +4,7 @@
  *
  * Copyright 2011 Austin English
  * Copyright 2012 Dan Kegel
+ * Copyright 2015 Sebastian Lackner
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -23,13 +24,68 @@
 #include "config.h"
 
 #include <stdarg.h>
+#include <assert.h>
 
 #include "windef.h"
 #include "winbase.h"
 #include "wine/debug.h"
+#include "wine/list.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(vcomp);
 
+static HMODULE vcomp_module;
+static struct list vcomp_idle_threads = LIST_INIT(vcomp_idle_threads);
+static DWORD vcomp_context_tls = TLS_OUT_OF_INDEXES;
+static DWORD vcomp_max_threads = 32;
+static DWORD vcomp_num_threads = 1;
+
+static RTL_CRITICAL_SECTION vcomp_section;
+static RTL_CRITICAL_SECTION_DEBUG critsect_debug =
+{
+    0, 0, &vcomp_section,
+    { &critsect_debug.ProcessLocksList, &critsect_debug.ProcessLocksList },
+      0, 0, { (DWORD_PTR)(__FILE__ ": vcomp_section") }
+};
+static RTL_CRITICAL_SECTION vcomp_section = { &critsect_debug, -1, 0, 0, 0, 0 };
+
+struct vcomp_thread_info
+{
+    struct list             entry;
+    CONDITION_VARIABLE      cond;
+
+    /* current task */
+    struct vcomp_team_info  *team;
+    DWORD                   thread_num;
+};
+
+struct vcomp_team_info
+{
+    CONDITION_VARIABLE  cond;
+    DWORD               num_threads;
+    DWORD               finished_threads;
+
+    /* callback arguments */
+    unsigned int        nargs;
+    void                *wrapper;
+    __ms_va_list        valist;
+};
+
+static inline struct vcomp_thread_info *vcomp_get_thread_info(void)
+{
+    return (struct vcomp_thread_info *)TlsGetValue(vcomp_context_tls);
+}
+
+static inline struct vcomp_team_info *vcomp_get_team_info(void)
+{
+    struct vcomp_thread_info *thread_info = vcomp_get_thread_info();
+    return thread_info ? thread_info->team : NULL;
+}
+
+static inline void vcomp_set_thread_info(struct vcomp_thread_info *thread_info)
+{
+    TlsSetValue(vcomp_context_tls, thread_info);
+}
+
 int CDECL omp_get_dynamic(void)
 {
     TRACE("stub\n");
@@ -39,7 +95,7 @@ int CDECL omp_get_dynamic(void)
 int CDECL omp_get_max_threads(void)
 {
     TRACE("stub\n");
-    return 1;
+    return vcomp_max_threads;
 }
 
 int CDECL omp_get_nested(void)
@@ -56,14 +112,22 @@ int CDECL omp_get_num_procs(void)
 
 int CDECL omp_get_num_threads(void)
 {
-    TRACE("stub\n");
-    return 1;
+    struct vcomp_team_info *team_info;
+
+    TRACE("()\n");
+
+    team_info = vcomp_get_team_info();
+    return team_info ? team_info->num_threads : 1;
 }
 
 int CDECL omp_get_thread_num(void)
 {
-    TRACE("stub\n");
-    return 0;
+    struct vcomp_thread_info *thread_info;
+
+    TRACE("()\n");
+
+    thread_info = vcomp_get_thread_info();
+    return thread_info ? thread_info->thread_num : 0;
 }
 
 /* Time in seconds since "some time in the past" */
@@ -85,6 +149,7 @@ void CDECL omp_set_nested(int nested)
 void CDECL omp_set_num_threads(int num_threads)
 {
     TRACE("(%d): stub\n", num_threads);
+    vcomp_num_threads = max(1, min(num_threads, vcomp_max_threads));
 }
 
 void CDECL _vcomp_barrier(void)
@@ -94,7 +159,8 @@ void CDECL _vcomp_barrier(void)
 
 void CDECL _vcomp_set_num_threads(int num_threads)
 {
-    TRACE("(%d): stub\n", num_threads);
+    TRACE("(%d)\n", num_threads);
+    vcomp_num_threads = max(1, min(num_threads, vcomp_max_threads));
 }
 
 int CDECL _vcomp_single_begin(int flags)
@@ -110,15 +176,139 @@ void CDECL _vcomp_single_end(void)
 
 void CDECL _vcomp_fork_call_wrapper(void *wrapper, int nargs, __ms_va_list args);
 
+static DWORD WINAPI _vcomp_fork_worker(void *param)
+{
+    struct vcomp_thread_info *thread_info = param;
+    vcomp_set_thread_info(thread_info);
+
+    TRACE("starting worker thread %p\n", thread_info);
+
+    EnterCriticalSection(&vcomp_section);
+    for (;;)
+    {
+        struct vcomp_team_info *team = thread_info->team;
+        if (team != NULL)
+        {
+            /* Leave critical section and execute callback. */
+            LeaveCriticalSection(&vcomp_section);
+            _vcomp_fork_call_wrapper(team->wrapper, team->nargs, team->valist);
+            EnterCriticalSection(&vcomp_section);
+
+            /* Detach current thread from team. */
+            thread_info->team = NULL;
+            list_remove(&thread_info->entry);
+            list_add_tail(&vcomp_idle_threads, &thread_info->entry);
+            if (++team->finished_threads >= team->num_threads)
+                WakeAllConditionVariable(&team->cond);
+        }
+
+        if (!SleepConditionVariableCS(&thread_info->cond, &vcomp_section, 5000) &&
+            GetLastError() == ERROR_TIMEOUT && !thread_info->team)
+        {
+            break;
+        }
+    }
+    list_remove(&thread_info->entry);
+    LeaveCriticalSection(&vcomp_section);
+
+    TRACE("terminating worker thread %p\n", thread_info);
+    HeapFree(GetProcessHeap(), 0, thread_info);
+    FreeLibraryAndExitThread(vcomp_module, 0);
+    return 0;
+}
+
 void WINAPIV _vcomp_fork(BOOL ifval, int nargs, void *wrapper, ...)
 {
-    __ms_va_list valist;
+    struct vcomp_thread_info thread_info, *prev_thread_info;
+    struct vcomp_team_info team_info;
+    DWORD num_threads = vcomp_num_threads; /* FIXME */
+    BOOL parallel = ifval;
 
     TRACE("(%d, %d, %p, ...)\n", ifval, nargs, wrapper);
 
-    __ms_va_start(valist, wrapper);
-    _vcomp_fork_call_wrapper(wrapper, nargs, valist);
-    __ms_va_end(valist);
+    /* Initialize members of team_info. */
+    InitializeConditionVariable(&team_info.cond);
+    team_info.num_threads       = 1;
+    team_info.finished_threads  = 0;
+    team_info.nargs             = nargs;
+    team_info.wrapper           = wrapper;
+    __ms_va_start(team_info.valist, wrapper);
+
+    /* Initialize members of thread_info. */
+    list_init(&thread_info.entry);
+    InitializeConditionVariable(&thread_info.cond);
+    thread_info.team        = &team_info;
+    thread_info.thread_num  = 0;
+
+    if (parallel)
+    {
+        struct list *ptr;
+        EnterCriticalSection(&vcomp_section);
+
+        /* Try to reuse idle threads. */
+        while (team_info.num_threads < num_threads &&
+               (ptr = list_head( &vcomp_idle_threads )))
+        {
+            struct vcomp_thread_info *info = LIST_ENTRY(ptr, struct vcomp_thread_info, entry);
+            list_remove(&info->entry);
+            list_add_tail(&thread_info.entry, &info->entry);
+            info->team          = &team_info;
+            info->thread_num    = team_info.num_threads++;
+            WakeAllConditionVariable(&info->cond);
+        }
+
+        /* Spawn additional new threads. */
+        while (team_info.num_threads < num_threads)
+        {
+            struct vcomp_thread_info *info;
+            HMODULE module;
+            HANDLE thread;
+
+            info = HeapAlloc(GetProcessHeap(), 0, sizeof(*info));
+            if (!info) break;
+
+            InitializeConditionVariable(&info->cond);
+            info->team       = &team_info;
+            info->thread_num = team_info.num_threads;
+
+            thread = CreateThread(NULL, 0, _vcomp_fork_worker, info, 0, NULL);
+            if (!thread)
+            {
+                HeapFree(GetProcessHeap(), 0, info);
+                break;
+            }
+
+            GetModuleHandleExW(GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
+                               (const WCHAR *)vcomp_module, &module);
+
+            list_add_tail(&thread_info.entry, &info->entry);
+            team_info.num_threads++;
+            CloseHandle(thread);
+        }
+
+        LeaveCriticalSection(&vcomp_section);
+    }
+
+    /* Call the callback in the context of the new team. */
+    prev_thread_info = vcomp_get_thread_info();
+    vcomp_set_thread_info(&thread_info);
+    _vcomp_fork_call_wrapper(team_info.wrapper, team_info.nargs, team_info.valist);
+    vcomp_set_thread_info(prev_thread_info);
+
+    /* Implicit join, wait for other tasks. */
+    if (parallel)
+    {
+        EnterCriticalSection(&vcomp_section);
+
+        team_info.finished_threads++;
+        while (team_info.finished_threads < team_info.num_threads)
+            SleepConditionVariableCS(&team_info.cond, &vcomp_section, INFINITE);
+
+        LeaveCriticalSection(&vcomp_section);
+        assert(list_empty(&thread_info.entry));
+    }
+
+    __ms_va_end(team_info.valist);
 }
 
 #if defined(__i386__)
@@ -208,8 +398,19 @@ BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
     {
         case DLL_WINE_PREATTACH:
             return FALSE;    /* prefer native version */
+
         case DLL_PROCESS_ATTACH:
+            vcomp_module = hinstDLL;
             DisableThreadLibraryCalls(hinstDLL);
+            if ((vcomp_context_tls = TlsAlloc()) == TLS_OUT_OF_INDEXES)
+            {
+                ERR("Failed to allocate TLS index\n");
+                return FALSE;
+            }
+            break;
+
+        case DLL_PROCESS_DETACH:
+            TlsFree(vcomp_context_tls);
             break;
     }
 
-- 
2.4.5


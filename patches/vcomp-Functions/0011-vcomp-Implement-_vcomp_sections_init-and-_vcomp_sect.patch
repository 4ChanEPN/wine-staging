From 92b615e0038571e52fb6cc22164ba80c07dcf2f5 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Sat, 11 Jul 2015 21:29:41 +0200
Subject: vcomp: Implement _vcomp_sections_init and _vcomp_sections_next and
 add tests.

---
 dlls/vcomp/main.c           | 49 +++++++++++++++++++++++++++++++++++++++++++++
 dlls/vcomp/tests/vcomp.c    | 49 +++++++++++++++++++++++++++++++++++++++++++++
 dlls/vcomp/vcomp.spec       |  4 ++--
 dlls/vcomp100/vcomp100.spec |  4 ++--
 dlls/vcomp90/vcomp90.spec   |  4 ++--
 5 files changed, 104 insertions(+), 6 deletions(-)

diff --git a/dlls/vcomp/main.c b/dlls/vcomp/main.c
index a9a49ce..31814d6 100644
--- a/dlls/vcomp/main.c
+++ b/dlls/vcomp/main.c
@@ -58,6 +58,9 @@ struct vcomp_thread_data
     /* only used for concurrent tasks */
     struct list             entry;
     CONDITION_VARIABLE      cond;
+
+    /* section */
+    unsigned int            section;
 };
 
 struct vcomp_team_data
@@ -74,6 +77,11 @@ struct vcomp_team_data
     /* barrier */
     unsigned int            barrier;
     int                     barrier_count;
+
+    /* section */
+    unsigned int            section;
+    unsigned int            num_sections;
+    unsigned int            section_index;
 };
 
 void CDECL _vcomp_fork_call_wrapper(void *wrapper, int nargs, __ms_va_list args);
@@ -453,6 +461,43 @@ void CDECL _vcomp_for_static_end(void)
     TRACE("()\n");
 }
 
+void CDECL _vcomp_sections_init(int n)
+{
+    struct vcomp_thread_data *thread_data = vcomp_get_thread_data();
+    struct vcomp_team_data *team_data = thread_data->team;
+
+    TRACE("(%d)\n", n);
+
+    EnterCriticalSection(&vcomp_section);
+    thread_data->section++;
+    if ((int)(thread_data->section - team_data->section) > 0)
+    {
+        /* first thread in a new section */
+        team_data->section = thread_data->section;
+        team_data->num_sections  = n;
+        team_data->section_index = 0;
+    }
+    LeaveCriticalSection(&vcomp_section);
+}
+
+int CDECL _vcomp_sections_next(void)
+{
+    struct vcomp_thread_data *thread_data = vcomp_get_thread_data();
+    struct vcomp_team_data *team_data = thread_data->team;
+    int i = -1;
+
+    TRACE("()\n");
+
+    EnterCriticalSection(&vcomp_section);
+    if (thread_data->section == team_data->section &&
+        team_data->section_index < team_data->num_sections)
+    {
+        i = team_data->section_index++;
+    }
+    LeaveCriticalSection(&vcomp_section);
+    return i;
+}
+
 int CDECL omp_in_parallel(void)
 {
     TRACE("()\n");
@@ -526,10 +571,12 @@ void WINAPIV _vcomp_fork(BOOL ifval, int nargs, void *wrapper, ...)
     __ms_va_start(team_data.valist, wrapper);
     team_data.barrier           = 0;
     team_data.barrier_count     = 0;
+    team_data.section           = 0;
 
     thread_data.team            = &team_data;
     thread_data.thread_num      = 0;
     thread_data.fork_threads    = 0;
+    thread_data.section         = 1;
     list_init(&thread_data.entry);
     InitializeConditionVariable(&thread_data.cond);
 
@@ -545,6 +592,7 @@ void WINAPIV _vcomp_fork(BOOL ifval, int nargs, void *wrapper, ...)
             data->team          = &team_data;
             data->thread_num    = team_data.num_threads++;
             data->fork_threads  = 0;
+            data->section       = 1;
             list_remove(&data->entry);
             list_add_tail(&thread_data.entry, &data->entry);
             WakeAllConditionVariable(&data->cond);
@@ -563,6 +611,7 @@ void WINAPIV _vcomp_fork(BOOL ifval, int nargs, void *wrapper, ...)
             data->team          = &team_data;
             data->thread_num    = team_data.num_threads;
             data->fork_threads  = 0;
+            data->section       = 1;
             InitializeConditionVariable(&data->cond);
 
             thread = CreateThread(NULL, 0, _vcomp_fork_worker, data, 0, NULL);
diff --git a/dlls/vcomp/tests/vcomp.c b/dlls/vcomp/tests/vcomp.c
index 0103af1..c962fe8 100644
--- a/dlls/vcomp/tests/vcomp.c
+++ b/dlls/vcomp/tests/vcomp.c
@@ -38,6 +38,8 @@ static void  (CDECL   *p_vcomp_for_static_init)(int first, int last, int step, i
 static void  (CDECL   *p_vcomp_for_static_simple_init)(unsigned int first, unsigned int last, int step,
                                                        BOOL forward, unsigned int *begin, unsigned int *end);
 static void  (WINAPIV *p_vcomp_fork)(BOOL ifval, int nargs, void *wrapper, ...);
+static void  (CDECL   *p_vcomp_sections_init)(int n);
+static int   (CDECL   *p_vcomp_sections_next)(void);
 static void  (CDECL   *p_vcomp_set_num_threads)(int num_threads);
 static int   (CDECL   *pomp_get_max_threads)(void);
 static int   (CDECL   *pomp_get_nested)(void);
@@ -177,6 +179,8 @@ static BOOL init_vcomp(void)
     VCOMP_GET_PROC(_vcomp_for_static_init);
     VCOMP_GET_PROC(_vcomp_for_static_simple_init);
     VCOMP_GET_PROC(_vcomp_fork);
+    VCOMP_GET_PROC(_vcomp_sections_init);
+    VCOMP_GET_PROC(_vcomp_sections_next);
     VCOMP_GET_PROC(_vcomp_set_num_threads);
     VCOMP_GET_PROC(omp_get_max_threads);
     VCOMP_GET_PROC(omp_get_nested);
@@ -759,6 +763,50 @@ static void test_vcomp_for_static_init(void)
     }
 }
 
+static void CDECL _test_vcomp_sections_init(LONG *a, LONG *b, LONG *c)
+{
+    int i;
+
+    p_vcomp_sections_init(20);
+    while ((i = p_vcomp_sections_next()) != -1)
+    {
+        InterlockedIncrement(a);
+        Sleep(50);
+    }
+
+    p_vcomp_sections_init(30);
+    while ((i = p_vcomp_sections_next()) != -1)
+    {
+        InterlockedIncrement(b);
+        Sleep(50);
+    }
+
+    p_vcomp_sections_init(40);
+    while ((i = p_vcomp_sections_next()) != -1)
+    {
+        InterlockedIncrement(c);
+        Sleep(50);
+    }
+}
+
+static void test_vcomp_sections_init(void)
+{
+    LONG a, b, c;
+    int i;
+
+    for (i = 1; i <= 4; i++)
+    {
+        trace("Running tests with %d threads\n", i);
+        pomp_set_num_threads(i);
+
+        a = b = c = 0;
+        p_vcomp_fork(TRUE, 3, _test_vcomp_sections_init, &a, &b, &c);
+        ok(a == 20, "expected a = 20, got %d\n", a);
+        ok(b == 30, "expected b = 30, got %d\n", b);
+        ok(c == 40, "expected c = 40, got %d\n", c);
+    }
+}
+
 START_TEST(vcomp)
 {
     if (!init_vcomp())
@@ -769,6 +817,7 @@ START_TEST(vcomp)
     test_vcomp_fork();
     test_vcomp_for_static_simple_init();
     test_vcomp_for_static_init();
+    test_vcomp_sections_init();
 
     release_vcomp();
 }
diff --git a/dlls/vcomp/vcomp.spec b/dlls/vcomp/vcomp.spec
index 156233f..7083ce4 100644
--- a/dlls/vcomp/vcomp.spec
+++ b/dlls/vcomp/vcomp.spec
@@ -83,8 +83,8 @@
 @ stub _vcomp_reduction_u2
 @ stub _vcomp_reduction_u4
 @ stub _vcomp_reduction_u8
-@ stub _vcomp_sections_init
-@ stub _vcomp_sections_next
+@ cdecl _vcomp_sections_init(long)
+@ cdecl _vcomp_sections_next()
 @ cdecl _vcomp_set_num_threads(long)
 @ cdecl _vcomp_single_begin(long)
 @ cdecl _vcomp_single_end()
diff --git a/dlls/vcomp100/vcomp100.spec b/dlls/vcomp100/vcomp100.spec
index dd276d0..56c7ae3 100644
--- a/dlls/vcomp100/vcomp100.spec
+++ b/dlls/vcomp100/vcomp100.spec
@@ -83,8 +83,8 @@
 @ stub _vcomp_reduction_u2
 @ stub _vcomp_reduction_u4
 @ stub _vcomp_reduction_u8
-@ stub _vcomp_sections_init
-@ stub _vcomp_sections_next
+@ cdecl _vcomp_sections_init(long) vcomp._vcomp_sections_init
+@ cdecl _vcomp_sections_next() vcomp._vcomp_sections_next
 @ cdecl _vcomp_set_num_threads(long) vcomp._vcomp_set_num_threads
 @ cdecl _vcomp_single_begin(long) vcomp._vcomp_single_begin
 @ cdecl _vcomp_single_end() vcomp._vcomp_single_end
diff --git a/dlls/vcomp90/vcomp90.spec b/dlls/vcomp90/vcomp90.spec
index dd276d0..56c7ae3 100644
--- a/dlls/vcomp90/vcomp90.spec
+++ b/dlls/vcomp90/vcomp90.spec
@@ -83,8 +83,8 @@
 @ stub _vcomp_reduction_u2
 @ stub _vcomp_reduction_u4
 @ stub _vcomp_reduction_u8
-@ stub _vcomp_sections_init
-@ stub _vcomp_sections_next
+@ cdecl _vcomp_sections_init(long) vcomp._vcomp_sections_init
+@ cdecl _vcomp_sections_next() vcomp._vcomp_sections_next
 @ cdecl _vcomp_set_num_threads(long) vcomp._vcomp_set_num_threads
 @ cdecl _vcomp_single_begin(long) vcomp._vcomp_single_begin
 @ cdecl _vcomp_single_end() vcomp._vcomp_single_end
-- 
2.4.5


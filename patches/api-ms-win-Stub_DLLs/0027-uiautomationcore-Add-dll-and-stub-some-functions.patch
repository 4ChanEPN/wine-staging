From aefdbc0fabb66052164ecd45fecfb0b947a130ac Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Tue, 12 Apr 2016 01:02:34 +0200
Subject: uiautomationcore: Add dll and stub some functions.

---
 dlls/uiautomationcore/Makefile.in           |  1 +
 dlls/uiautomationcore/uia_main.c            | 89 ++++++++++++++++++++++++++++-
 dlls/uiautomationcore/uiautomationcore.spec | 14 +++--
 include/uiautomationcoreapi.h               | 16 ++++++
 4 files changed, 114 insertions(+), 6 deletions(-)

diff --git a/dlls/uiautomationcore/Makefile.in b/dlls/uiautomationcore/Makefile.in
index 78d6254a015..029fc2e4995 100644
--- a/dlls/uiautomationcore/Makefile.in
+++ b/dlls/uiautomationcore/Makefile.in
@@ -1,4 +1,5 @@
 MODULE = uiautomationcore.dll
+IMPORTS   = uuid
 
 C_SRCS = \
 	uia_main.c
diff --git a/dlls/uiautomationcore/uia_main.c b/dlls/uiautomationcore/uia_main.c
index 994d8e6080b..f1429faeff9 100644
--- a/dlls/uiautomationcore/uia_main.c
+++ b/dlls/uiautomationcore/uia_main.c
@@ -1,4 +1,5 @@
 /*
+ * Copyright 2016 Michael MÃ¼ller
  * Copyright 2017 Jacek Caban for CodeWeavers
  *
  * This library is free software; you can redistribute it and/or
@@ -16,7 +17,11 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-#include "uiautomationcore.h"
+#include <stdarg.h>
+#include "windef.h"
+#include "winbase.h"
+#define COBJMACROS
+#include "uiautomationcoreapi.h"
 
 #include "wine/debug.h"
 
@@ -37,11 +42,91 @@ BOOL WINAPI DllMain(HINSTANCE hInstDLL, DWORD fdwReason, void *lpv)
     return TRUE;
 }
 
+static HRESULT WINAPI dummy_QueryInterface(IUnknown *iface, REFIID iid, void **ppv)
+{
+    TRACE("(%p, %s, %p)\n", iface, debugstr_guid(iid), ppv);
+
+    if (!ppv) return E_INVALIDARG;
+
+    if (!IsEqualIID(&IID_IUnknown, iid))
+    {
+        FIXME("Unknown interface: %s\n", debugstr_guid(iid));
+        *ppv = NULL;
+        return E_NOINTERFACE;
+    }
+
+    *ppv = iface;
+    IUnknown_AddRef((IUnknown *)*ppv);
+    return S_OK;
+}
+
+static ULONG WINAPI dummy_AddRef(IUnknown *iface)
+{
+    FIXME("(%p): stub\n", iface);
+    return 1;
+}
+
+static ULONG WINAPI dummy_Release(IUnknown *iface)
+{
+    FIXME("(%p): stub\n", iface);
+    return 1;
+}
+
+static const IUnknownVtbl dummy_Vtbl =
+{
+    dummy_QueryInterface,
+    dummy_AddRef,
+    dummy_Release,
+};
+
+static IUnknown dummy = { &dummy_Vtbl };
+
+/***********************************************************************
+ *          UiaLookupId (uiautomationcore.@)
+ */
+int WINAPI UiaLookupId(AutomationIdentifierType type, const GUID *guid)
+{
+    FIXME("(%d, %s)\n", type, debugstr_guid(guid));
+    return 1;
+}
+
+/***********************************************************************
+ *          UiaGetReservedMixedAttributeValue (uiautomationcore.@)
+ */
+HRESULT WINAPI UiaGetReservedMixedAttributeValue(IUnknown **value)
+{
+    FIXME("(%p): stub\n", value);
+
+    *value = &dummy;
+    return S_OK;
+}
+
+/***********************************************************************
+ *          UiaGetReservedNotSupportedValue (uiautomationcore.@)
+ */
+HRESULT WINAPI UiaGetReservedNotSupportedValue(IUnknown **value)
+{
+    FIXME("(%p): stub\n", value);
+
+    *value = &dummy;
+    return S_OK;
+}
+
+/***********************************************************************
+ *          UiaReturnRawElementProvider (uiautomationcore.@)
+ */
+LRESULT WINAPI UiaReturnRawElementProvider(HWND hwnd, WPARAM wparam, LPARAM lparam,
+                                           IRawElementProviderSimple *provider)
+{
+    FIXME("(%p, %lx, %lx, %p): stub\n", hwnd, wparam, lparam, provider);
+    return 0;
+}
+
 /***********************************************************************
  *          UiaClientsAreListening (uiautomationcore.@)
  */
 BOOL WINAPI UiaClientsAreListening(void)
 {
-    FIXME("()\n");
+    FIXME("(): stub\n");
     return FALSE;
 }
diff --git a/dlls/uiautomationcore/uiautomationcore.spec b/dlls/uiautomationcore/uiautomationcore.spec
index 3026001b6b7..221711c41d2 100644
--- a/dlls/uiautomationcore/uiautomationcore.spec
+++ b/dlls/uiautomationcore/uiautomationcore.spec
@@ -53,14 +53,16 @@
 @ stub TransformPattern_Rotate
 @ stub UiaAddEvent
 @ stdcall UiaClientsAreListening()
+@ stub UiaDisconnectAllProviders
+@ stub UiaDisconnectProvider
 @ stub UiaEventAddWindow
 @ stub UiaEventRemoveWindow
 @ stub UiaFind
 @ stub UiaGetErrorDescription
 @ stub UiaGetPatternProvider
 @ stub UiaGetPropertyValue
-@ stub UiaGetReservedMixedAttributeValue
-@ stub UiaGetReservedNotSupportedValue
+@ stdcall UiaGetReservedMixedAttributeValue(ptr)
+@ stdcall UiaGetReservedNotSupportedValue(ptr)
 @ stub UiaGetRootNode
 @ stub UiaGetRuntimeId
 @ stub UiaGetUpdatedCache
@@ -69,7 +71,8 @@
 @ stub UiaHUiaNodeFromVariant
 @ stub UiaHasServerSideProvider
 @ stub UiaHostProviderFromHwnd
-@ stub UiaLookupId
+@ stub UiaIAccessibleFromProvider
+@ stdcall UiaLookupId(long ptr)
 @ stub UiaNavigate
 @ stub UiaNodeFromFocus
 @ stub UiaNodeFromHandle
@@ -77,13 +80,16 @@
 @ stub UiaNodeFromProvider
 @ stub UiaNodeRelease
 @ stub UiaPatternRelease
+@ stub UiaProviderForNonClient
+@ stub UiaProviderFromIAccessible
 @ stub UiaRaiseAsyncContentLoadedEvent
 @ stub UiaRaiseAutomationEvent
 @ stub UiaRaiseAutomationPropertyChangedEvent
 @ stub UiaRaiseStructureChangedEvent
+@ stub UiaRaiseTextEditTextChangedEvent
 @ stub UiaRegisterProviderCallback
 @ stub UiaRemoveEvent
-@ stub UiaReturnRawElementProvider
+@ stdcall UiaReturnRawElementProvider(long long long ptr)
 @ stub UiaSetFocus
 @ stub UiaTextRangeRelease
 @ stub ValuePattern_SetValue
diff --git a/include/uiautomationcoreapi.h b/include/uiautomationcoreapi.h
index 340f5005db4..b9107ceb792 100644
--- a/include/uiautomationcoreapi.h
+++ b/include/uiautomationcoreapi.h
@@ -19,6 +19,8 @@
 #ifndef _INC_UIAUTOMATIONCOREAPI
 #define _INC_UIAUTOMATIONCOREAPI
 
+#include "uiautomationcore.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -34,6 +36,16 @@ extern "C" {
 #define UiaAppendRuntimeId  3
 #define UiaRootObjectId     -25
 
+typedef enum AutomationIdentifierType
+{
+    AutomationIdentifierType_Property,
+    AutomationIdentifierType_Pattern,
+    AutomationIdentifierType_Event,
+    AutomationIdentifierType_ControlType,
+    AutomationIdentifierType_TextAttribute,
+    AutomationIdentifierType_LandmarkType,
+} AutomationIdentifierType;
+
 DECLARE_HANDLE(HUIANODE);
 DECLARE_HANDLE(HUIAPATTERNOBJECT);
 DECLARE_HANDLE(HUIATEXTRANGE);
@@ -41,6 +53,10 @@ DECLARE_HANDLE(HUIAEVENT);
 
 BOOL WINAPI UiaPatternRelease(HUIAPATTERNOBJECT hobj);
 BOOL WINAPI UiaTextRangeRelease(HUIATEXTRANGE hobj);
+int WINAPI UiaLookupId(AutomationIdentifierType type, const GUID *guid);
+HRESULT WINAPI UiaGetReservedMixedAttributeValue(IUnknown **value);
+HRESULT WINAPI UiaGetReservedNotSupportedValue(IUnknown **value);
+LRESULT WINAPI UiaReturnRawElementProvider(HWND hwnd, WPARAM wparam, LPARAM lparam, IRawElementProviderSimple *provider);
 
 #ifdef __cplusplus
 }
-- 
2.11.0


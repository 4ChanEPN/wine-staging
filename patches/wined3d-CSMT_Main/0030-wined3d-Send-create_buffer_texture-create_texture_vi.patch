From 2f3f8e0f66c51a459b0a2bbd25dc7f6a7c3fe6bd Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Tue, 7 Feb 2017 15:02:44 +0100
Subject: wined3d: Send create_buffer_texture / create_texture_view through the
 CS.

---
 dlls/wined3d/cs.c              | 73 +++++++++++++++++++++++++++++++++++++++++-
 dlls/wined3d/view.c            | 13 ++++----
 dlls/wined3d/wined3d_private.h | 13 ++++++++
 3 files changed, 92 insertions(+), 7 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 51f315ee500..4778b73b0dc 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -91,6 +91,8 @@ enum wined3d_cs_op
     WINED3D_CS_OP_SAMPLER_INIT,
     WINED3D_CS_OP_TEXTURE_ADD_DIRTY_REGION,
     WINED3D_CS_OP_BUFFER_COPY,
+    WINED3D_CS_OP_CREATE_BUFFER_TEXTURE,
+    WINED3D_CS_OP_CREATE_TEXTURE_VIEW,
     WINED3D_CS_OP_STOP,
 };
 
@@ -499,6 +501,24 @@ struct wined3d_cs_buffer_copy
     unsigned int size;
 };
 
+struct wined3d_cs_create_buffer_texture
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_gl_view *view;
+    struct wined3d_buffer *buffer;
+    const struct wined3d_format *view_format;
+};
+
+struct wined3d_cs_create_texture_view
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_gl_view *view;
+    GLenum view_target;
+    const struct wined3d_view_desc *desc;
+    struct wined3d_texture *texture;
+    const struct wined3d_format *view_format;
+};
+
 static inline BOOL wined3d_cs_process_block(struct wined3d_cs *cs, struct wined3d_cs_block *block);
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs);
 
@@ -2507,7 +2527,6 @@ void wined3d_cs_emit_texture_add_dirty_region(struct wined3d_cs *cs,
     cs->ops->submit(cs);
 }
 
-
 static UINT wined3d_cs_exec_buffer_copy(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_buffer_copy *op = data;
@@ -2542,6 +2561,55 @@ void wined3d_cs_emit_buffer_copy(struct wined3d_cs *cs, struct wined3d_buffer *d
     cs->ops->submit(cs);
 }
 
+static UINT wined3d_cs_exec_create_buffer_texture(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_create_buffer_texture *op = data;
+
+    create_buffer_texture(op->view, op->buffer, op->view_format);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_create_buffer_texture(struct wined3d_cs *cs, struct wined3d_gl_view *view,
+        struct wined3d_buffer *buffer, const struct wined3d_format *view_format)
+{
+    struct wined3d_cs_create_buffer_texture *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_CREATE_BUFFER_TEXTURE;
+    op->view = view;
+    op->buffer = buffer;
+    op->view_format = view_format;
+
+    cs->ops->submit_and_wait(cs);
+}
+
+static UINT wined3d_cs_exec_create_texture_view(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_create_texture_view *op = data;
+
+    create_texture_view(op->view, op->view_target, op->desc, op->texture, op->view_format);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_create_texture_view(struct wined3d_cs *cs, struct wined3d_gl_view *view,
+        GLenum view_target, const struct wined3d_view_desc *desc, struct wined3d_texture *texture,
+        const struct wined3d_format *view_format)
+{
+    struct wined3d_cs_create_texture_view *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_CREATE_TEXTURE_VIEW;
+    op->view = view;
+    op->view_target = view_target;
+    op->desc = desc;
+    op->texture = texture;
+    op->view_format = view_format;
+
+    cs->ops->submit_and_wait(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                      */ wined3d_cs_exec_fence,
@@ -2598,6 +2666,9 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_SAMPLER_INIT               */ wined3d_cs_exec_sampler_init,
     /* WINED3D_CS_OP_TEXTURE_ADD_DIRTY_REGION   */ wined3d_cs_exec_texture_add_dirty_region,
     /* WINED3D_CS_OP_BUFFER_COPY                */ wined3d_cs_exec_buffer_copy,
+    /* WINED3D_CS_OP_CREATE_BUFFER_TEXTURE      */ wined3d_cs_exec_create_buffer_texture,
+    /* WINED3D_CS_OP_CREATE_TEXTURE_VIEW        */ wined3d_cs_exec_create_texture_view,
+
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/view.c b/dlls/wined3d/view.c
index b97a25add3e..60bb483e7ff 100644
--- a/dlls/wined3d/view.c
+++ b/dlls/wined3d/view.c
@@ -72,7 +72,7 @@ static GLenum get_texture_view_target(const struct wined3d_gl_info *gl_info,
     return texture->target;
 }
 
-static void create_texture_view(struct wined3d_gl_view *view, GLenum view_target,
+void create_texture_view(struct wined3d_gl_view *view, GLenum view_target,
         const struct wined3d_view_desc *desc, struct wined3d_texture *texture,
         const struct wined3d_format *view_format)
 {
@@ -133,7 +133,7 @@ static void create_texture_view(struct wined3d_gl_view *view, GLenum view_target
     context_release(context);
 }
 
-static void create_buffer_texture(struct wined3d_gl_view *view,
+void create_buffer_texture(struct wined3d_gl_view *view,
         struct wined3d_buffer *buffer, const struct wined3d_format *view_format)
 {
     const struct wined3d_gl_info *gl_info;
@@ -475,7 +475,7 @@ static HRESULT wined3d_shader_resource_view_init(struct wined3d_shader_resource_
                 FIXME("Ignoring buffer range %u-%u.\n", desc->u.buffer.start_idx, desc->u.buffer.count);
             }
 
-            create_buffer_texture(&view->gl_view, buffer, view_format);
+            wined3d_cs_emit_create_buffer_texture(resource->device->cs, &view->gl_view, buffer, view_format);
         }
     }
     else
@@ -506,7 +506,8 @@ static HRESULT wined3d_shader_resource_view_init(struct wined3d_shader_resource_
         else if (resource->format->typeless_id == view_format->typeless_id
                 && resource->format->gl_view_class == view_format->gl_view_class)
         {
-            create_texture_view(&view->gl_view, view_target, desc, texture, view_format);
+            wined3d_cs_emit_create_texture_view(resource->device->cs, &view->gl_view, view_target,
+                    desc, texture, view_format);
         }
         else
         {
@@ -671,8 +672,8 @@ static HRESULT wined3d_unordered_access_view_init(struct wined3d_unordered_acces
 
         if (desc->u.texture.layer_idx || desc->u.texture.layer_count != depth_or_layer_count)
         {
-            create_texture_view(&view->gl_view, get_texture_view_target(gl_info, desc, texture),
-                    desc, texture, view->format);
+            wined3d_cs_emit_create_texture_view(resource->device->cs, &view->gl_view,
+                    get_texture_view_target(gl_info, desc, texture), desc, texture, view->format);
         }
 
         view->layer_idx = desc->u.texture.layer_idx;
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 76394cac3ca..dbf6ef47134 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3222,6 +3222,8 @@ static inline void wined3d_resource_wait_idle(struct wined3d_resource *resource)
     while (InterlockedCompareExchange(&resource->access_count, 0, 0));
 }
 
+struct wined3d_gl_view;
+
 struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device) DECLSPEC_HIDDEN;
 void wined3d_cs_destroy(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 
@@ -3237,9 +3239,14 @@ void wined3d_cs_emit_clear(struct wined3d_cs *cs, DWORD rect_count, const RECT *
 void wined3d_cs_emit_clear_rtv(struct wined3d_cs *cs, struct wined3d_rendertarget_view *view,
         const RECT *rect, DWORD flags, const struct wined3d_color *color, float depth, DWORD stencil,
         const struct blit_shader *blitter) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_create_buffer_texture(struct wined3d_cs *cs, struct wined3d_gl_view *view,
+        struct wined3d_buffer *buffer, const struct wined3d_format *view_format) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_create_dummy_textures(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 HRESULT wined3d_cs_emit_create_swapchain_context(struct wined3d_cs *cs,
         struct wined3d_swapchain *swapchain) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_create_texture_view(struct wined3d_cs *cs, struct wined3d_gl_view *view,
+        GLenum view_target, const struct wined3d_view_desc *desc, struct wined3d_texture *texture,
+        const struct wined3d_format *view_format) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_destroy_object(struct wined3d_cs *cs,
         void (*callback)(void *object), void *object) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_dispatch(struct wined3d_cs *cs,
@@ -3421,6 +3428,12 @@ struct wined3d_gl_view
     GLuint name;
 };
 
+void create_buffer_texture(struct wined3d_gl_view *view,
+        struct wined3d_buffer *buffer, const struct wined3d_format *view_format) DECLSPEC_HIDDEN;
+void create_texture_view(struct wined3d_gl_view *view, GLenum view_target,
+        const struct wined3d_view_desc *desc, struct wined3d_texture *texture,
+        const struct wined3d_format *view_format) DECLSPEC_HIDDEN;
+
 struct wined3d_shader_resource_view
 {
     LONG refcount;
-- 
2.11.0


From c9eddaea0012e092e914b997cbeda8ebf5d00ba4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Thu, 5 Nov 2015 16:39:01 +0100
Subject: wined3d: Destroy shader resource views through the CS.

---
 dlls/wined3d/cs.c              | 28 ++++++++++++++++++++++++++++
 dlls/wined3d/view.c            | 37 ++++++++++++++++++-------------------
 dlls/wined3d/wined3d_private.h |  4 ++++
 3 files changed, 50 insertions(+), 19 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index bf446aa..9965e9b 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -86,6 +86,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_BUFFER_CLEANUP,
     WINED3D_CS_OP_TEXTURE_CLEANUP,
     WINED3D_CS_OP_SAMPLER_DESTROY,
+    WINED3D_CS_OP_SRV_DESTROY,
     WINED3D_CS_OP_STOP,
 };
 
@@ -514,6 +515,12 @@ struct wined3d_cs_sampler_destroy
     struct wined3d_sampler *sampler;
 };
 
+struct wined3d_cs_shader_resource_view_destroy
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_shader_resource_view *view;
+};
+
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -2575,6 +2582,26 @@ void wined3d_cs_emit_sampler_destroy(struct wined3d_cs *cs, struct wined3d_sampl
     cs->ops->submit(cs, sizeof(*op));
 }
 
+static UINT wined3d_cs_exec_shader_resource_view_destroy(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_shader_resource_view_destroy *op = data;
+
+    wined3d_shader_resource_view_destroy_cs(op->view);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_shader_resource_view_destroy(struct wined3d_cs *cs, struct wined3d_shader_resource_view *view)
+{
+    struct wined3d_cs_shader_resource_view_destroy *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_SRV_DESTROY;
+    op->view = view;
+
+    cs->ops->submit(cs, sizeof(*op));
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                        */ wined3d_cs_exec_nop,
@@ -2639,6 +2666,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_BUFFER_CLEANUP             */ wined3d_cs_exec_buffer_cleanup,
     /* WINED3D_CS_OP_TEXTURE_CLEANUP            */ wined3d_cs_exec_texture_cleanup,
     /* WINED3D_CS_OP_SAMPLER_DESTROY            */ wined3d_cs_exec_sampler_destroy,
+    /* WINED3D_CS_OP_SRV_DESTROY                */ wined3d_cs_exec_shader_resource_view_destroy,
 };
 
 static inline void *_wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, BOOL prio)
diff --git a/dlls/wined3d/view.c b/dlls/wined3d/view.c
index 070694e..7797c58 100644
--- a/dlls/wined3d/view.c
+++ b/dlls/wined3d/view.c
@@ -184,6 +184,23 @@ ULONG CDECL wined3d_shader_resource_view_incref(struct wined3d_shader_resource_v
     return refcount;
 }
 
+void wined3d_shader_resource_view_destroy_cs(struct wined3d_shader_resource_view *view)
+{
+    if (view->object)
+    {
+        const struct wined3d_gl_info *gl_info;
+        struct wined3d_context *context;
+
+        context = context_acquire(view->resource->device, NULL);
+        gl_info = context->gl_info;
+        gl_info->gl_ops.gl.p_glDeleteTextures(1, &view->object);
+        checkGLcall("glDeleteTextures");
+        context_release(context);
+    }
+
+    HeapFree(GetProcessHeap(), 0, view);
+}
+
 ULONG CDECL wined3d_shader_resource_view_decref(struct wined3d_shader_resource_view *view)
 {
     ULONG refcount = InterlockedDecrement(&view->refcount);
@@ -194,29 +211,11 @@ ULONG CDECL wined3d_shader_resource_view_decref(struct wined3d_shader_resource_v
     {
         struct wined3d_device *device = view->resource->device;
 
-        if (wined3d_settings.cs_multithreaded)
-        {
-            FIXME("Waiting for cs.\n");
-            device->cs->ops->finish(device->cs);
-        }
-
-        if (view->object)
-        {
-            const struct wined3d_gl_info *gl_info;
-            struct wined3d_context *context;
-
-            context = context_acquire(view->resource->device, NULL);
-            gl_info = context->gl_info;
-            gl_info->gl_ops.gl.p_glDeleteTextures(1, &view->object);
-            checkGLcall("glDeleteTextures");
-            context_release(context);
-        }
-
         /* Call wined3d_object_destroyed() before releasing the resource,
          * since releasing the resource may end up destroying the parent. */
         view->parent_ops->wined3d_object_destroyed(view->parent);
         wined3d_resource_decref(view->resource);
-        HeapFree(GetProcessHeap(), 0, view);
+        wined3d_cs_emit_shader_resource_view_destroy(device->cs, view);
     }
 
     return refcount;
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 51ffe6f..c285702 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3096,6 +3096,8 @@ void wined3d_cs_emit_resource_cleanup(struct wined3d_cs *cs,
 void wined3d_cs_emit_buffer_cleanup(struct wined3d_cs *cs, struct wined3d_buffer *buffer) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_cleanup(struct wined3d_cs *cs, struct wined3d_texture *texture) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_sampler_destroy(struct wined3d_cs *cs, struct wined3d_sampler *sampler) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_shader_resource_view_destroy(struct wined3d_cs *cs,
+        struct wined3d_shader_resource_view *view) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
@@ -3240,6 +3242,8 @@ struct wined3d_shader_resource_view
 void wined3d_shader_resource_view_bind(struct wined3d_shader_resource_view *view,
         struct wined3d_context *context) DECLSPEC_HIDDEN;
 
+void wined3d_shader_resource_view_destroy_cs(struct wined3d_shader_resource_view *view) DECLSPEC_HIDDEN;
+
 struct wined3d_swapchain_ops
 {
     void (*swapchain_present)(struct wined3d_swapchain *swapchain,
-- 
2.8.0


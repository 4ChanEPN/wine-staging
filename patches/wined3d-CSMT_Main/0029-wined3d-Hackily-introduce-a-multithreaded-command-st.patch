From aaef68da7d9a0734e4827036aa561b0e67c70606 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Tue, 1 Oct 2013 14:31:56 +0200
Subject: wined3d: Hackily introduce a multithreaded command stream

---
 dlls/wined3d/context.c         |   3 +
 dlls/wined3d/cs.c              | 443 ++++++++++++++++++++++++++++++++++++-----
 dlls/wined3d/device.c          |   2 +-
 dlls/wined3d/wined3d_main.c    |  10 +
 dlls/wined3d/wined3d_private.h |  33 ++-
 5 files changed, 430 insertions(+), 61 deletions(-)

diff --git a/dlls/wined3d/context.c b/dlls/wined3d/context.c
index 9e0805e822d..226d655b83a 100644
--- a/dlls/wined3d/context.c
+++ b/dlls/wined3d/context.c
@@ -3722,6 +3722,9 @@ struct wined3d_context *context_acquire(const struct wined3d_device *device,
 
     TRACE("device %p, texture %p, sub_resource_idx %u.\n", device, texture, sub_resource_idx);
 
+    if (wined3d_settings.cs_multithreaded && device->cs->thread_id != GetCurrentThreadId())
+        FIXME("Acquiring a GL context from outside the CS thread.\n");
+
     if (current_context && current_context->destroyed)
         current_context = NULL;
 
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 93a80f2887e..35f6a5889fb 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -18,6 +18,7 @@
 
 #include "config.h"
 #include "wine/port.h"
+#include <assert.h>
 #include "wined3d_private.h"
 
 WINE_DEFAULT_DEBUG_CHANNEL(d3d);
@@ -77,6 +78,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_TEXTURE_ADD_DIRTY_REGION,
     WINED3D_CS_OP_BUFFER_COPY,
     WINED3D_CS_OP_MAP_VERTEX_BUFFERS,
+    WINED3D_CS_OP_STOP,
 };
 
 struct wined3d_cs_sync
@@ -462,8 +464,14 @@ struct wined3d_cs_map_vertex_buffers
     struct wined3d_stream_info *stream_info;
 };
 
-static void wined3d_cs_exec_sync(struct wined3d_cs *cs, const void *data)
+struct wined3d_cs_stop
 {
+    enum wined3d_cs_op opcode;
+};
+
+static UINT wined3d_cs_exec_sync(struct wined3d_cs *cs, const void *data)
+{
+    return sizeof(struct wined3d_cs_sync);
 }
 
 void wined3d_cs_emit_sync(struct wined3d_cs *cs)
@@ -476,12 +484,14 @@ void wined3d_cs_emit_sync(struct wined3d_cs *cs)
     cs->ops->submit_and_wait(cs);
 }
 
-static void wined3d_cs_exec_glfinish(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_glfinish(struct wined3d_cs *cs, const void *data)
 {
     struct wined3d_context *context = context_get_current();
 
     if (context)
         context->gl_info->gl_ops.gl.p_glFinish();
+
+    return sizeof(struct wined3d_cs_glfinish);
 }
 
 void wined3d_cs_emit_glfinish(struct wined3d_cs *cs)
@@ -494,7 +504,7 @@ void wined3d_cs_emit_glfinish(struct wined3d_cs *cs)
     cs->ops->submit_and_wait(cs);
 }
 
-static void wined3d_cs_exec_present(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_present(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_present *op = data;
     struct wined3d_swapchain *swapchain;
@@ -512,6 +522,8 @@ static void wined3d_cs_exec_present(struct wined3d_cs *cs, const void *data)
     {
         wined3d_resource_release(&swapchain->back_buffers[i]->resource);
     }
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_present(struct wined3d_cs *cs, struct wined3d_swapchain *swapchain,
@@ -551,13 +563,14 @@ void wined3d_cs_emit_present(struct wined3d_cs *cs, struct wined3d_swapchain *sw
         pending = InterlockedCompareExchange(&cs->pending_presents, 0, 0);
 }
 
-static void wined3d_cs_exec_clear(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_clear(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_state *state = &cs->state;
     const struct wined3d_cs_clear *op = data;
     struct wined3d_device *device;
     unsigned int i;
     RECT draw_rect;
+    size_t size = FIELD_OFFSET(struct wined3d_cs_clear, rects[op->rect_count]);
 
     device = cs->device;
     wined3d_get_draw_rect(state, &draw_rect);
@@ -575,6 +588,8 @@ static void wined3d_cs_exec_clear(struct wined3d_cs *cs, const void *data)
     }
     if (op->flags & (WINED3DCLEAR_ZBUFFER | WINED3DCLEAR_STENCIL))
         wined3d_resource_release(state->fb->depth_stencil->resource);
+
+    return size;
 }
 
 void wined3d_cs_emit_clear(struct wined3d_cs *cs, DWORD rect_count, const RECT *rects,
@@ -713,7 +728,7 @@ static void release_unordered_access_resources(const struct wined3d_shader *shad
     }
 }
 
-static void wined3d_cs_exec_dispatch(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_dispatch(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_dispatch *op = data;
     struct wined3d_state *state = &cs->state;
@@ -724,6 +739,8 @@ static void wined3d_cs_exec_dispatch(struct wined3d_cs *cs, const void *data)
     release_shader_resources(state, 1u << WINED3D_SHADER_TYPE_COMPUTE);
     release_unordered_access_resources(state->shader[WINED3D_SHADER_TYPE_COMPUTE],
             state->unordered_access_view[WINED3D_PIPELINE_COMPUTE]);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_dispatch(struct wined3d_cs *cs,
@@ -745,7 +762,7 @@ void wined3d_cs_emit_dispatch(struct wined3d_cs *cs,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_draw(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_draw(struct wined3d_cs *cs, const void *data)
 {
     struct wined3d_state *state = &cs->state;
     const struct wined3d_cs_draw *op = data;
@@ -790,6 +807,8 @@ static void wined3d_cs_exec_draw(struct wined3d_cs *cs, const void *data)
     release_shader_resources(state, ~(1u << WINED3D_SHADER_TYPE_COMPUTE));
     release_unordered_access_resources(state->shader[WINED3D_SHADER_TYPE_PIXEL],
             state->unordered_access_view[WINED3D_PIPELINE_GRAPHICS]);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_draw(struct wined3d_cs *cs, GLenum primitive_type, int base_vertex_idx, unsigned int start_idx,
@@ -835,12 +854,14 @@ void wined3d_cs_emit_draw(struct wined3d_cs *cs, GLenum primitive_type, int base
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_predication(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_predication(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_predication *op = data;
 
     cs->state.predicate = op->predicate;
     cs->state.predicate_value = op->value;
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_predication(struct wined3d_cs *cs, struct wined3d_query *predicate, BOOL value)
@@ -855,12 +876,14 @@ void wined3d_cs_emit_set_predication(struct wined3d_cs *cs, struct wined3d_query
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_viewport(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_viewport(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_viewport *op = data;
 
     cs->state.viewport = op->viewport;
     device_invalidate_state(cs->device, STATE_VIEWPORT);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_viewport(struct wined3d_cs *cs, const struct wined3d_viewport *viewport)
@@ -874,12 +897,14 @@ void wined3d_cs_emit_set_viewport(struct wined3d_cs *cs, const struct wined3d_vi
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_scissor_rect(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_scissor_rect(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_scissor_rect *op = data;
 
     cs->state.scissor_rect = op->rect;
     device_invalidate_state(cs->device, STATE_SCISSORRECT);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_scissor_rect(struct wined3d_cs *cs, const RECT *rect)
@@ -893,12 +918,14 @@ void wined3d_cs_emit_set_scissor_rect(struct wined3d_cs *cs, const RECT *rect)
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_rendertarget_view(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_rendertarget_view(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_rendertarget_view *op = data;
 
     cs->state.fb->render_targets[op->view_idx] = op->view;
     device_invalidate_state(cs->device, STATE_FRAMEBUFFER);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_rendertarget_view(struct wined3d_cs *cs, unsigned int view_idx,
@@ -914,7 +941,7 @@ void wined3d_cs_emit_set_rendertarget_view(struct wined3d_cs *cs, unsigned int v
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_depth_stencil_view(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_depth_stencil_view(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_depth_stencil_view *op = data;
     struct wined3d_device *device = cs->device;
@@ -949,6 +976,8 @@ static void wined3d_cs_exec_set_depth_stencil_view(struct wined3d_cs *cs, const
     }
 
     device_invalidate_state(device, STATE_FRAMEBUFFER);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_depth_stencil_view(struct wined3d_cs *cs, struct wined3d_rendertarget_view *view)
@@ -962,12 +991,14 @@ void wined3d_cs_emit_set_depth_stencil_view(struct wined3d_cs *cs, struct wined3
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_vertex_declaration(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_vertex_declaration(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_vertex_declaration *op = data;
 
     cs->state.vertex_declaration = op->declaration;
     device_invalidate_state(cs->device, STATE_VDECL);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs, struct wined3d_vertex_declaration *declaration)
@@ -981,7 +1012,7 @@ void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs, struct wined3
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_stream_source(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_stream_source(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_stream_source *op = data;
     struct wined3d_stream_state *stream;
@@ -999,6 +1030,8 @@ static void wined3d_cs_exec_set_stream_source(struct wined3d_cs *cs, const void
         InterlockedDecrement(&prev->resource.bind_count);
 
     device_invalidate_state(cs->device, STATE_STREAMSRC);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_stream_source(struct wined3d_cs *cs, UINT stream_idx,
@@ -1016,7 +1049,7 @@ void wined3d_cs_emit_set_stream_source(struct wined3d_cs *cs, UINT stream_idx,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_stream_source_freq(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_stream_source_freq(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_stream_source_freq *op = data;
     struct wined3d_stream_state *stream;
@@ -1026,6 +1059,8 @@ static void wined3d_cs_exec_set_stream_source_freq(struct wined3d_cs *cs, const
     stream->flags = op->flags;
 
     device_invalidate_state(cs->device, STATE_STREAMSRC);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_stream_source_freq(struct wined3d_cs *cs, UINT stream_idx, UINT frequency, UINT flags)
@@ -1041,7 +1076,7 @@ void wined3d_cs_emit_set_stream_source_freq(struct wined3d_cs *cs, UINT stream_i
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_stream_output(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_stream_output(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_stream_output *op = data;
     struct wined3d_stream_output *stream;
@@ -1056,6 +1091,8 @@ static void wined3d_cs_exec_set_stream_output(struct wined3d_cs *cs, const void
         InterlockedIncrement(&op->buffer->resource.bind_count);
     if (prev)
         InterlockedDecrement(&prev->resource.bind_count);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_stream_output(struct wined3d_cs *cs, UINT stream_idx,
@@ -1072,7 +1109,7 @@ void wined3d_cs_emit_set_stream_output(struct wined3d_cs *cs, UINT stream_idx,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_index_buffer(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_index_buffer(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_index_buffer *op = data;
     struct wined3d_buffer *prev;
@@ -1088,6 +1125,8 @@ static void wined3d_cs_exec_set_index_buffer(struct wined3d_cs *cs, const void *
         InterlockedDecrement(&prev->resource.bind_count);
 
     device_invalidate_state(cs->device, STATE_INDEXBUFFER);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_index_buffer(struct wined3d_cs *cs, struct wined3d_buffer *buffer,
@@ -1104,7 +1143,7 @@ void wined3d_cs_emit_set_index_buffer(struct wined3d_cs *cs, struct wined3d_buff
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_constant_buffer(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_constant_buffer(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_constant_buffer *op = data;
     struct wined3d_buffer *prev;
@@ -1118,6 +1157,7 @@ static void wined3d_cs_exec_set_constant_buffer(struct wined3d_cs *cs, const voi
         InterlockedDecrement(&prev->resource.bind_count);
 
     device_invalidate_state(cs->device, STATE_CONSTANT_BUFFER(op->type));
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_constant_buffer(struct wined3d_cs *cs, enum wined3d_shader_type type,
@@ -1134,7 +1174,7 @@ void wined3d_cs_emit_set_constant_buffer(struct wined3d_cs *cs, enum wined3d_sha
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_texture(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_texture(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_gl_info *gl_info = &cs->device->adapter->gl_info;
     const struct wined3d_d3d_info *d3d_info = &cs->device->adapter->d3d_info;
@@ -1211,6 +1251,8 @@ static void wined3d_cs_exec_set_texture(struct wined3d_cs *cs, const void *data)
 
     if (new_use_color_key)
         device_invalidate_state(cs->device, STATE_COLOR_KEY);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_texture(struct wined3d_cs *cs, UINT stage, struct wined3d_texture *texture)
@@ -1225,7 +1267,7 @@ void wined3d_cs_emit_set_texture(struct wined3d_cs *cs, UINT stage, struct wined
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_shader_resource_view(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_shader_resource_view(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_shader_resource_view *op = data;
     struct wined3d_shader_resource_view *prev;
@@ -1242,6 +1284,8 @@ static void wined3d_cs_exec_set_shader_resource_view(struct wined3d_cs *cs, cons
         device_invalidate_state(cs->device, STATE_GRAPHICS_SHADER_RESOURCE_BINDING);
     else
         device_invalidate_state(cs->device, STATE_COMPUTE_SHADER_RESOURCE_BINDING);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_shader_resource_view(struct wined3d_cs *cs, enum wined3d_shader_type type,
@@ -1258,7 +1302,7 @@ void wined3d_cs_emit_set_shader_resource_view(struct wined3d_cs *cs, enum wined3
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_unordered_access_view(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_unordered_access_view(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_unordered_access_view *op = data;
     struct wined3d_unordered_access_view *prev;
@@ -1272,6 +1316,8 @@ static void wined3d_cs_exec_set_unordered_access_view(struct wined3d_cs *cs, con
         InterlockedDecrement(&prev->resource->bind_count);
 
     device_invalidate_state(cs->device, STATE_UNORDERED_ACCESS_VIEW_BINDING(op->pipeline));
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_unordered_access_view(struct wined3d_cs *cs, enum wined3d_pipeline pipeline,
@@ -1288,7 +1334,7 @@ void wined3d_cs_emit_set_unordered_access_view(struct wined3d_cs *cs, enum wined
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_sampler(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_sampler(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_sampler *op = data;
 
@@ -1297,6 +1343,8 @@ static void wined3d_cs_exec_set_sampler(struct wined3d_cs *cs, const void *data)
         device_invalidate_state(cs->device, STATE_GRAPHICS_SHADER_RESOURCE_BINDING);
     else
         device_invalidate_state(cs->device, STATE_COMPUTE_SHADER_RESOURCE_BINDING);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, enum wined3d_shader_type type,
@@ -1313,7 +1361,7 @@ void wined3d_cs_emit_set_sampler(struct wined3d_cs *cs, enum wined3d_shader_type
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_shader(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_shader(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_shader *op = data;
 
@@ -1323,6 +1371,8 @@ static void wined3d_cs_exec_set_shader(struct wined3d_cs *cs, const void *data)
         device_invalidate_state(cs->device, STATE_GRAPHICS_SHADER_RESOURCE_BINDING);
     else
         device_invalidate_state(cs->device, STATE_COMPUTE_SHADER_RESOURCE_BINDING);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_shader(struct wined3d_cs *cs, enum wined3d_shader_type type, struct wined3d_shader *shader)
@@ -1337,12 +1387,14 @@ void wined3d_cs_emit_set_shader(struct wined3d_cs *cs, enum wined3d_shader_type
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_rasterizer_state(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_rasterizer_state(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_rasterizer_state *op = data;
 
     cs->state.rasterizer_state = op->state;
     device_invalidate_state(cs->device, STATE_FRONTFACE);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_rasterizer_state(struct wined3d_cs *cs,
@@ -1357,12 +1409,14 @@ void wined3d_cs_emit_set_rasterizer_state(struct wined3d_cs *cs,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_render_state(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_render_state(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_render_state *op = data;
 
     cs->state.render_states[op->state] = op->value;
     device_invalidate_state(cs->device, STATE_RENDER(op->state));
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_render_state(struct wined3d_cs *cs, enum wined3d_render_state state, DWORD value)
@@ -1377,12 +1431,14 @@ void wined3d_cs_emit_set_render_state(struct wined3d_cs *cs, enum wined3d_render
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_texture_state(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_texture_state(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_texture_state *op = data;
 
     cs->state.texture_states[op->stage][op->state] = op->value;
     device_invalidate_state(cs->device, STATE_TEXTURESTAGE(op->stage, op->state));
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_texture_state(struct wined3d_cs *cs, UINT stage,
@@ -1399,12 +1455,14 @@ void wined3d_cs_emit_set_texture_state(struct wined3d_cs *cs, UINT stage,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_sampler_state(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_sampler_state(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_sampler_state *op = data;
 
     cs->state.sampler_states[op->sampler_idx][op->state] = op->value;
     device_invalidate_state(cs->device, STATE_SAMPLER(op->sampler_idx));
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_sampler_state(struct wined3d_cs *cs, UINT sampler_idx,
@@ -1421,13 +1479,15 @@ void wined3d_cs_emit_set_sampler_state(struct wined3d_cs *cs, UINT sampler_idx,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_transform(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_transform(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_transform *op = data;
 
     cs->state.transforms[op->state] = op->matrix;
     if (op->state < WINED3D_TS_WORLD_MATRIX(cs->device->adapter->d3d_info.limits.ffp_vertex_blend_matrices))
         device_invalidate_state(cs->device, STATE_TRANSFORM(op->state));
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_transform(struct wined3d_cs *cs, enum wined3d_transform_state state,
@@ -1443,12 +1503,14 @@ void wined3d_cs_emit_set_transform(struct wined3d_cs *cs, enum wined3d_transform
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_clip_plane(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_clip_plane(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_clip_plane *op = data;
 
     cs->state.clip_planes[op->plane_idx] = op->plane;
     device_invalidate_state(cs->device, STATE_CLIPPLANE(op->plane_idx));
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_clip_plane(struct wined3d_cs *cs, UINT plane_idx, const struct wined3d_vec4 *plane)
@@ -1463,7 +1525,7 @@ void wined3d_cs_emit_set_clip_plane(struct wined3d_cs *cs, UINT plane_idx, const
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_color_key(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_color_key(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_color_key *op = data;
     struct wined3d_texture *texture = op->texture;
@@ -1524,6 +1586,8 @@ static void wined3d_cs_exec_set_color_key(struct wined3d_cs *cs, const void *dat
                 break;
         }
     }
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_color_key(struct wined3d_cs *cs, struct wined3d_texture *texture,
@@ -1546,12 +1610,14 @@ void wined3d_cs_emit_set_color_key(struct wined3d_cs *cs, struct wined3d_texture
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_material(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_material(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_material *op = data;
 
     cs->state.material = op->material;
     device_invalidate_state(cs->device, STATE_MATERIAL);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_material(struct wined3d_cs *cs, const struct wined3d_material *material)
@@ -1565,7 +1631,7 @@ void wined3d_cs_emit_set_material(struct wined3d_cs *cs, const struct wined3d_ma
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_light(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_light(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_light *op = data;
     struct wined3d_light_info *light_info;
@@ -1579,7 +1645,7 @@ static void wined3d_cs_exec_set_light(struct wined3d_cs *cs, const void *data)
         if (!(light_info = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*light_info))))
         {
             ERR("Failed to allocate light info.\n");
-            return;
+            return sizeof(*op);;
         }
 
         hash_idx = LIGHTMAP_HASHFUNC(light_idx);
@@ -1600,6 +1666,8 @@ static void wined3d_cs_exec_set_light(struct wined3d_cs *cs, const void *data)
     light_info->direction = op->light.direction;
     light_info->exponent = op->light.exponent;
     light_info->cutoff = op->light.cutoff;
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_light(struct wined3d_cs *cs, const struct wined3d_light_info *light)
@@ -1613,7 +1681,7 @@ void wined3d_cs_emit_set_light(struct wined3d_cs *cs, const struct wined3d_light
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_set_light_enable(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_set_light_enable(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_set_light_enable *op = data;
     struct wined3d_device *device = cs->device;
@@ -1623,7 +1691,7 @@ static void wined3d_cs_exec_set_light_enable(struct wined3d_cs *cs, const void *
     if (!(light_info = wined3d_state_get_light(&cs->state, op->idx)))
     {
         ERR("Light doesn't exist.\n");
-        return;
+        return sizeof(*op);
     }
 
     prev_idx = light_info->glIndex;
@@ -1633,6 +1701,8 @@ static void wined3d_cs_exec_set_light_enable(struct wined3d_cs *cs, const void *
         device_invalidate_state(device, STATE_LIGHT_TYPE);
         device_invalidate_state(device, STATE_ACTIVELIGHT(op->enable ? light_info->glIndex : prev_idx));
     }
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_set_light_enable(struct wined3d_cs *cs, unsigned int idx, BOOL enable)
@@ -1647,7 +1717,7 @@ void wined3d_cs_emit_set_light_enable(struct wined3d_cs *cs, unsigned int idx, B
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_reset_state(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_reset_state(struct wined3d_cs *cs, const void *data)
 {
     struct wined3d_adapter *adapter = cs->device->adapter;
 
@@ -1655,6 +1725,8 @@ static void wined3d_cs_exec_reset_state(struct wined3d_cs *cs, const void *data)
     memset(&cs->state, 0, sizeof(cs->state));
     state_init(&cs->state, &cs->fb, &adapter->gl_info, &adapter->d3d_info,
             WINED3D_STATE_NO_REF | WINED3D_STATE_INIT_DEFAULT);
+
+    return sizeof(struct wined3d_cs_reset_state);
 }
 
 void wined3d_cs_emit_reset_state(struct wined3d_cs *cs)
@@ -1667,11 +1739,13 @@ void wined3d_cs_emit_reset_state(struct wined3d_cs *cs)
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_callback(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_callback(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_callback *op = data;
 
     op->callback(op->object);
+
+    return sizeof(*op);
 }
 
 static void wined3d_cs_emit_callback(struct wined3d_cs *cs, void (*callback)(void *object), void *object)
@@ -1696,12 +1770,14 @@ void wined3d_cs_init_object(struct wined3d_cs *cs, void (*callback)(void *object
     wined3d_cs_emit_callback(cs, callback, object);
 }
 
-static void wined3d_cs_exec_query_issue(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_query_issue(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_query_issue *op = data;
     struct wined3d_query *query = op->query;
 
     query->query_ops->query_issue(query, op->flags);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_query_issue(struct wined3d_cs *cs, struct wined3d_query *query, DWORD flags)
@@ -1716,12 +1792,14 @@ void wined3d_cs_emit_query_issue(struct wined3d_cs *cs, struct wined3d_query *qu
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_query_poll(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_query_poll(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_query_poll *op = data;
     struct wined3d_query *query = op->query;
 
     *op->ret = query->query_ops->query_poll(query, op->flags);
+
+    return sizeof(*op);
 }
 
 BOOL wined3d_cs_emit_query_poll(struct wined3d_cs *cs, struct wined3d_query *query, DWORD flags)
@@ -1740,13 +1818,15 @@ BOOL wined3d_cs_emit_query_poll(struct wined3d_cs *cs, struct wined3d_query *que
     return ret;
 }
 
-static void wined3d_cs_exec_preload_resource(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_preload_resource(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_preload_resource *op = data;
     struct wined3d_resource *resource = op->resource;
 
     resource->resource_ops->resource_preload(resource);
     wined3d_resource_release(resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_preload_resource(struct wined3d_cs *cs, struct wined3d_resource *resource)
@@ -1762,13 +1842,15 @@ void wined3d_cs_emit_preload_resource(struct wined3d_cs *cs, struct wined3d_reso
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_unload_resource(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_unload_resource(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_unload_resource *op = data;
     struct wined3d_resource *resource = op->resource;
 
     resource->resource_ops->resource_unload(resource);
     wined3d_resource_release(resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_unload_resource(struct wined3d_cs *cs, struct wined3d_resource *resource)
@@ -1784,13 +1866,15 @@ void wined3d_cs_emit_unload_resource(struct wined3d_cs *cs, struct wined3d_resou
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_map(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_map(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_map *op = data;
     struct wined3d_resource *resource = op->resource;
 
     *op->hr = resource->resource_ops->resource_sub_resource_map(resource,
             op->sub_resource_idx, op->map_desc, op->box, op->flags);
+
+    return sizeof(*op);
 }
 
 HRESULT wined3d_cs_map(struct wined3d_cs *cs, struct wined3d_resource *resource, unsigned int sub_resource_idx,
@@ -1813,12 +1897,14 @@ HRESULT wined3d_cs_map(struct wined3d_cs *cs, struct wined3d_resource *resource,
     return hr;
 }
 
-static void wined3d_cs_exec_unmap(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_unmap(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_unmap *op = data;
     struct wined3d_resource *resource = op->resource;
 
     *op->hr = resource->resource_ops->resource_sub_resource_unmap(resource, op->sub_resource_idx);
+
+    return sizeof(*op);
 }
 
 HRESULT wined3d_cs_unmap(struct wined3d_cs *cs, struct wined3d_resource *resource, unsigned int sub_resource_idx)
@@ -1859,10 +1945,11 @@ push_constant_info[] =
     {FIELD_OFFSET(struct wined3d_state, ps_consts_b), sizeof(BOOL),                 WINED3D_SHADER_CONST_PS_B},
 };
 
-static void wined3d_cs_exec_push_constants(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_push_constants(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_push_constants *op = data;
     struct wined3d_device *device = cs->device;
+    size_t size = FIELD_OFFSET(struct wined3d_cs_push_constants, constants[op->count * push_constant_info[op->p].size]);
     unsigned int context_count;
     unsigned int i;
     size_t offset;
@@ -1878,6 +1965,8 @@ static void wined3d_cs_exec_push_constants(struct wined3d_cs *cs, const void *da
     {
         device->contexts[i]->constant_update_mask |= push_constant_info[op->p].mask;
     }
+
+    return size;
 }
 
 void wined3d_cs_emit_push_constants(struct wined3d_cs *cs, enum wined3d_push_constants p,
@@ -1895,7 +1984,7 @@ void wined3d_cs_emit_push_constants(struct wined3d_cs *cs, enum wined3d_push_con
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_blt(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_blt(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_blt *op = data;
 
@@ -1906,6 +1995,8 @@ static void wined3d_cs_exec_blt(struct wined3d_cs *cs, const void *data)
     wined3d_resource_release(&op->dst_surface->container->resource);
     if (op->src_surface && op->src_surface != op->dst_surface)
         wined3d_resource_release(&op->src_surface->container->resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_blt(struct wined3d_cs *cs, struct wined3d_surface *dst_surface,
@@ -1933,7 +2024,7 @@ void wined3d_cs_emit_blt(struct wined3d_cs *cs, struct wined3d_surface *dst_surf
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_clear_rtv(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_clear_rtv(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_clear_rtv *op = data;
     struct wined3d_device *device = cs->device;
@@ -1944,6 +2035,8 @@ static void wined3d_cs_exec_clear_rtv(struct wined3d_cs *cs, const void *data)
         op->blitter->depth_fill(device, op->view, &op->rect, op->flags, op->depth, op->stencil);
 
     wined3d_resource_release(op->view->resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_clear_rtv(struct wined3d_cs *cs, struct wined3d_rendertarget_view *view,
@@ -1968,7 +2061,7 @@ void wined3d_cs_emit_clear_rtv(struct wined3d_cs *cs, struct wined3d_rendertarge
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_update_texture(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_update_texture(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_update_texture *op = data;
     struct wined3d_context *context;
@@ -1979,6 +2072,8 @@ static void wined3d_cs_exec_update_texture(struct wined3d_cs *cs, const void *da
 
     wined3d_resource_release(&op->src->resource);
     wined3d_resource_release(&op->dst->resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_update_texture(struct wined3d_cs *cs, struct wined3d_texture *src,
@@ -1997,7 +2092,7 @@ void wined3d_cs_emit_update_texture(struct wined3d_cs *cs, struct wined3d_textur
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_update_sub_resource(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_update_sub_resource(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_update_sub_resource *op = data;
     struct wined3d_const_bo_address addr;
@@ -2013,7 +2108,7 @@ static void wined3d_cs_exec_update_sub_resource(struct wined3d_cs *cs, const voi
         if (FAILED(hr = wined3d_buffer_upload_data(buffer, op->box, op->data)))
             WARN("Failed to update buffer data, hr %#x.\n", hr);
 
-        return;
+        return sizeof(*op);
     }
 
     texture = wined3d_texture_from_resource(op->resource);
@@ -2042,6 +2137,8 @@ static void wined3d_cs_exec_update_sub_resource(struct wined3d_cs *cs, const voi
 
     wined3d_texture_validate_location(texture, op->sub_resource_idx, WINED3D_LOCATION_TEXTURE_RGB);
     wined3d_texture_invalidate_location(texture, op->sub_resource_idx, ~WINED3D_LOCATION_TEXTURE_RGB);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_update_sub_resource(struct wined3d_cs *cs, struct wined3d_resource *resource,
@@ -2064,11 +2161,13 @@ void wined3d_cs_emit_update_sub_resource(struct wined3d_cs *cs, struct wined3d_r
     cs->ops->submit_and_wait(cs);
 }
 
-static void wined3d_cs_exec_get_dc(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_get_dc(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_get_release_dc *op = data;
 
     *op->hr = wined3d_texture_get_dc_cs(op->texture, op->sub_resource_idx);
+
+    return sizeof(*op);
 }
 
 HRESULT wined3d_cs_emit_get_dc(struct wined3d_cs *cs, struct wined3d_texture *texture,
@@ -2088,11 +2187,13 @@ HRESULT wined3d_cs_emit_get_dc(struct wined3d_cs *cs, struct wined3d_texture *te
     return hr;
 }
 
-static void wined3d_cs_exec_release_dc(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_release_dc(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_get_release_dc *op = data;
 
     *op->hr = wined3d_texture_release_dc_cs(op->texture, op->sub_resource_idx);
+
+    return sizeof(*op);
 }
 
 HRESULT wined3d_cs_emit_release_dc(struct wined3d_cs *cs, struct wined3d_texture *texture,
@@ -2112,11 +2213,13 @@ HRESULT wined3d_cs_emit_release_dc(struct wined3d_cs *cs, struct wined3d_texture
     return hr;
 }
 
-static void wined3d_cs_exec_update_swap_interval(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_update_swap_interval(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_update_swap_interval *op = data;
 
     swapchain_update_swap_interval(op->swapchain);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_update_swap_interval(struct wined3d_cs *cs, struct wined3d_swapchain *swapchain)
@@ -2130,7 +2233,7 @@ void wined3d_cs_emit_update_swap_interval(struct wined3d_cs *cs, struct wined3d_
     cs->ops->submit_and_wait(cs);
 }
 
-static void wined3d_cs_exec_texture_add_dirty_region(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_texture_add_dirty_region(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_texture_add_dirty_region *op = data;
     struct wined3d_texture *texture = op->texture;
@@ -2148,6 +2251,8 @@ static void wined3d_cs_exec_texture_add_dirty_region(struct wined3d_cs *cs, cons
     context_release(context);
 
     wined3d_resource_release(&texture->resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_texture_add_dirty_region(struct wined3d_cs *cs,
@@ -2169,7 +2274,7 @@ void wined3d_cs_emit_texture_add_dirty_region(struct wined3d_cs *cs,
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_buffer_copy(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_buffer_copy(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_buffer_copy *op = data;
     HRESULT hr;
@@ -2179,6 +2284,8 @@ static void wined3d_cs_exec_buffer_copy(struct wined3d_cs *cs, const void *data)
 
     wined3d_resource_release(&op->dst_buffer->resource);
     wined3d_resource_release(&op->src_buffer->resource);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_buffer_copy(struct wined3d_cs *cs, struct wined3d_buffer *dst_buffer,
@@ -2201,7 +2308,7 @@ void wined3d_cs_emit_buffer_copy(struct wined3d_cs *cs, struct wined3d_buffer *d
     cs->ops->submit(cs);
 }
 
-static void wined3d_cs_exec_map_vertex_buffers(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_map_vertex_buffers(struct wined3d_cs *cs, const void *data)
 {
     const struct wined3d_cs_map_vertex_buffers *op = data;
     struct wined3d_state *state = &cs->device->state;
@@ -2248,6 +2355,8 @@ static void wined3d_cs_exec_map_vertex_buffers(struct wined3d_cs *cs, const void
     }
 
     context_release(context);
+
+    return sizeof(*op);
 }
 
 void wined3d_cs_emit_map_vertex_buffers(struct wined3d_cs *cs, UINT src_start_idx,
@@ -2263,7 +2372,7 @@ void wined3d_cs_emit_map_vertex_buffers(struct wined3d_cs *cs, UINT src_start_id
     cs->ops->submit_and_wait(cs);
 }
 
-static void (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
+static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_SYNC                       */ wined3d_cs_exec_sync,
     /* WINED3D_CS_OP_GLFINISH                   */ wined3d_cs_exec_glfinish,
@@ -2369,6 +2478,201 @@ static const struct wined3d_cs_ops wined3d_cs_st_ops =
     wined3d_cs_st_submit,
 };
 
+static void wined3d_cs_list_enqueue(struct wined3d_cs_list *list, struct wined3d_cs_block *block)
+{
+    EnterCriticalSection(&list->lock);
+    list_add_tail(&list->blocks, &block->entry);
+    LeaveCriticalSection(&list->lock);
+    InterlockedIncrement(&list->count);
+}
+
+static struct wined3d_cs_block *wined3d_cs_list_dequeue(struct wined3d_cs_list *list)
+{
+    struct list *head;
+
+    if (!list->count) return NULL;
+    EnterCriticalSection(&list->lock);
+    if (!(head = list_head(&list->blocks)))
+    {
+        LeaveCriticalSection(&list->lock);
+        return NULL;
+    }
+    list_remove(head);
+    LeaveCriticalSection(&list->lock);
+    InterlockedDecrement(&list->count);
+
+    return LIST_ENTRY(head, struct wined3d_cs_block, entry);
+}
+
+static struct wined3d_cs_block *wined3d_cs_dequeue_command(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_block *block;
+
+    /* FIXME: Use an event to wait after a couple of spins. */
+    for (;;)
+    {
+        if ((block = wined3d_cs_list_dequeue(&cs->exec_list)))
+            return block;
+    }
+}
+
+static void wined3d_cs_list_init(struct wined3d_cs_list *list)
+{
+    InitializeCriticalSection(&list->lock);
+    list->lock.DebugInfo->Spare[0] = (DWORD_PTR)(__FILE__ ": wined3d_cs_list_lock");
+
+    list_init(&list->blocks);
+}
+
+static void wined3d_cs_list_cleanup(struct wined3d_cs_list *list)
+{
+    struct wined3d_cs_block *block, *next;
+
+    LIST_FOR_EACH_ENTRY_SAFE(block, next, &list->blocks, struct wined3d_cs_block, entry)
+    {
+        list_remove(&block->entry);
+        HeapFree(GetProcessHeap(), 0, block);
+    }
+
+    list->lock.DebugInfo->Spare[0] = 0;
+    DeleteCriticalSection(&list->lock);
+}
+
+static struct wined3d_cs_block *wined3d_cs_get_block(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_block *block;
+
+    if (!(block = wined3d_cs_list_dequeue(&cs->free_list)))
+    {
+        if (!(block = HeapAlloc(GetProcessHeap(), 0, sizeof(*block))))
+        {
+            ERR("Failed to get new block.\n");
+            return NULL;
+        }
+    }
+
+    block->pos = 0;
+    block->fence = NULL;
+
+    return block;
+}
+
+static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
+{
+    struct wined3d_cs_block *block;
+    void *data;
+
+    if (cs->thread_id == GetCurrentThreadId())
+        return wined3d_cs_st_require_space(cs, size);
+
+    assert(size <= sizeof(block->data));
+
+    block = cs->current_block;
+    if (!block || block->pos + size > sizeof(block->data))
+    {
+        if (block) cs->ops->submit(cs);
+        block = wined3d_cs_get_block(cs);
+        cs->current_block = block;
+    }
+
+    data = &block->data[block->pos];
+    block->pos += size;
+
+    return data;
+}
+
+/* static */ void wined3d_cs_mt_submit(struct wined3d_cs *cs)
+{
+    if (cs->thread_id == GetCurrentThreadId())
+        return wined3d_cs_st_submit(cs);
+
+    wined3d_cs_list_enqueue(&cs->exec_list, cs->current_block);
+    cs->current_block = NULL;
+}
+
+static void wined3d_cs_mt_submit_and_wait(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_block *block;
+    BOOL fence = FALSE;
+
+    if (cs->thread_id == GetCurrentThreadId())
+        return wined3d_cs_st_submit(cs);
+
+    block = cs->current_block;
+    block->fence = &fence;
+    wined3d_cs_list_enqueue(&cs->exec_list, block);
+    cs->current_block = NULL;
+
+    /* A busy wait should be fine, we're not supposed to have to wait very
+     * long. */
+    while (!InterlockedCompareExchange(&fence, TRUE, TRUE));
+}
+
+static const struct wined3d_cs_ops wined3d_cs_mt_ops =
+{
+    wined3d_cs_mt_require_space,
+    wined3d_cs_mt_submit_and_wait,  /* FIXME */
+    wined3d_cs_mt_submit_and_wait,
+};
+
+static void wined3d_cs_mt_emit_stop(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_stop *op;
+
+    assert(cs->thread_id != GetCurrentThreadId());
+    assert(cs->ops == &wined3d_cs_mt_ops);
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_STOP;
+
+    cs->ops->submit(cs);
+}
+
+static inline BOOL wined3d_cs_process_command(struct wined3d_cs *cs, struct wined3d_cs_block *block)
+{
+    UINT pos = 0;
+    BOOL ret = TRUE;
+
+    while (pos < block->pos)
+    {
+        enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)&block->data[pos];
+
+        if (opcode >= WINED3D_CS_OP_STOP)
+        {
+            if (opcode > WINED3D_CS_OP_STOP)
+                ERR("Invalid opcode %#x.\n", opcode);
+            ret = FALSE;
+            break;
+        }
+
+        pos += wined3d_cs_op_handlers[opcode](cs, &block->data[pos]);
+    }
+
+    if (block->fence)
+        InterlockedExchange(block->fence, TRUE);
+
+    wined3d_cs_list_enqueue(&cs->free_list, block);
+    return ret;
+}
+
+static DWORD WINAPI wined3d_cs_run(void *thread_param)
+{
+    struct wined3d_cs *cs = thread_param;
+
+    TRACE("Started.\n");
+
+    for (;;)
+    {
+        struct wined3d_cs_block *block;
+        block = wined3d_cs_dequeue_command(cs);
+        if (!wined3d_cs_process_command(cs, block))
+            break;
+    }
+
+    TRACE("Stopped.\n");
+    return 0;
+}
+
 struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device)
 {
     const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
@@ -2398,12 +2702,41 @@ struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device)
         return NULL;
     }
 
+    if (wined3d_settings.cs_multithreaded)
+    {
+        cs->ops = &wined3d_cs_mt_ops;
+
+        wined3d_cs_list_init(&cs->free_list);
+        wined3d_cs_list_init(&cs->exec_list);
+
+        if (!(cs->thread = CreateThread(NULL, 0, wined3d_cs_run, cs, 0, &cs->thread_id)))
+        {
+            ERR("Failed to create wined3d command stream thread.\n");
+            state_cleanup(&cs->state);
+            HeapFree(GetProcessHeap(), 0, cs->fb.render_targets);
+            HeapFree(GetProcessHeap(), 0, cs->data);
+            HeapFree(GetProcessHeap(), 0, cs);
+            return NULL;
+        }
+    }
+
     return cs;
 }
 
 void wined3d_cs_destroy(struct wined3d_cs *cs)
 {
     state_cleanup(&cs->state);
+
+    if (wined3d_settings.cs_multithreaded)
+    {
+        wined3d_cs_mt_emit_stop(cs);
+        WaitForSingleObject(cs->thread, INFINITE);
+        CloseHandle(cs->thread);
+
+        wined3d_cs_list_cleanup(&cs->exec_list);
+        wined3d_cs_list_cleanup(&cs->free_list);
+    }
+
     HeapFree(GetProcessHeap(), 0, cs->fb.render_targets);
     HeapFree(GetProcessHeap(), 0, cs->data);
     HeapFree(GetProcessHeap(), 0, cs);
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 7df7ba41888..2c691796426 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -1289,7 +1289,7 @@ UINT CDECL wined3d_device_get_available_texture_mem(const struct wined3d_device
 
     /* We can not acquire the context unless there is a swapchain. */
     if (device->swapchains && gl_info->supported[NVX_GPU_MEMORY_INFO] &&
-            !wined3d_settings.emulated_textureram)
+            !wined3d_settings.emulated_textureram && !wined3d_settings.cs_multithreaded)
     {
         GLint vram_free_kb;
         UINT64 vram_free;
diff --git a/dlls/wined3d/wined3d_main.c b/dlls/wined3d/wined3d_main.c
index 1ce5937f173..4ef747ca89a 100644
--- a/dlls/wined3d/wined3d_main.c
+++ b/dlls/wined3d/wined3d_main.c
@@ -90,6 +90,7 @@ struct wined3d_settings wined3d_settings =
     ~0U,            /* No PS shader model limit by default. */
     ~0u,            /* No CS shader model limit by default. */
     FALSE,          /* 3D support enabled by default. */
+    TRUE,           /* Multithreaded CS by default. */
 };
 
 struct wined3d * CDECL wined3d_create(DWORD flags)
@@ -327,8 +328,17 @@ static BOOL wined3d_dll_init(HINSTANCE hInstDLL)
             TRACE("Disabling 3D support.\n");
             wined3d_settings.no_3d = TRUE;
         }
+        if (!get_config_key(hkey, appkey, "CSMT", buffer, size)
+                && !strcmp(buffer,"disabled"))
+        {
+            TRACE("Disabling multithreaded command stream.\n");
+            wined3d_settings.cs_multithreaded = FALSE;
+        }
     }
 
+    FIXME_(winediag)("Experimental wined3d CSMT feature is currently %s.\n",
+        wined3d_settings.cs_multithreaded ? "enabled" : "disabled");
+
     if (appkey) RegCloseKey( appkey );
     if (hkey) RegCloseKey( hkey );
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 0c46eba6200..3e14ae56508 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -307,6 +307,7 @@ struct wined3d_settings
     unsigned int max_sm_ps;
     unsigned int max_sm_cs;
     BOOL no_3d;
+    BOOL cs_multithreaded;
 };
 
 extern struct wined3d_settings wined3d_settings DECLSPEC_HIDDEN;
@@ -2787,11 +2788,6 @@ static inline void wined3d_resource_release(struct wined3d_resource *resource)
     InterlockedDecrement(&resource->access_count);
 }
 
-static inline void wined3d_resource_wait_idle(struct wined3d_resource *resource)
-{
-    while (InterlockedCompareExchange(&resource->access_count, 0, 0));
-}
-
 void resource_cleanup(struct wined3d_resource *resource) DECLSPEC_HIDDEN;
 HRESULT resource_init(struct wined3d_resource *resource, struct wined3d_device *device,
         enum wined3d_resource_type type, const struct wined3d_format *format,
@@ -3212,6 +3208,21 @@ enum wined3d_push_constants
     WINED3D_PUSH_CONSTANTS_PS_B,
 };
 
+struct wined3d_cs_list
+{
+    CRITICAL_SECTION lock;
+    struct list blocks;
+    LONG count;
+};
+
+struct wined3d_cs_block
+{
+    struct list entry;
+    UINT pos;
+    BOOL *fence;
+    BYTE data[0x4000]; /* FIXME? The size is somewhat arbitrary. */
+};
+
 struct wined3d_cs_ops
 {
     void *(*require_space)(struct wined3d_cs *cs, size_t size);
@@ -3229,9 +3240,21 @@ struct wined3d_cs
     size_t data_size, start, end;
     void *data;
 
+    HANDLE thread;
+    DWORD thread_id;
+    struct wined3d_cs_block *current_block;
+    struct wined3d_cs_list free_list;
+    struct wined3d_cs_list exec_list;
+
     LONG pending_presents;
 };
 
+static inline void wined3d_resource_wait_idle(struct wined3d_resource *resource)
+{
+    if (resource->device->cs->thread_id == GetCurrentThreadId()) return;
+    while (InterlockedCompareExchange(&resource->access_count, 0, 0));
+}
+
 struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device) DECLSPEC_HIDDEN;
 void wined3d_cs_destroy(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 void wined3d_cs_destroy_object(struct wined3d_cs *cs,
-- 
2.11.0


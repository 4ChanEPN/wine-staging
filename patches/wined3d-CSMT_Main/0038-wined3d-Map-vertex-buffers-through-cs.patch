From 0c368a9fa4e1417a0f5114769fa0b9f44d35ebde Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Tue, 7 Feb 2017 22:37:58 +0100
Subject: wined3d: Map vertex buffers through cs.

---
 dlls/wined3d/cs.c              | 73 ++++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/device.c          | 45 +-------------------------
 dlls/wined3d/wined3d_private.h |  2 ++
 3 files changed, 76 insertions(+), 44 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 42779efe69d..42ce9bafb80 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -94,6 +94,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_CREATE_BUFFER_VIEW,
     WINED3D_CS_OP_CREATE_TEXTURE_VIEW,
     WINED3D_CS_OP_DELETE_GL_CONTEXTS,
+    WINED3D_CS_OP_MAP_vertex_buffers,
     WINED3D_CS_OP_STOP,
 };
 
@@ -528,6 +529,13 @@ struct wined3d_cs_delete_gl_contexts
     struct wined3d_swapchain *swapchain;
 };
 
+struct wined3d_cs_map_vertex_buffers
+{
+    enum wined3d_cs_op opcode;
+    UINT src_start_idx;
+    struct wined3d_stream_info *stream_info;
+};
+
 static inline BOOL wined3d_cs_process_block(struct wined3d_cs *cs, struct wined3d_cs_block *block);
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs);
 
@@ -2655,6 +2663,70 @@ void wined3d_cs_emit_delete_opengl_contexts(struct wined3d_cs *cs, struct wined3
     cs->ops->submit_and_wait(cs);
 }
 
+static UINT wined3d_cs_exec_map_vertex_buffers(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_map_vertex_buffers *op = data;
+    struct wined3d_state *state = &cs->device->state;
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_context *context;
+    struct wined3d_shader *vs;
+    unsigned int i;
+    WORD map;
+
+    /* Need any context to write to the vbo. */
+    context = context_acquire(cs->device, NULL);
+    gl_info = context->gl_info;
+
+    vs = state->shader[WINED3D_SHADER_TYPE_VERTEX];
+    state->shader[WINED3D_SHADER_TYPE_VERTEX] = NULL;
+    context_stream_info_from_declaration(context, state, op->stream_info);
+    state->shader[WINED3D_SHADER_TYPE_VERTEX] = vs;
+
+    /* We can't convert FROM a VBO, and vertex buffers used to source into
+     * process_vertices() are unlikely to ever be used for drawing. Release
+     * VBOs in those buffers and fix up the stream_info structure.
+     *
+     * Also apply the start index. */
+    for (i = 0, map = op->stream_info->use_map; map; map >>= 1, ++i)
+    {
+        struct wined3d_stream_info_element *e;
+        struct wined3d_buffer *buffer;
+
+        if (!(map & 1))
+            continue;
+
+        e = &op->stream_info->elements[i];
+        buffer = state->streams[e->stream_idx].buffer;
+        e->data.buffer_object = 0;
+        e->data.addr += (ULONG_PTR)wined3d_buffer_load_sysmem(buffer, context);
+        if (buffer->buffer_object)
+        {
+            GL_EXTCALL(glDeleteBuffers(1, &buffer->buffer_object));
+            buffer->buffer_object = 0;
+            wined3d_buffer_invalidate_location(buffer, WINED3D_LOCATION_BUFFER);
+        }
+        if (e->data.addr)
+            e->data.addr += e->stride * op->src_start_idx;
+    }
+
+    context_release(context);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_map_vertex_buffers(struct wined3d_cs *cs, UINT src_start_idx,
+        struct wined3d_stream_info *stream_info)
+{
+    struct wined3d_cs_map_vertex_buffers *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_MAP_vertex_buffers;
+    op->src_start_idx = src_start_idx;
+    op->stream_info = stream_info;
+
+    cs->ops->submit_and_wait(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                      */ wined3d_cs_exec_fence,
@@ -2714,6 +2786,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_CREATE_BUFFER_VIEW         */ wined3d_cs_exec_create_buffer_view,
     /* WINED3D_CS_OP_CREATE_TEXTURE_VIEW        */ wined3d_cs_exec_create_texture_view,
     /* WINED3D_CS_OP_DELETE_GL_CONTEXTS         */ wined3d_cs_exec_delete_gl_contexts,
+    /* WINED3D_CS_OP_MAP_vertex_buffers         */ wined3d_cs_exec_map_vertex_buffers,
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index ccfaa7f19e6..369fc47c097 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -2851,7 +2851,6 @@ void CDECL wined3d_device_set_unordered_access_view(struct wined3d_device *devic
     wined3d_device_set_pipeline_unordered_access_view(device, WINED3D_PIPELINE_GRAPHICS, idx, uav);
 }
 
-/* Context activation is done by the caller. */
 #define copy_and_next(dest, src, size) memcpy(dest, src, size); dest += (size)
 static HRESULT process_vertices_strided(const struct wined3d_device *device, DWORD dwDestIndex, DWORD dwCount,
         const struct wined3d_stream_info *stream_info, struct wined3d_buffer *dest, DWORD flags,
@@ -3127,14 +3126,8 @@ HRESULT CDECL wined3d_device_process_vertices(struct wined3d_device *device,
         UINT src_start_idx, UINT dst_idx, UINT vertex_count, struct wined3d_buffer *dst_buffer,
         const struct wined3d_vertex_declaration *declaration, DWORD flags, DWORD dst_fvf)
 {
-    struct wined3d_state *state = &device->state;
     struct wined3d_stream_info stream_info;
-    const struct wined3d_gl_info *gl_info;
-    struct wined3d_context *context;
-    struct wined3d_shader *vs;
-    unsigned int i;
     HRESULT hr;
-    WORD map;
 
     TRACE("device %p, src_start_idx %u, dst_idx %u, vertex_count %u, "
             "dst_buffer %p, declaration %p, flags %#x, dst_fvf %#x.\n",
@@ -3144,47 +3137,11 @@ HRESULT CDECL wined3d_device_process_vertices(struct wined3d_device *device,
     if (declaration)
         FIXME("Output vertex declaration not implemented yet.\n");
 
-    /* Need any context to write to the vbo. */
-    context = context_acquire(device, NULL);
-    gl_info = context->gl_info;
-
-    vs = state->shader[WINED3D_SHADER_TYPE_VERTEX];
-    state->shader[WINED3D_SHADER_TYPE_VERTEX] = NULL;
-    context_stream_info_from_declaration(context, state, &stream_info);
-    state->shader[WINED3D_SHADER_TYPE_VERTEX] = vs;
-
-    /* We can't convert FROM a VBO, and vertex buffers used to source into
-     * process_vertices() are unlikely to ever be used for drawing. Release
-     * VBOs in those buffers and fix up the stream_info structure.
-     *
-     * Also apply the start index. */
-    for (i = 0, map = stream_info.use_map; map; map >>= 1, ++i)
-    {
-        struct wined3d_stream_info_element *e;
-        struct wined3d_buffer *buffer;
-
-        if (!(map & 1))
-            continue;
-
-        e = &stream_info.elements[i];
-        buffer = state->streams[e->stream_idx].buffer;
-        e->data.buffer_object = 0;
-        e->data.addr += (ULONG_PTR)wined3d_buffer_load_sysmem(buffer, context);
-        if (buffer->buffer_object)
-        {
-            GL_EXTCALL(glDeleteBuffers(1, &buffer->buffer_object));
-            buffer->buffer_object = 0;
-            wined3d_buffer_invalidate_location(buffer, WINED3D_LOCATION_BUFFER);
-        }
-        if (e->data.addr)
-            e->data.addr += e->stride * src_start_idx;
-    }
+    wined3d_cs_emit_map_vertex_buffers(device->cs, src_start_idx, &stream_info);
 
     hr = process_vertices_strided(device, dst_idx, vertex_count,
             &stream_info, dst_buffer, flags, dst_fvf);
 
-    context_release(context);
-
     return hr;
 }
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index c1200b127c5..a6a3eca0da2 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3359,6 +3359,8 @@ HRESULT wined3d_cs_map(struct wined3d_cs *cs, struct wined3d_resource *resource,
         struct wined3d_map_desc *map_desc, const struct wined3d_box *box, unsigned int flags) DECLSPEC_HIDDEN;
 HRESULT wined3d_cs_unmap(struct wined3d_cs *cs, struct wined3d_resource *resource,
         unsigned int sub_resource_idx) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_map_vertex_buffers(struct wined3d_cs *cs, UINT src_start_idx,
+        struct wined3d_stream_info *stream_info) DECLSPEC_HIDDEN;
 
 /* TODO: Add tests and support for FLOAT16_4 POSITIONT, D3DCOLOR position, other
  * fixed function semantics as D3DCOLOR or FLOAT16 */
-- 
2.11.0


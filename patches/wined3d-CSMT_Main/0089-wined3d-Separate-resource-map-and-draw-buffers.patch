From 2d336621af183127636cfcc5ed502490046b2068 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 30 Aug 2013 17:06:29 +0200
Subject: wined3d: Separate resource map and draw buffers

---
 dlls/wined3d/device.c          |  2 +-
 dlls/wined3d/surface.c         | 22 +++++++++++-----------
 dlls/wined3d/texture.c         | 26 ++++++++++++++++++++------
 dlls/wined3d/wined3d_private.h |  4 ++--
 4 files changed, 34 insertions(+), 20 deletions(-)

diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index afc94b9..25a6ee5 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -3623,7 +3623,7 @@ static void wined3d_device_update_texture_3d(struct wined3d_context *context,
     for (i = 0; i < level_count; ++i)
     {
         wined3d_texture_get_memory(src_texture, src_level + i, &data,
-                src_texture->resource.map_binding);
+                src_texture->resource.map_binding, FALSE);
         wined3d_texture_get_pitch(src_texture, src_level + i, &row_pitch, &slice_pitch);
 
         wined3d_texture_upload_data(dst_texture, i, context, NULL, wined3d_const_bo_address(&data),
diff --git a/dlls/wined3d/surface.c b/dlls/wined3d/surface.c
index 344299b..87d4f93 100644
--- a/dlls/wined3d/surface.c
+++ b/dlls/wined3d/surface.c
@@ -322,7 +322,7 @@ void wined3d_surface_destroy_dc(struct wined3d_surface *surface)
         gl_info = context->gl_info;
     }
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &data, texture->resource.map_binding);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &data, texture->resource.map_binding, FALSE);
     wined3d_texture_unmap_bo_address(&data, gl_info, GL_PIXEL_UNPACK_BUFFER);
 
     if (context)
@@ -358,7 +358,7 @@ HRESULT wined3d_surface_create_dc(struct wined3d_surface *surface)
         gl_info = context->gl_info;
     }
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &data, texture->resource.map_binding);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &data, texture->resource.map_binding, FALSE);
     desc.pMemory = wined3d_texture_map_bo_address(&data, texture->sub_resources[sub_resource_idx].size,
             gl_info, GL_PIXEL_UNPACK_BUFFER, 0);
 
@@ -804,7 +804,7 @@ static void surface_download_data(struct wined3d_surface *surface, const struct
         }
     }
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &data, dst_location);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &data, dst_location, FALSE);
 
     if (texture->flags & WINED3D_TEXTURE_COND_NP2_EMULATED)
     {
@@ -1208,7 +1208,7 @@ HRESULT surface_upload_from_surface(struct wined3d_surface *dst_surface, const P
     wined3d_texture_bind_and_dirtify(dst_texture, context, FALSE);
 
     wined3d_texture_get_memory(src_texture, src_sub_resource_idx, &data,
-            src_texture->sub_resources[src_sub_resource_idx].locations);
+            src_texture->sub_resources[src_sub_resource_idx].locations, FALSE);
     wined3d_texture_get_pitch(src_texture, src_surface->texture_level, &src_row_pitch, &src_slice_pitch);
 
     wined3d_surface_upload_data(dst_surface, gl_info, src_format, src_rect,
@@ -1756,7 +1756,7 @@ static struct wined3d_texture *surface_convert_format(struct wined3d_texture *sr
     wined3d_texture_load_location(src_texture, sub_resource_idx, context,
             src_texture->resource.map_binding);
     wined3d_texture_get_memory(src_texture, sub_resource_idx, &src_bo_addr,
-            src_texture->resource.map_binding);
+            src_texture->resource.map_binding, FALSE);
     src_data = wined3d_texture_map_bo_address(&src_bo_addr,
             src_texture->sub_resources[sub_resource_idx].size,
             context->gl_info, GL_PIXEL_UNPACK_BUFFER, WINED3D_MAP_READONLY);
@@ -1769,7 +1769,7 @@ static struct wined3d_texture *surface_convert_format(struct wined3d_texture *sr
 
         wined3d_texture_prepare_location(dst_texture, 0, context, dst_texture->resource.map_binding);
         wined3d_texture_get_memory(dst_texture, 0, &dst_bo_addr,
-                dst_texture->resource.map_binding);
+                dst_texture->resource.map_binding, FALSE);
         dst_data = wined3d_texture_map_bo_address(&dst_bo_addr,
                 dst_texture->sub_resources[0].size,
                 context->gl_info, GL_PIXEL_UNPACK_BUFFER, 0);
@@ -1898,7 +1898,7 @@ static void read_from_framebuffer(struct wined3d_surface *surface,
     BOOL srcIsUpsideDown;
     struct wined3d_bo_address data;
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &data, dst_location);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &data, dst_location, FALSE);
 
     restore_rt = context_get_rt_surface(old_ctx);
     if (restore_rt != surface)
@@ -3083,7 +3083,7 @@ static HRESULT surface_load_texture(struct wined3d_surface *surface,
         wined3d_texture_set_map_binding(texture, WINED3D_LOCATION_SYSMEM);
     }
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &data, sub_resource->locations);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &data, sub_resource->locations, FALSE);
     if (format.convert)
     {
         /* This code is entered for texture formats which need a fixup. */
@@ -3576,7 +3576,7 @@ static HRESULT surface_cpu_blt(struct wined3d_texture *dst_texture, unsigned int
         same_sub_resource = TRUE;
 
         wined3d_texture_get_memory(dst_texture, dst_sub_resource_idx, &dst_bo_addr,
-                dst_texture->resource.map_binding);
+                dst_texture->resource.map_binding, FALSE);
         dst_map.data = wined3d_texture_map_bo_address(&dst_bo_addr,
                 dst_texture->sub_resources[dst_sub_resource_idx].size,
                 context->gl_info, GL_PIXEL_UNPACK_BUFFER, 0);
@@ -3612,7 +3612,7 @@ static HRESULT surface_cpu_blt(struct wined3d_texture *dst_texture, unsigned int
             wined3d_texture_get_pitch(src_texture, src_sub_resource_idx % src_texture->level_count,
                     &src_map.row_pitch, &src_map.slice_pitch);
             wined3d_texture_get_memory(src_texture, src_sub_resource_idx, &src_bo_addr,
-                    src_texture->resource.map_binding);
+                    src_texture->resource.map_binding, FALSE);
             src_map.data = wined3d_texture_map_bo_address(&src_bo_addr,
                     src_texture->sub_resources[src_sub_resource_idx].size,
                     context->gl_info, GL_PIXEL_UNPACK_BUFFER, 0);
@@ -3627,7 +3627,7 @@ static HRESULT surface_cpu_blt(struct wined3d_texture *dst_texture, unsigned int
         }
 
         wined3d_texture_get_memory(dst_texture, dst_sub_resource_idx, &dst_bo_addr,
-                dst_texture->resource.map_binding);
+                dst_texture->resource.map_binding, FALSE);
         dst_map.data = wined3d_texture_map_bo_address(&dst_bo_addr,
                 dst_texture->sub_resources[dst_sub_resource_idx].size,
                 context->gl_info, GL_PIXEL_UNPACK_BUFFER, 0);
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index 6160b6b..827dfd4 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -168,9 +168,9 @@ static BOOL wined3d_texture_copy_sysmem_location(struct wined3d_texture *texture
 
     wined3d_texture_prepare_location(texture, sub_resource_idx, context, location);
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &dst, location);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &dst, location, FALSE);
     wined3d_texture_get_memory(texture, sub_resource_idx, &src,
-            texture->sub_resources[sub_resource_idx].locations);
+            texture->sub_resources[sub_resource_idx].locations, FALSE);
 
     if (dst.buffer_object)
     {
@@ -331,7 +331,7 @@ void wined3d_texture_unmap_bo_address(const struct wined3d_bo_address *data,
 }
 
 void wined3d_texture_get_memory(struct wined3d_texture *texture, unsigned int sub_resource_idx,
-        struct wined3d_bo_address *data, DWORD locations)
+        struct wined3d_bo_address *data, DWORD locations, BOOL map)
 {
     struct wined3d_texture_sub_resource *sub_resource;
 
@@ -342,7 +342,10 @@ void wined3d_texture_get_memory(struct wined3d_texture *texture, unsigned int su
     if (locations & WINED3D_LOCATION_BUFFER)
     {
         data->addr = NULL;
-        data->buffer_object = sub_resource->buffer->name;
+        if (map)
+            data->buffer_object = sub_resource->map_buffer->name;
+        else
+            data->buffer_object = sub_resource->buffer->name;
         return;
     }
     if (locations & WINED3D_LOCATION_USER_MEMORY)
@@ -446,8 +449,13 @@ static void wined3d_texture_remove_buffer_object(struct wined3d_texture *texture
     struct wined3d_gl_bo *buffer = texture->sub_resources[sub_resource_idx].buffer;
     GLuint name = buffer->name;
 
+    if (buffer != texture->sub_resources[sub_resource_idx].map_buffer)
+        ERR("Buffer is %p, map buffer is %p.\n", buffer,
+                texture->sub_resources[sub_resource_idx].map_buffer);
+
     wined3d_device_release_bo(texture->resource.device, buffer, context);
     texture->sub_resources[sub_resource_idx].buffer = NULL;
+    texture->sub_resources[sub_resource_idx].map_buffer = NULL;
     wined3d_texture_invalidate_location(texture, sub_resource_idx, WINED3D_LOCATION_BUFFER);
 
     TRACE("Deleted buffer object %u for texture %p, sub-resource %u.\n",
@@ -635,6 +643,10 @@ static void wined3d_texture_cleanup(struct wined3d_texture *texture)
 
     for (i = 0; i < sub_count; ++i)
     {
+        if (texture->sub_resources[i].buffer != texture->sub_resources[i].map_buffer)
+            ERR("Buffer is %p, map buffer is %p.\n", texture->sub_resources[i].buffer,
+                    texture->sub_resources[i].map_buffer);
+
         if (!(buffer = texture->sub_resources[i].buffer))
             continue;
 
@@ -647,6 +659,7 @@ static void wined3d_texture_cleanup(struct wined3d_texture *texture)
 
         wined3d_device_release_bo(device, buffer, context);
         texture->sub_resources[i].buffer = NULL;
+        texture->sub_resources[i].map_buffer = NULL;
     }
     if (context)
         context_release(context);
@@ -1336,6 +1349,7 @@ static void wined3d_texture_prepare_buffer_object(struct wined3d_texture *textur
 
     sub_resource->buffer = wined3d_device_get_bo(texture->resource.device,
             sub_resource->size, GL_STREAM_DRAW, GL_PIXEL_UNPACK_BUFFER, context);
+    sub_resource->map_buffer = sub_resource->buffer;
 
     TRACE("Created buffer object %u for texture %p, sub-resource %u.\n",
             sub_resource->buffer->name, texture, sub_resource_idx);
@@ -2158,7 +2172,7 @@ void *wined3d_texture_map_internal(struct wined3d_texture *texture, unsigned int
     if (!(flags & (WINED3D_MAP_NO_DIRTY_UPDATE | WINED3D_MAP_READONLY)))
         sub_resource->unmap_dirtify = TRUE;
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &bo_data, texture->resource.map_binding);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &bo_data, texture->resource.map_binding, TRUE);
     data = wined3d_texture_map_bo_address(&bo_data, sub_resource->size,
             context->gl_info, GL_PIXEL_UNPACK_BUFFER, flags);
 
@@ -2292,7 +2306,7 @@ void wined3d_texture_unmap_internal(struct wined3d_texture *texture, unsigned in
     if (texture->resource.device->d3d_initialized)
         context = context_acquire(texture->resource.device, NULL);
 
-    wined3d_texture_get_memory(texture, sub_resource_idx, &data, texture->resource.map_binding);
+    wined3d_texture_get_memory(texture, sub_resource_idx, &data, texture->resource.map_binding, TRUE);
     wined3d_texture_unmap_bo_address(&data, context->gl_info, GL_PIXEL_UNPACK_BUFFER);
 
     if (context)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 4f8abb8..77dd83e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2835,7 +2835,7 @@ struct wined3d_texture
 
         unsigned int map_count;
         DWORD locations;
-        struct wined3d_gl_bo *buffer;
+        struct wined3d_gl_bo *buffer, *map_buffer;
         BOOL unmap_dirtify;
     } sub_resources[1];
 };
@@ -2893,7 +2893,7 @@ BOOL wined3d_texture_check_block_align(const struct wined3d_texture *texture,
         unsigned int level, const struct wined3d_box *box) DECLSPEC_HIDDEN;
 GLenum wined3d_texture_get_gl_buffer(const struct wined3d_texture *texture) DECLSPEC_HIDDEN;
 void wined3d_texture_get_memory(struct wined3d_texture *texture, unsigned int sub_resource_idx,
-        struct wined3d_bo_address *data, DWORD locations) DECLSPEC_HIDDEN;
+        struct wined3d_bo_address *data, DWORD locations, BOOL map) DECLSPEC_HIDDEN;
 struct wined3d_texture_sub_resource *wined3d_texture_get_sub_resource(struct wined3d_texture *texture,
         unsigned int sub_resource_idx) DECLSPEC_HIDDEN;
 void wined3d_texture_invalidate_location(struct wined3d_texture *texture,
-- 
2.9.0


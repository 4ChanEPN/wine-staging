From c3cc04eaa9c6274fdc189d39d995e2cfccab489a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Thu, 10 Oct 2013 16:29:42 +0200
Subject: wined3d: Create dummy textures through the CS.

Hacky version. Just good enough to see if the double context during init is what makes fglrx
crash.
---
 dlls/d3d11/tests/d3d11.c       | 34 +++++++++++++++++-----------------
 dlls/wined3d/cs.c              | 28 ++++++++++++++++++++++++++++
 dlls/wined3d/device.c          | 10 ++++------
 dlls/wined3d/wined3d_private.h |  2 ++
 4 files changed, 51 insertions(+), 23 deletions(-)

diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index 507496cace1..ab3fa83a103 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -13278,12 +13278,12 @@ static void test_cs_uav_store(void)
     ID3D11DeviceContext_CSSetShader(context, cs, NULL, 0);
 
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(texture, 1.0f, 2);
+    check_texture_float(texture, 1.0f, 2);
 
     input.x = 0.5f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(texture, 0.5f, 2);
+    check_texture_float(texture, 0.5f, 2);
 
     ID3D11ComputeShader_Release(cs);
 
@@ -13291,19 +13291,19 @@ static void test_cs_uav_store(void)
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_CSSetShader(context, NULL, NULL, 0);
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(texture, 0.5f, 2);
+    check_texture_float(texture, 0.5f, 2);
 
     hr = ID3D11Device_CreateComputeShader(device, cs_1_group_code, sizeof(cs_1_group_code), NULL, &cs);
     ok(SUCCEEDED(hr), "Failed to create compute shader, hr %#x.\n", hr);
     ID3D11DeviceContext_CSSetShader(context, cs, NULL, 0);
 
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(texture, 2.0f, 2);
+    check_texture_float(texture, 2.0f, 2);
 
     input.x = 4.0f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(texture, 4.0f, 2);
+    check_texture_float(texture, 4.0f, 2);
 
     ID3D11ComputeShader_Release(cs);
 
@@ -13314,17 +13314,17 @@ static void test_cs_uav_store(void)
     input.x = 1.0f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, texture_desc.Width, texture_desc.Height, 1);
-    todo_wine check_texture_float(texture, 1.0f, 2);
+    check_texture_float(texture, 1.0f, 2);
 
     input.x = 0.5f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 16, 32, 1);
     SetRect(&rect, 0, 0, 16, 32);
-    todo_wine check_texture_sub_resource_float(texture, 0, &rect, 0.5f, 2);
+    check_texture_sub_resource_float(texture, 0, &rect, 0.5f, 2);
     SetRect(&rect, 0, 32, texture_desc.Width, texture_desc.Height);
-    todo_wine check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
+    check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
     SetRect(&rect, 16, 0, texture_desc.Width, texture_desc.Height);
-    todo_wine check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
+    check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
 
     ID3D11ComputeShader_Release(cs);
 
@@ -13336,16 +13336,16 @@ static void test_cs_uav_store(void)
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 15, 15, 1);
     SetRect(&rect, 0, 0, 60, 60);
-    todo_wine check_texture_sub_resource_float(texture, 0, &rect, 0.6f, 2);
+    check_texture_sub_resource_float(texture, 0, &rect, 0.6f, 2);
     SetRect(&rect, 0, 60, texture_desc.Width, texture_desc.Height);
-    todo_wine check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
+    check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
     SetRect(&rect, 60, 0, texture_desc.Width, texture_desc.Height);
-    todo_wine check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
+    check_texture_sub_resource_float(texture, 0, &rect, 1.0f, 2);
 
     input.x = 0.7f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 16, 16, 1);
-    todo_wine check_texture_float(texture, 0.7f, 2);
+    check_texture_float(texture, 0.7f, 2);
 
     ID3D11ComputeShader_Release(cs);
 
@@ -13356,12 +13356,12 @@ static void test_cs_uav_store(void)
     input.x = 0.3f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(texture, 0.3f, 2);
+    check_texture_float(texture, 0.3f, 2);
 
     input.x = 0.1f;
     ID3D11DeviceContext_UpdateSubresource(context, (ID3D11Resource *)cb, 0, NULL, &input, 0, 0);
     ID3D11DeviceContext_Dispatch(context, 2, 2, 2);
-    todo_wine check_texture_float(texture, 0.1f, 2);
+    check_texture_float(texture, 0.1f, 2);
 
     ID3D11ComputeShader_Release(cs);
 
@@ -13514,10 +13514,10 @@ static void test_ps_cs_uav_binding(void)
     ID3D11DeviceContext_PSSetShader(context, ps, NULL, 0);
 
     ID3D11DeviceContext_Dispatch(context, 1, 1, 1);
-    todo_wine check_texture_float(cs_texture, 1.0f, 2);
+    check_texture_float(cs_texture, 1.0f, 2);
     check_texture_float(ps_texture, 0.0f, 2);
     draw_quad(&test_context);
-    todo_wine check_texture_float(cs_texture, 1.0f, 2);
+    check_texture_float(cs_texture, 1.0f, 2);
     check_texture_float(ps_texture, 1.0f, 2);
 
     input.x = 0.5f;
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 7f5339599d8..bf6adf4be71 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -85,6 +85,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_UPDATE_SUB_RESOURCE,
     WINED3D_CS_OP_GET_DC,
     WINED3D_CS_OP_RELEASE_DC,
+    WINED3D_CS_OP_CREATE_DUMMY_TEXTURES,
     WINED3D_CS_OP_STOP,
 };
 
@@ -452,6 +453,11 @@ struct wined3d_cs_get_release_dc
     HRESULT *hr;
 };
 
+struct wined3d_cs_create_dummy_textures
+{
+    enum wined3d_cs_op opcode;
+};
+
 static inline BOOL wined3d_cs_process_block(struct wined3d_cs *cs, struct wined3d_cs_block *block);
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs);
 
@@ -2331,6 +2337,27 @@ HRESULT wined3d_cs_emit_release_dc(struct wined3d_cs *cs, struct wined3d_texture
     return hr;
 }
 
+static UINT wined3d_cs_exec_create_dummy_textures(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_create_dummy_textures *op = data;
+    struct wined3d_context *context = context_acquire(cs->device, NULL, 0);
+
+    device_create_dummy_textures(cs->device, context);
+
+    context_release(context);
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_create_dummy_textures(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_create_dummy_textures *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_CREATE_DUMMY_TEXTURES;
+
+    cs->ops->submit_and_wait(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_FENCE                      */ wined3d_cs_exec_fence,
@@ -2381,6 +2408,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_UPDATE_SUB_RESOURCE        */ wined3d_cs_exec_update_sub_resource,
     /* WINED3D_CS_OP_GET_DC                     */ wined3d_cs_exec_get_dc,
     /* WINED3D_CS_OP_RELEASE_DC                 */ wined3d_cs_exec_release_dc,
+    /* WINED3D_CS_OP_CREATE_DUMMY_TEXTURES      */ wined3d_cs_exec_create_dummy_textures,
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 9c69d04c3f0..008be8ae010 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -610,7 +610,7 @@ out:
 }
 
 /* Context activation is done by the caller. */
-static void create_dummy_textures(struct wined3d_device *device, struct wined3d_context *context)
+void device_create_dummy_textures(struct wined3d_device *device, struct wined3d_context *context)
 {
     const struct wined3d_d3d_info *d3d_info = &device->adapter->d3d_info;
     const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
@@ -1029,7 +1029,7 @@ static HRESULT create_primary_opengl_context(struct wined3d_device *device, stru
 
     target = swapchain->back_buffers ? swapchain->back_buffers[0] : swapchain->front_buffer;
     context = context_acquire(device, target, 0);
-    create_dummy_textures(device, context);
+    device_create_dummy_textures(device, context);
     create_default_samplers(device, context);
     context_release(context);
 
@@ -1106,17 +1106,15 @@ HRESULT CDECL wined3d_device_init_3d(struct wined3d_device *device,
     device->swapchains[0] = swapchain;
     device_init_swapchain_state(device, swapchain);
 
+    wined3d_cs_emit_create_dummy_textures(device->cs);
     context = context_acquire(device, NULL, 0);
-
-    create_dummy_textures(device, context);
     create_default_samplers(device, context);
+    context_release(context);
 
     device->contexts[0]->last_was_rhw = 0;
 
     TRACE("All defaults now set up, leaving 3D init.\n");
 
-    context_release(context);
-
     /* Clear the screen */
     if (swapchain->back_buffers && swapchain->back_buffers[0])
         clear_flags |= WINED3DCLEAR_TARGET;
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 2d0a97f706c..efd4a4dfd6d 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2672,6 +2672,7 @@ void device_resource_released(struct wined3d_device *device, struct wined3d_reso
 void device_invalidate_state(const struct wined3d_device *device, DWORD state) DECLSPEC_HIDDEN;
 void device_exec_update_texture(struct wined3d_context *context, struct wined3d_texture *src_texture,
         struct wined3d_texture *dst_texture) DECLSPEC_HIDDEN;
+void device_create_dummy_textures(struct wined3d_device *device, struct wined3d_context *context) DECLSPEC_HIDDEN;
 
 static inline BOOL isStateDirty(const struct wined3d_context *context, DWORD state)
 {
@@ -3219,6 +3220,7 @@ void wined3d_cs_emit_clear(struct wined3d_cs *cs, DWORD rect_count, const RECT *
 void wined3d_cs_emit_clear_rtv(struct wined3d_cs *cs, struct wined3d_rendertarget_view *view,
         const RECT *rect, DWORD flags, const struct wined3d_color *color, float depth, DWORD stencil,
         const struct blit_shader *blitter) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_create_dummy_textures(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_destroy_object(struct wined3d_cs *cs,
         void (*callback)(void *object), void *object) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_dispatch(struct wined3d_cs *cs,
-- 
2.11.0


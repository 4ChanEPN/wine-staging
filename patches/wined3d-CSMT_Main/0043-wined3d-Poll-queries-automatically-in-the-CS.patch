From d1901e9158ced30ba849f799ba1b612d8e74752d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Sat, 6 Jul 2013 19:18:48 +0200
Subject: wined3d: Poll queries automatically in the CS

---
 dlls/wined3d/cs.c              | 69 +++++++++++++++++++-----------------------
 dlls/wined3d/query.c           | 22 ++++++++------
 dlls/wined3d/wined3d_private.h |  5 +--
 3 files changed, 46 insertions(+), 50 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 2952104..f7ffc1c 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -71,7 +71,6 @@ enum wined3d_cs_op
     WINED3D_CS_OP_CLEAR_RTV,
     WINED3D_CS_OP_TEXTURE_MAP,
     WINED3D_CS_OP_TEXTURE_UNMAP,
-    WINED3D_CS_OP_QUERY_POLL,
     WINED3D_CS_OP_STOP,
 };
 
@@ -404,13 +403,6 @@ struct wined3d_cs_skip
     DWORD size;
 };
 
-struct wined3d_cs_query_poll
-{
-    enum wined3d_cs_op opcode;
-    struct wined3d_query *query;
-    BOOL *ret;
-};
-
 static void wined3d_cs_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -1675,8 +1667,9 @@ static UINT wined3d_cs_exec_query_issue(struct wined3d_cs *cs, const void *data)
 
     query->query_ops->query_issue(query, op->flags);
 
-    if (op->flags & WINED3DISSUE_END)
-        InterlockedIncrement(&query->counter_worker);
+    if (wined3d_settings.cs_multithreaded && op->flags & WINED3DISSUE_END
+            && list_empty(&query->poll_list_entry))
+        list_add_tail(&cs->query_poll_list, &query->poll_list_entry);
 
     return sizeof(*op);
 }
@@ -2033,33 +2026,6 @@ void wined3d_cs_emit_texture_unmap(struct wined3d_cs *cs, struct wined3d_texture
     cs->ops->submit(cs, sizeof(*op));
 }
 
-static UINT wined3d_cs_exec_query_poll(struct wined3d_cs *cs, const void *data)
-{
-    const struct wined3d_cs_query_poll *op = data;
-    struct wined3d_query *query = op->query;
-
-    *op->ret = query->query_ops->query_poll(query);
-
-    return sizeof(*op);
-}
-
-void wined3d_cs_emit_query_poll(struct wined3d_cs *cs, struct wined3d_query *query, BOOL *ret)
-{
-    struct wined3d_cs_query_poll *op;
-
-    op = cs->ops->require_space(cs, sizeof(*op));
-    op->opcode = WINED3D_CS_OP_QUERY_POLL;
-    op->query = query;
-    op->ret = ret;
-
-    cs->ops->submit(cs, sizeof(*op));
-
-    if (wined3d_settings.cs_multithreaded)
-        FIXME("Query handling is not particularly fast yet\n");
-
-    cs->ops->finish(cs);
-}
-
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                        */ wined3d_cs_exec_nop,
@@ -2109,7 +2075,6 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_CLEAR_RTV                  */ wined3d_cs_exec_clear_rtv,
     /* WINED3D_CS_OP_TEXTURE_MAP                */ wined3d_cs_exec_texture_map,
     /* WINED3D_CS_OP_TEXTURE_UNMAP              */ wined3d_cs_exec_texture_unmap,
-    /* WINED3D_CS_OP_QUERY_POLL                 */ wined3d_cs_exec_query_poll,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
@@ -2228,17 +2193,45 @@ void wined3d_cs_switch_onscreen_ds(struct wined3d_cs *cs,
     wined3d_texture_incref(cs->onscreen_depth_stencil->container);
 }
 
+static inline void poll_queries(struct wined3d_cs *cs)
+{
+    struct wined3d_query *query, *cursor;
+
+    LIST_FOR_EACH_ENTRY_SAFE(query, cursor, &cs->query_poll_list, struct wined3d_query, poll_list_entry)
+    {
+        BOOL ret;
+
+        ret = query->query_ops->query_poll(query);
+        if (ret)
+        {
+            list_remove(&query->poll_list_entry);
+            list_init(&query->poll_list_entry);
+            InterlockedIncrement(&query->counter_retrieved);
+        }
+    }
+}
+
 static DWORD WINAPI wined3d_cs_run(void *thread_param)
 {
     struct wined3d_cs *cs = thread_param;
     enum wined3d_cs_op opcode;
     LONG tail;
+    char poll = 0;
 
     TRACE("Started.\n");
 
+    list_init(&cs->query_poll_list);
     cs->thread_id = GetCurrentThreadId();
     for (;;)
     {
+        if (poll == 10)
+        {
+            poll = 0;
+            poll_queries(cs);
+        }
+        else
+            poll++;
+
         if (*((volatile LONG *)&cs->queue.head) == cs->queue.tail)
         {
             continue;
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index 99a1411..b5e1fde 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -37,6 +37,7 @@ static void wined3d_query_init(struct wined3d_query *query, struct wined3d_devic
     query->data = data;
     query->data_size = data_size;
     query->query_ops = query_ops;
+    list_init(&query->poll_list_entry);
 }
 
 static struct wined3d_event_query *wined3d_event_query_from_query(struct wined3d_query *query)
@@ -266,6 +267,9 @@ static void wined3d_query_destroy_object(void *object)
 {
     struct wined3d_query *query = object;
 
+    if (!list_empty(&query->poll_list_entry))
+        list_remove(&query->poll_list_entry);
+
     /* Queries are specific to the GL context that created them. Not
      * deleting the query will obviously leak it, but that's still better
      * than potentially deleting a different query with the same id in this
@@ -330,12 +334,6 @@ HRESULT CDECL wined3d_query_get_data(struct wined3d_query *query,
     if (flags)
         WARN("Ignoring flags %#x.\n", flags);
 
-    if (query->counter_main != query->counter_worker)
-    {
-        TRACE("D3DISSUE_END command not submitted to GL yet\n");
-        return S_FALSE;
-    }
-
     if (query->state == QUERY_BUILDING)
     {
         WARN("Query is building, returning S_FALSE.\n");
@@ -343,14 +341,18 @@ HRESULT CDECL wined3d_query_get_data(struct wined3d_query *query,
     }
 
     if (query->state == QUERY_CREATED)
+    {
         WARN("Query wasn't started yet.\n");
-    else
+    }
+    else if (!wined3d_settings.cs_multithreaded)
     {
-        BOOL ret;
-        wined3d_cs_emit_query_poll(query->device->cs, query, &ret);
-        if (!ret)
+        if (!query->query_ops->query_poll(query))
             return S_FALSE;
     }
+    else if (query->counter_main != query->counter_retrieved)
+    {
+        return S_FALSE;
+    }
 
     if (data)
         memcpy(data, query->data, min(data_size, query->data_size));
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index a10b30f..e6d2602 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -1396,7 +1396,8 @@ struct wined3d_query
     const void *data;
     DWORD data_size;
     const struct wined3d_query_ops *query_ops;
-    LONG counter_main, counter_worker;
+    LONG counter_main, counter_retrieved;
+    struct list poll_list_entry;
 };
 
 union wined3d_gl_query_object
@@ -3064,6 +3065,7 @@ struct wined3d_cs
     struct wined3d_cs_queue queue;
 
     LONG pending_presents;
+    struct list query_poll_list;
 };
 
 struct wined3d_cs *wined3d_cs_create(struct wined3d_device *device) DECLSPEC_HIDDEN;
@@ -3147,7 +3149,6 @@ void *wined3d_cs_emit_texture_map(struct wined3d_cs *cs, struct wined3d_texture
         unsigned int sub_resource_idx, DWORD flags) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_unmap(struct wined3d_cs *cs, struct wined3d_texture *texture,
         unsigned int sub_resource_idx) DECLSPEC_HIDDEN;
-void wined3d_cs_emit_query_poll(struct wined3d_cs *cs, struct wined3d_query *query, BOOL *ret) DECLSPEC_HIDDEN;
 
 /* TODO: Add tests and support for FLOAT16_4 POSITIONT, D3DCOLOR position, other
  * fixed function semantics as D3DCOLOR or FLOAT16 */
-- 
2.9.0


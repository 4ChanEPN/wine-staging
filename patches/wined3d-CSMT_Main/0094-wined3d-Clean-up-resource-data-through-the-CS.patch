From 790ed84dedaba0c7dbbb31c28d6d304cf92c312b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Wed, 2 Oct 2013 22:38:51 +0200
Subject: wined3d: Clean up resource data through the CS.

---
 dlls/wined3d/buffer.c          |  7 +++++++
 dlls/wined3d/cs.c              | 28 ++++++++++++++++++++++++++++
 dlls/wined3d/device.c          |  2 --
 dlls/wined3d/resource.c        | 11 ++++++++---
 dlls/wined3d/texture.c         |  2 ++
 dlls/wined3d/wined3d_private.h |  3 +++
 6 files changed, 48 insertions(+), 5 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 62360c0..348a24a 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -571,6 +571,9 @@ ULONG CDECL wined3d_buffer_decref(struct wined3d_buffer *buffer)
         }
 
         resource_cleanup(&buffer->resource);
+        if (wined3d_settings.cs_multithreaded)
+            buffer->resource.device->cs->ops->finish(buffer->resource.device->cs);
+
         buffer->resource.parent_ops->wined3d_object_destroyed(buffer->resource.parent);
         HeapFree(GetProcessHeap(), 0, buffer->maps);
         HeapFree(GetProcessHeap(), 0, buffer);
@@ -1357,6 +1360,8 @@ static HRESULT buffer_init(struct wined3d_buffer *buffer, struct wined3d_device
         ERR("Out of memory.\n");
         buffer_unload(&buffer->resource);
         resource_cleanup(&buffer->resource);
+        if (wined3d_settings.cs_multithreaded)
+            buffer->resource.device->cs->ops->finish(buffer->resource.device->cs);
         return E_OUTOFMEMORY;
     }
     buffer->maps_size = 1;
@@ -1367,6 +1372,8 @@ static HRESULT buffer_init(struct wined3d_buffer *buffer, struct wined3d_device
         buffer_unload(&buffer->resource);
         resource_cleanup(&buffer->resource);
         HeapFree(GetProcessHeap(), 0, buffer->maps);
+        if (wined3d_settings.cs_multithreaded)
+            buffer->resource.device->cs->ops->finish(buffer->resource.device->cs);
         return hr;
     }
 
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index badc0b1..d727e71 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -82,6 +82,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_VDECL_DESTROY,
     WINED3D_CS_OP_SHADER_CLEANUP,
     WINED3D_CS_OP_CREATE_VBO,
+    WINED3D_CS_OP_RESOURCE_CLEANUP,
     WINED3D_CS_OP_STOP,
 };
 
@@ -485,6 +486,12 @@ struct wined3d_cs_create_vbo
     struct wined3d_buffer *buffer;
 };
 
+struct wined3d_cs_resource_cleanup
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_resource *resource;
+};
+
 static void wined3d_cs_mt_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -2442,6 +2449,26 @@ void wined3d_cs_emit_create_vbo(struct wined3d_cs *cs, struct wined3d_buffer *bu
     cs->ops->finish_prio(cs);
 }
 
+static UINT wined3d_cs_exec_resource_cleanup(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_resource_cleanup *op = data;
+
+    wined3d_resource_cleanup_cs(op->resource);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_resource_cleanup(struct wined3d_cs *cs, struct wined3d_resource *resource)
+{
+    struct wined3d_cs_resource_cleanup *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_RESOURCE_CLEANUP;
+    op->resource = resource;
+
+    cs->ops->submit(cs, sizeof(*op));
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                        */ wined3d_cs_exec_nop,
@@ -2502,6 +2529,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_VDECL_DESTROY              */ wined3d_cs_exec_vertex_declaration_destroy,
     /* WINED3D_CS_OP_SHADER_CLEANUP             */ wined3d_cs_exec_shader_cleanup,
     /* WINED3D_CS_OP_CREATE_VBO                 */ wined3d_cs_exec_create_vbo,
+    /* WINED3D_CS_OP_RESOURCE_CLEANUP           */ wined3d_cs_exec_resource_cleanup,
 };
 
 static inline void *_wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, BOOL prio)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index b35fa06..627eca6 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -4982,8 +4982,6 @@ void device_resource_released(struct wined3d_device *device, struct wined3d_reso
 
     TRACE("device %p, resource %p, type %s.\n", device, resource, debug_d3dresourcetype(type));
 
-    context_resource_released(device, resource, type);
-
     for (i = 0; i < device->adapter->gl_info.limits.buffers; ++i)
     {
         if ((rtv = device->state.fb.render_targets[i]) && rtv->resource == resource)
diff --git a/dlls/wined3d/resource.c b/dlls/wined3d/resource.c
index 9acc7be..3af6851 100644
--- a/dlls/wined3d/resource.c
+++ b/dlls/wined3d/resource.c
@@ -237,6 +237,13 @@ HRESULT resource_init(struct wined3d_resource *resource, struct wined3d_device *
     return WINED3D_OK;
 }
 
+void wined3d_resource_cleanup_cs(struct wined3d_resource *resource)
+{
+    wined3d_resource_free_sysmem(resource);
+    resource->map_heap_memory = NULL;
+    context_resource_released(resource->device, resource, resource->type);
+}
+
 void resource_cleanup(struct wined3d_resource *resource)
 {
     const struct wined3d *d3d = resource->device->wined3d;
@@ -249,10 +256,8 @@ void resource_cleanup(struct wined3d_resource *resource)
         adapter_adjust_memory(resource->device->adapter, (INT64)0 - resource->size);
     }
 
-    wined3d_resource_free_sysmem(resource);
-    resource->map_heap_memory = NULL;
-
     device_resource_released(resource->device, resource);
+    wined3d_cs_emit_resource_cleanup(resource->device->cs, resource);
 }
 
 void resource_unload(struct wined3d_resource *resource)
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index eacdca1..8190279 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -521,6 +521,8 @@ static void wined3d_texture_cleanup(struct wined3d_texture *texture)
     texture->texture_ops->texture_cleanup_sub_resources(texture);
     wined3d_texture_unload_gl_texture(texture);
     resource_cleanup(&texture->resource);
+    if (wined3d_settings.cs_multithreaded)
+        texture->resource.device->cs->ops->finish(texture->resource.device->cs);
 }
 
 void wined3d_texture_set_swapchain(struct wined3d_texture *texture, struct wined3d_swapchain *swapchain)
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 0cfe28a..e0ce86e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2484,6 +2484,7 @@ HRESULT resource_init(struct wined3d_resource *resource, struct wined3d_device *
         const struct wined3d_resource_ops *resource_ops) DECLSPEC_HIDDEN;
 void resource_unload(struct wined3d_resource *resource) DECLSPEC_HIDDEN;
 BOOL wined3d_resource_allocate_sysmem(struct wined3d_resource *resource) DECLSPEC_HIDDEN;
+void wined3d_resource_cleanup_cs(struct wined3d_resource *resource) DECLSPEC_HIDDEN;
 void wined3d_resource_free_sysmem(struct wined3d_resource *resource) DECLSPEC_HIDDEN;
 GLbitfield wined3d_resource_gl_map_flags(DWORD d3d_flags) DECLSPEC_HIDDEN;
 GLenum wined3d_resource_gl_legacy_map_flags(DWORD d3d_flags) DECLSPEC_HIDDEN;
@@ -3067,6 +3068,8 @@ void wined3d_cs_emit_vertex_declaration_destroy(struct wined3d_cs *cs,
         struct wined3d_vertex_declaration *declaration) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_shader_cleanup(struct wined3d_cs *cs, struct wined3d_shader *shader) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_create_vbo(struct wined3d_cs *cs, struct wined3d_buffer *buffer) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_resource_cleanup(struct wined3d_cs *cs,
+        struct wined3d_resource *resource) DECLSPEC_HIDDEN;
 
 /* Direct3D terminology with little modifications. We do not have an issued state
  * because only the driver knows about it, but we have a created state because d3d
-- 
2.8.0


From 4709b7d806166b472356abb9776d80ba432bf012 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Sat, 6 Jul 2013 19:18:03 +0200
Subject: wined3d: Introduce a separate queue for priority commands

---
 dlls/wined3d/cs.c              | 128 ++++++++++++++++++++++++++++++++++-------
 dlls/wined3d/wined3d_private.h |   5 +-
 2 files changed, 110 insertions(+), 23 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index f7ffc1c..5b829ba 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -403,7 +403,7 @@ struct wined3d_cs_skip
     DWORD size;
 };
 
-static void wined3d_cs_submit(struct wined3d_cs *cs, size_t size)
+static void wined3d_cs_mt_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
     /* There is only one thread writing to queue.head, InterlockedExchange
@@ -411,6 +411,14 @@ static void wined3d_cs_submit(struct wined3d_cs *cs, size_t size)
     InterlockedExchange(&cs->queue.head, new_val);
 }
 
+static void wined3d_cs_mt_submit_prio(struct wined3d_cs *cs, size_t size)
+{
+    LONG new_val = (cs->prio_queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
+    /* There is only one thread writing to queue.head, InterlockedExchange
+     * is used for the memory barrier. */
+    InterlockedExchange(&cs->prio_queue.head, new_val);
+}
+
 static UINT wined3d_cs_exec_nop(struct wined3d_cs *cs, const void *data)
 {
     return sizeof(enum wined3d_cs_op);
@@ -444,15 +452,16 @@ static void wined3d_cs_emit_fence(struct wined3d_cs *cs, BOOL *signalled)
     cs->ops->submit(cs, sizeof(*op));
 }
 
-static void wined3d_cs_finish(struct wined3d_cs *cs)
+static void wined3d_cs_emit_fence_prio(struct wined3d_cs *cs, BOOL *signalled)
 {
-    BOOL fence;
+    struct wined3d_cs_fence *op;
 
-    wined3d_cs_emit_fence(cs, &fence);
+    *signalled = FALSE;
 
-    /* A busy wait should be fine, we're not supposed to have to wait very
-     * long. */
-    while (!InterlockedCompareExchange(&fence, TRUE, TRUE));
+    op = cs->ops->require_space_prio(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_FENCE;
+    op->signalled = signalled;
+    cs->ops->submit_prio(cs, sizeof(*op));
 }
 
 static UINT wined3d_cs_exec_present(struct wined3d_cs *cs, const void *data)
@@ -2077,9 +2086,9 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_TEXTURE_UNMAP              */ wined3d_cs_exec_texture_unmap,
 };
 
-static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
+static inline void *_wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, BOOL prio)
 {
-    struct wined3d_cs_queue *queue = &cs->queue;
+    struct wined3d_cs_queue *queue = prio ? &cs->prio_queue : &cs->queue;
     size_t queue_size = sizeof(queue->data) / sizeof(*queue->data);
 
     if (queue_size - size < queue->head)
@@ -2087,7 +2096,7 @@ static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
         struct wined3d_cs_skip *skip;
         size_t nop_size = queue_size - queue->head;
 
-        skip = wined3d_cs_mt_require_space(cs, nop_size);
+        skip = _wined3d_cs_mt_require_space(cs, nop_size, prio);
         if (nop_size < sizeof(*skip))
         {
             skip->opcode = WINED3D_CS_OP_NOP;
@@ -2098,7 +2107,11 @@ static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
             skip->size = nop_size;
         }
 
-        cs->ops->submit(cs, nop_size);
+        if (prio)
+            cs->ops->submit_prio(cs, nop_size);
+        else
+            cs->ops->submit(cs, nop_size);
+
         assert(!queue->head);
     }
 
@@ -2125,12 +2138,15 @@ static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
     return &queue->data[queue->head];
 }
 
-static const struct wined3d_cs_ops wined3d_cs_mt_ops =
+static inline void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
 {
-    wined3d_cs_mt_require_space,
-    wined3d_cs_submit,
-    wined3d_cs_finish,
-};
+    return _wined3d_cs_mt_require_space(cs, size, FALSE);
+}
+
+static inline void *wined3d_cs_mt_require_space_prio(struct wined3d_cs *cs, size_t size)
+{
+    return _wined3d_cs_mt_require_space(cs, size, TRUE);
+}
 
 /* FIXME: wined3d_device_uninit_3d() should either flush and wait, or be an
  * OP itself. */
@@ -2141,9 +2157,63 @@ static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
     op = wined3d_cs_mt_require_space(cs, sizeof(*op));
     op->opcode = WINED3D_CS_OP_STOP;
 
-    wined3d_cs_submit(cs, sizeof(*op));
+    wined3d_cs_mt_submit(cs, sizeof(*op));
 }
 
+static void wined3d_cs_mt_finish(struct wined3d_cs *cs)
+{
+    BOOL fence;
+
+    if (cs->thread_id == GetCurrentThreadId())
+    {
+        static BOOL once;
+        if (!once)
+        {
+            FIXME("flush_and_wait called from cs thread\n");
+            once = TRUE;
+        }
+        return;
+    }
+
+    wined3d_cs_emit_fence(cs, &fence);
+
+    /* A busy wait should be fine, we're not supposed to have to wait very
+     * long. */
+    while (!InterlockedCompareExchange(&fence, TRUE, TRUE));
+}
+
+static void wined3d_cs_mt_finish_prio(struct wined3d_cs *cs)
+{
+    BOOL fence;
+
+    if (cs->thread_id == GetCurrentThreadId())
+    {
+        static BOOL once;
+        if (!once)
+        {
+            FIXME("flush_and_wait called from cs thread\n");
+            once = TRUE;
+        }
+        return;
+    }
+
+    wined3d_cs_emit_fence_prio(cs, &fence);
+
+    /* A busy wait should be fine, we're not supposed to have to wait very
+     * long. */
+    while (!InterlockedCompareExchange(&fence, TRUE, TRUE));
+}
+
+static const struct wined3d_cs_ops wined3d_cs_mt_ops =
+{
+    wined3d_cs_mt_require_space,
+    wined3d_cs_mt_require_space_prio,
+    wined3d_cs_mt_submit,
+    wined3d_cs_mt_submit_prio,
+    wined3d_cs_mt_finish,
+    wined3d_cs_mt_finish_prio,
+};
+
 static void wined3d_cs_st_submit(struct wined3d_cs *cs, size_t size)
 {
     enum wined3d_cs_op opcode = *(const enum wined3d_cs_op *)&cs->queue.data;
@@ -2169,8 +2239,11 @@ static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size)
 static const struct wined3d_cs_ops wined3d_cs_st_ops =
 {
     wined3d_cs_st_require_space,
+    wined3d_cs_st_require_space,
+    wined3d_cs_st_submit,
     wined3d_cs_st_submit,
     wined3d_cs_st_finish,
+    wined3d_cs_st_finish,
 };
 
 void wined3d_cs_switch_onscreen_ds(struct wined3d_cs *cs,
@@ -2217,6 +2290,7 @@ static DWORD WINAPI wined3d_cs_run(void *thread_param)
     enum wined3d_cs_op opcode;
     LONG tail;
     char poll = 0;
+    struct wined3d_cs_queue *queue;
 
     TRACE("Started.\n");
 
@@ -2232,13 +2306,23 @@ static DWORD WINAPI wined3d_cs_run(void *thread_param)
         else
             poll++;
 
-        if (*((volatile LONG *)&cs->queue.head) == cs->queue.tail)
+        if (*((volatile LONG *)&cs->prio_queue.head) != cs->prio_queue.tail)
+        {
+            queue = &cs->prio_queue;
+        }
+        else if (*((volatile LONG *)&cs->queue.head) != cs->queue.tail)
+        {
+            queue = &cs->queue;
+            if (*((volatile LONG *)&cs->prio_queue.head) != cs->prio_queue.tail)
+                queue = &cs->prio_queue;
+        }
+        else
         {
             continue;
         }
 
-        tail = cs->queue.tail;
-        opcode = *(const enum wined3d_cs_op *)&cs->queue.data[tail];
+        tail = queue->tail;
+        opcode = *(const enum wined3d_cs_op *)&queue->data[tail];
 
         if (opcode >= WINED3D_CS_OP_STOP)
         {
@@ -2247,9 +2331,9 @@ static DWORD WINAPI wined3d_cs_run(void *thread_param)
             goto done;
         }
 
-        tail += wined3d_cs_op_handlers[opcode](cs, &cs->queue.data[tail]);
+        tail += wined3d_cs_op_handlers[opcode](cs, &queue->data[tail]);
         tail &= (WINED3D_CS_QUEUE_SIZE - 1);
-        InterlockedExchange(&cs->queue.tail, tail);
+        InterlockedExchange(&queue->tail, tail);
     }
 
 done:
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 5e45522..05eaeb8 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3049,8 +3049,11 @@ struct wined3d_cs_queue
 struct wined3d_cs_ops
 {
     void *(*require_space)(struct wined3d_cs *cs, size_t size);
+    void *(*require_space_prio)(struct wined3d_cs *cs, size_t size);
     void (*submit)(struct wined3d_cs *cs, size_t size);
+    void (*submit_prio)(struct wined3d_cs *cs, size_t size);
     void (*finish)(struct wined3d_cs *cs);
+    void (*finish_prio)(struct wined3d_cs *cs);
 };
 
 struct wined3d_cs
@@ -3062,7 +3065,7 @@ struct wined3d_cs
     DWORD thread_id;
     struct wined3d_surface *onscreen_depth_stencil;
 
-    struct wined3d_cs_queue queue;
+    struct wined3d_cs_queue queue, prio_queue;
 
     LONG pending_presents;
     struct list query_poll_list;
-- 
2.9.0


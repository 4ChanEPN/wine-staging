From 7c6279ec1995b6987669524f9c03aac4423394d0 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Tue, 15 Nov 2016 22:09:53 +0100
Subject: Revert "wined3d: Fix style issues in delete_gl_buffer()."

This reverts commit 01b8bea329a34d946aa2efbeabae9ad00a5e9868.
---
 dlls/wined3d/buffer.c | 29 ++++++++++++++---------------
 1 file changed, 14 insertions(+), 15 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 6e6d189..a3d7dfd 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -139,17 +139,16 @@ static void buffer_bind(struct wined3d_buffer *buffer, struct wined3d_context *c
 }
 
 /* Context activation is done by the caller. */
-static void buffer_destroy_buffer_object(struct wined3d_buffer *buffer, const struct wined3d_context *context)
+static void delete_gl_buffer(struct wined3d_buffer *This, const struct wined3d_context *context)
 {
     const struct wined3d_gl_info *gl_info = context->gl_info;
-    struct wined3d_resource *resource = &buffer->resource;
+    struct wined3d_resource *resource = &This->resource;
 
-    if (!buffer->buffer_object)
-        return;
+    if(!This->buffer_object) return;
 
-    GL_EXTCALL(glDeleteBuffers(1, &buffer->buffer_object));
+    GL_EXTCALL(glDeleteBuffers(1, &This->buffer_object));
     checkGLcall("glDeleteBuffers");
-    buffer->buffer_object = 0;
+    This->buffer_object = 0;
 
     /* The stream source state handler might have read the memory of the
      * vertex buffer already and got the memory in the vbo which is not
@@ -158,18 +157,18 @@ static void buffer_destroy_buffer_object(struct wined3d_buffer *buffer, const st
      * rarely. */
     if (resource->bind_count)
     {
-        if (buffer->bind_flags & WINED3D_BIND_VERTEX_BUFFER)
+        if (This->bind_flags & WINED3D_BIND_VERTEX_BUFFER)
             device_invalidate_state(resource->device, STATE_STREAMSRC);
-        if (buffer->bind_flags & WINED3D_BIND_INDEX_BUFFER)
+        if (This->bind_flags & WINED3D_BIND_INDEX_BUFFER)
             device_invalidate_state(resource->device, STATE_INDEXBUFFER);
     }
 
-    if (buffer->query)
+    if(This->query)
     {
-        wined3d_event_query_destroy(buffer->query);
-        buffer->query = NULL;
+        wined3d_event_query_destroy(This->query);
+        This->query = NULL;
     }
-    buffer->flags &= ~WINED3D_BUFFER_APPLESYNC;
+    This->flags &= ~WINED3D_BUFFER_APPLESYNC;
 }
 
 /* Context activation is done by the caller. */
@@ -258,7 +257,7 @@ fail:
     /* Clean up all BO init, but continue because we can work without a BO :-) */
     ERR("Failed to create a buffer object. Continuing, but performance issues may occur.\n");
     buffer->flags &= ~WINED3D_BUFFER_USE_BO;
-    buffer_destroy_buffer_object(buffer, context);
+    delete_gl_buffer(buffer, context);
     buffer_clear_dirty_areas(buffer);
     return FALSE;
 }
@@ -664,7 +663,7 @@ static void buffer_unload(struct wined3d_resource *resource)
             buffer->flags &= ~WINED3D_BUFFER_DOUBLEBUFFER;
 
         wined3d_buffer_invalidate_location(buffer, WINED3D_LOCATION_BUFFER);
-        buffer_destroy_buffer_object(buffer, context);
+        delete_gl_buffer(buffer, context);
         buffer_clear_dirty_areas(buffer);
 
         context_release(context);
@@ -693,7 +692,7 @@ static void wined3d_buffer_destroy_object(void *object)
     if (buffer->buffer_object)
     {
         context = context_acquire(buffer->resource.device, NULL);
-        buffer_destroy_buffer_object(buffer, context);
+        delete_gl_buffer(buffer, context);
         context_release(context);
 
         HeapFree(GetProcessHeap(), 0, buffer->conversion_map);
-- 
2.9.0


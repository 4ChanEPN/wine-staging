From 8b94a2168e87d63b4def608b239fc4cc4b1075d3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Tue, 23 Sep 2014 22:18:56 +0200
Subject: wined3d: Render target lock hack

---
 dlls/wined3d/resource.c        | 17 +++++++++++++++++
 dlls/wined3d/wined3d_main.c    |  7 +++++++
 dlls/wined3d/wined3d_private.h |  1 +
 3 files changed, 25 insertions(+)

diff --git a/dlls/wined3d/resource.c b/dlls/wined3d/resource.c
index dd58302..5bc7d9a 100644
--- a/dlls/wined3d/resource.c
+++ b/dlls/wined3d/resource.c
@@ -887,6 +887,17 @@ HRESULT wined3d_resource_map(struct wined3d_resource *resource,
     TRACE("resource %p, map_desc %p, box %s, flags %#x.\n",
             resource, map_desc, debug_box(box), flags);
 
+    if (resource->usage & WINED3DUSAGE_RENDERTARGET && wined3d_settings.ignore_rt_map)
+    {
+        WARN("Ignoring render target map, only finishing CS.\n");
+        wined3d_cs_emit_glfinish(device->cs);
+        map_desc->row_pitch = 0;
+        map_desc->slice_pitch = 0;
+        map_desc->data = NULL;
+        device->cs->ops->finish(device->cs);
+        return WINED3D_OK;
+    }
+
     if (resource->map_count)
     {
         WARN("Volume is already mapped.\n");
@@ -986,6 +997,12 @@ HRESULT wined3d_resource_unmap(struct wined3d_resource *resource)
     struct wined3d_device *device = resource->device;
     TRACE("resource %p.\n", resource);
 
+    if (resource->usage & WINED3DUSAGE_RENDERTARGET && wined3d_settings.ignore_rt_map)
+    {
+        WARN("Ignoring render target unmap.\n");
+        return WINED3D_OK;
+    }
+
     if (!resource->map_count)
     {
         WARN("Trying to unlock an unlocked resource %p.\n", resource);
diff --git a/dlls/wined3d/wined3d_main.c b/dlls/wined3d/wined3d_main.c
index 7b4fc40..0bc1120 100644
--- a/dlls/wined3d/wined3d_main.c
+++ b/dlls/wined3d/wined3d_main.c
@@ -87,6 +87,7 @@ struct wined3d_settings wined3d_settings =
     ~0U,            /* No PS shader model limit by default. */
     FALSE,          /* 3D support enabled by default. */
     FALSE,          /* No multithreaded CS by default. */
+    FALSE,          /* Do not ignore render target maps. */
 };
 
 struct wined3d * CDECL wined3d_create(DWORD flags)
@@ -321,6 +322,12 @@ static BOOL wined3d_dll_init(HINSTANCE hInstDLL)
             TRACE("Enabling multithreaded command stream.\n");
             wined3d_settings.cs_multithreaded = TRUE;
         }
+        if (!get_config_key(hkey, appkey, "ignore_rt_map", buffer, size)
+                && !strcmp(buffer,"enabled"))
+        {
+            TRACE("Ignoring render target maps.\n");
+            wined3d_settings.ignore_rt_map = TRUE;
+        }
     }
 
     if (appkey) RegCloseKey( appkey );
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 9a1c94d..d0453f1 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -296,6 +296,7 @@ struct wined3d_settings
     unsigned int max_sm_ps;
     BOOL no_3d;
     BOOL cs_multithreaded;
+    BOOL ignore_rt_map;
 };
 
 extern struct wined3d_settings wined3d_settings DECLSPEC_HIDDEN;
-- 
2.7.0


From a3f8b91880e4b0ea4a8a8a9dcb6cba9f05bc795b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Sat, 6 Jul 2013 18:26:11 +0200
Subject: wined3d: Add query support to the command stream

---
 dlls/wined3d/cs.c              | 36 ++++++++++++++++++++++++++++++++++++
 dlls/wined3d/query.c           | 15 +++++++++++----
 dlls/wined3d/wined3d_private.h |  2 ++
 3 files changed, 49 insertions(+), 4 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 10df183..1c79290 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -71,6 +71,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_CLEAR_RTV,
     WINED3D_CS_OP_TEXTURE_MAP,
     WINED3D_CS_OP_TEXTURE_UNMAP,
+    WINED3D_CS_OP_QUERY_POLL,
     WINED3D_CS_OP_STOP,
 };
 
@@ -403,6 +404,13 @@ struct wined3d_cs_skip
     DWORD size;
 };
 
+struct wined3d_cs_query_poll
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_query *query;
+    BOOL *ret;
+};
+
 static void wined3d_cs_submit(struct wined3d_cs *cs, size_t size)
 {
     LONG new_val = (cs->queue.head + size) & (WINED3D_CS_QUEUE_SIZE - 1);
@@ -2022,6 +2030,33 @@ void wined3d_cs_emit_texture_unmap(struct wined3d_cs *cs, struct wined3d_texture
     cs->ops->submit(cs, sizeof(*op));
 }
 
+static UINT wined3d_cs_exec_query_poll(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_query_poll *op = data;
+    struct wined3d_query *query = op->query;
+
+    *op->ret = query->query_ops->query_poll(query);
+
+    return sizeof(*op);
+}
+
+void wined3d_cs_emit_query_poll(struct wined3d_cs *cs, struct wined3d_query *query, BOOL *ret)
+{
+    struct wined3d_cs_query_poll *op;
+
+    op = cs->ops->require_space(cs, sizeof(*op));
+    op->opcode = WINED3D_CS_OP_QUERY_POLL;
+    op->query = query;
+    op->ret = ret;
+
+    cs->ops->submit(cs, sizeof(*op));
+
+    if (wined3d_settings.cs_multithreaded)
+        FIXME("Query handling is not particularly fast yet\n");
+
+    cs->ops->finish(cs);
+}
+
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
     /* WINED3D_CS_OP_NOP                        */ wined3d_cs_exec_nop,
@@ -2071,6 +2106,7 @@ static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_CLEAR_RTV                  */ wined3d_cs_exec_clear_rtv,
     /* WINED3D_CS_OP_TEXTURE_MAP                */ wined3d_cs_exec_texture_map,
     /* WINED3D_CS_OP_TEXTURE_UNMAP              */ wined3d_cs_exec_texture_unmap,
+    /* WINED3D_CS_OP_QUERY_POLL                 */ wined3d_cs_exec_query_poll,
 };
 
 static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size)
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index 8b15765..c64e5fb 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -338,8 +338,13 @@ HRESULT CDECL wined3d_query_get_data(struct wined3d_query *query,
 
     if (query->state == QUERY_CREATED)
         WARN("Query wasn't started yet.\n");
-    else if (!query->query_ops->query_poll(query))
-        return S_FALSE;
+    else
+    {
+        BOOL ret;
+        wined3d_cs_emit_query_poll(query->device->cs, query, &ret);
+        if (!ret)
+            return S_FALSE;
+    }
 
     if (data)
         memcpy(data, query->data, min(data_size, query->data_size));
@@ -479,7 +484,7 @@ static void wined3d_occlusion_query_ops_issue(struct wined3d_query *query, DWORD
      * restart. */
     if (flags & WINED3DISSUE_BEGIN)
     {
-        if (query->state == QUERY_BUILDING)
+        if (oq->started)
         {
             if (oq->context->tid != GetCurrentThreadId())
             {
@@ -509,13 +514,14 @@ static void wined3d_occlusion_query_ops_issue(struct wined3d_query *query, DWORD
         checkGLcall("glBeginQuery()");
 
         context_release(context);
+        oq->started = TRUE;
     }
     if (flags & WINED3DISSUE_END)
     {
         /* MSDN says END on a non-building occlusion query returns an error,
          * but our tests show that it returns OK. But OpenGL doesn't like it,
          * so avoid generating an error. */
-        if (query->state == QUERY_BUILDING)
+        if (oq->started)
         {
             if (oq->context->tid != GetCurrentThreadId())
             {
@@ -531,6 +537,7 @@ static void wined3d_occlusion_query_ops_issue(struct wined3d_query *query, DWORD
                 context_release(context);
             }
         }
+        oq->started = FALSE;
     }
 }
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 34a00b1..c0c5b38 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -1437,6 +1437,7 @@ struct wined3d_occlusion_query
     GLuint id;
     struct wined3d_context *context;
     DWORD samples;
+    BOOL started;
 };
 
 struct wined3d_timestamp_query
@@ -3145,6 +3146,7 @@ void *wined3d_cs_emit_texture_map(struct wined3d_cs *cs, struct wined3d_texture
         unsigned int sub_resource_idx, DWORD flags) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_unmap(struct wined3d_cs *cs, struct wined3d_texture *texture,
         unsigned int sub_resource_idx) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_query_poll(struct wined3d_cs *cs, struct wined3d_query *query, BOOL *ret) DECLSPEC_HIDDEN;
 
 /* TODO: Add tests and support for FLOAT16_4 POSITIONT, D3DCOLOR position, other
  * fixed function semantics as D3DCOLOR or FLOAT16 */
-- 
2.9.0


From 155bb71e1a529edabde58682a63e9cd4fb520206 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 8 Feb 2017 12:16:37 +0100
Subject: wined3d: Simplify the fence handling.

---
 dlls/wined3d/context.c         |  2 +-
 dlls/wined3d/cs.c              | 40 ++++++++++++++++++----------------------
 dlls/wined3d/device.c          |  2 +-
 dlls/wined3d/surface.c         |  2 +-
 dlls/wined3d/swapchain.c       |  4 ++--
 dlls/wined3d/wined3d_private.h |  2 ++
 6 files changed, 25 insertions(+), 27 deletions(-)

diff --git a/dlls/wined3d/context.c b/dlls/wined3d/context.c
index 3fac8562d36..d695786ef50 100644
--- a/dlls/wined3d/context.c
+++ b/dlls/wined3d/context.c
@@ -3677,7 +3677,7 @@ struct wined3d_context *context_acquire(const struct wined3d_device *device, str
     {
         FIXME("Acquiring a GL context from outside the CS thread.\n");
         wined3d_cs_emit_glfinish(device->cs);
-        device->cs->ops->submit_and_wait(device->cs);
+        wined3d_cs_emit_sync(device->cs);
     }
 
     if (current_context && current_context->destroyed)
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 444701544f9..dc1dfad5207 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -37,7 +37,7 @@ static CRITICAL_SECTION wined3d_cs_list_mutex = {&wined3d_cs_list_mutex_debug, -
 
 enum wined3d_cs_op
 {
-    WINED3D_CS_OP_FENCE,
+    WINED3D_CS_OP_SYNC,
     WINED3D_CS_OP_PRESENT,
     WINED3D_CS_OP_CLEAR,
     WINED3D_CS_OP_DISPATCH,
@@ -375,10 +375,9 @@ struct wined3d_cs_stop
     enum wined3d_cs_op opcode;
 };
 
-struct wined3d_cs_fence
+struct wined3d_cs_sync
 {
     enum wined3d_cs_op opcode;
-    BOOL *signalled;
 };
 
 struct wined3d_cs_finish
@@ -639,28 +638,24 @@ static struct wined3d_cs_block *wined3d_cs_get_block(struct wined3d_cs *cs, stru
 
     block->pos = 0;
     block->list = list;
+    block->fence = NULL;
 
     return block;
 }
 
-static UINT wined3d_cs_exec_fence(struct wined3d_cs *cs, const void *data)
+static UINT wined3d_cs_exec_sync(struct wined3d_cs *cs, const void *data)
 {
-    const struct wined3d_cs_fence *op = data;
-
-    InterlockedExchange(op->signalled, TRUE);
-
-    return sizeof(*op);
+    return sizeof(struct wined3d_cs_sync);
 }
 
-static void wined3d_cs_emit_fence(struct wined3d_cs *cs, BOOL *signalled)
+void wined3d_cs_emit_sync(struct wined3d_cs *cs)
 {
-    struct wined3d_cs_fence *op;
-
-    *signalled = FALSE;
+    struct wined3d_cs_sync *op;
 
     op = cs->ops->require_space(cs, sizeof(*op), 0);
-    op->opcode = WINED3D_CS_OP_FENCE;
-    op->signalled = signalled;
+    op->opcode = WINED3D_CS_OP_SYNC;
+
+    cs->ops->submit_and_wait(cs);
 }
 
 static UINT wined3d_cs_exec_present(struct wined3d_cs *cs, const void *data)
@@ -2738,7 +2733,7 @@ void wined3d_cs_emit_map_vertex_buffers(struct wined3d_cs *cs, UINT src_start_id
 
 static UINT (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void *data) =
 {
-    /* WINED3D_CS_OP_FENCE                      */ wined3d_cs_exec_fence,
+    /* WINED3D_CS_OP_SYNC                       */ wined3d_cs_exec_sync,
     /* WINED3D_CS_OP_PRESENT                    */ wined3d_cs_exec_present,
     /* WINED3D_CS_OP_CLEAR                      */ wined3d_cs_exec_clear,
     /* WINED3D_CS_OP_DISPATCH                   */ wined3d_cs_exec_dispatch,
@@ -2837,13 +2832,10 @@ static void *wined3d_cs_mt_require_space(struct wined3d_cs *cs, size_t size, int
 
     assert(size <= sizeof(block->data));
 
-    if (!block || block->pos + size > sizeof(block->data))
+    if (!block || block->pos + size > sizeof(block->data) || block->list != list)
     {
         if (block)
-        {
-            list = block->list; /* send follow-up commands on the same list */
             wined3d_cs_mt_submit(cs);
-        }
         block = wined3d_cs_get_block(cs, list);
         wined3d_cs_set_thread_block(cs, block);
     }
@@ -2872,9 +2864,10 @@ static void wined3d_cs_mt_submit(struct wined3d_cs *cs)
 
 static void wined3d_cs_mt_submit_and_wait(struct wined3d_cs *cs)
 {
-    BOOL fence;
+    struct wined3d_cs_block *block = wined3d_cs_get_thread_block(cs);
+    BOOL fence = FALSE;
 
-    wined3d_cs_emit_fence(cs, &fence);
+    block->fence = &fence;
     wined3d_cs_mt_submit(cs);
 
     /* A busy wait should be fine, we're not supposed to have to wait very
@@ -2920,6 +2913,9 @@ static inline BOOL wined3d_cs_process_block(struct wined3d_cs *cs, struct wined3
         pos += wined3d_cs_op_handlers[opcode](cs, &block->data[pos]);
     }
 
+    if (block->fence)
+        InterlockedExchange(block->fence, TRUE);
+
     wined3d_cs_list_enqueue(&cs->free_list, block);
     return TRUE;
 }
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 1bafbcac067..6f0023d9052 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -1118,7 +1118,7 @@ HRESULT CDECL wined3d_device_uninit_3d(struct wined3d_device *device)
         return WINED3DERR_INVALIDCALL;
 
     if (wined3d_settings.cs_multithreaded)
-        device->cs->ops->submit_and_wait(device->cs);
+        wined3d_cs_emit_sync(device->cs);
 
     if (device->logo_texture)
         wined3d_texture_decref(device->logo_texture);
diff --git a/dlls/wined3d/surface.c b/dlls/wined3d/surface.c
index ac371a0fb35..66ffab0fbd2 100644
--- a/dlls/wined3d/surface.c
+++ b/dlls/wined3d/surface.c
@@ -4174,7 +4174,7 @@ HRESULT wined3d_surface_blt(struct wined3d_surface *dst_surface, const RECT *dst
         }
 
         wined3d_cs_emit_glfinish(device->cs);
-        device->cs->ops->submit_and_wait(device->cs);
+        wined3d_cs_emit_sync(device->cs);
 
         if (dst_sub_resource->map_count || (src_sub_resource && src_sub_resource->map_count))
         {
diff --git a/dlls/wined3d/swapchain.c b/dlls/wined3d/swapchain.c
index 17fdf13e7bb..02858afa08a 100644
--- a/dlls/wined3d/swapchain.c
+++ b/dlls/wined3d/swapchain.c
@@ -115,7 +115,7 @@ ULONG CDECL wined3d_swapchain_decref(struct wined3d_swapchain *swapchain)
         struct wined3d_device *device = swapchain->device;
 
         if (wined3d_settings.cs_multithreaded)
-            device->cs->ops->submit_and_wait(device->cs);
+            wined3d_cs_emit_sync(device->cs);
 
         swapchain_cleanup(swapchain);
         swapchain->parent_ops->wined3d_object_destroyed(swapchain->parent);
@@ -1316,7 +1316,7 @@ HRESULT CDECL wined3d_swapchain_resize_buffers(struct wined3d_swapchain *swapcha
         FIXME("Cannot change the back buffer count yet.\n");
 
     if (wined3d_settings.cs_multithreaded)
-        device->cs->ops->submit_and_wait(device->cs);
+        wined3d_cs_emit_sync(device->cs);
 
     if (!width || !height)
     {
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index e1fdaa6574b..8d0d591c62d 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3178,6 +3178,7 @@ struct wined3d_cs_block
     struct list entry;
     UINT pos;
     struct wined3d_cs_list *list;
+    BOOL *fence;
     BYTE data[0x4000]; /* FIXME? The size is somewhat arbitrary. */
 };
 
@@ -3312,6 +3313,7 @@ void wined3d_cs_emit_set_unordered_access_view(struct wined3d_cs *cs, unsigned i
 void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs,
         struct wined3d_vertex_declaration *declaration) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_viewport(struct wined3d_cs *cs, const struct wined3d_viewport *viewport) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_sync(struct wined3d_cs *cs);
 void wined3d_cs_emit_texture_add_dirty_region(struct wined3d_cs *cs, struct wined3d_texture *texture,
         unsigned int sub_resource_idx, const struct wined3d_box *dirty_region) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_unload_resource(struct wined3d_cs *cs, struct wined3d_resource *resource) DECLSPEC_HIDDEN;
-- 
2.11.0


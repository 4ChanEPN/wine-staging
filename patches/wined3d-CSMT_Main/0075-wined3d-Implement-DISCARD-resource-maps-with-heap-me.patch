From 490b534e7c3bb675d447aa86ddaa019c0eed28d8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20D=C3=B6singer?= <stefan@codeweavers.com>
Date: Fri, 27 Sep 2013 19:24:21 +0200
Subject: wined3d: Implement DISCARD resource maps with heap memory.

---
 dlls/wined3d/buffer.c          |  1 +
 dlls/wined3d/cs.c              |  6 ++++--
 dlls/wined3d/resource.c        |  4 +++-
 dlls/wined3d/texture.c         | 42 ++++++++++++++++++++++++++++++++++++++----
 dlls/wined3d/wined3d_private.h |  8 +++++---
 5 files changed, 51 insertions(+), 10 deletions(-)

diff --git a/dlls/wined3d/buffer.c b/dlls/wined3d/buffer.c
index 9a5d6c5..5b684cb 100644
--- a/dlls/wined3d/buffer.c
+++ b/dlls/wined3d/buffer.c
@@ -499,6 +499,7 @@ BYTE *buffer_get_sysmem(struct wined3d_buffer *buffer, struct wined3d_context *c
 
     if (!wined3d_resource_allocate_sysmem(&buffer->resource))
         ERR("Failed to allocate system memory.\n");
+    buffer->resource.heap_memory = buffer->resource.map_heap_memory;
 
     buffer_bind(buffer, context);
     GL_EXTCALL(glGetBufferSubData(buffer->buffer_type_hint, 0, buffer->resource.size, buffer->resource.heap_memory));
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 1f288e0..3fc1fce 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -414,6 +414,7 @@ struct wined3d_cs_texture_changed
     struct wined3d_texture *texture;
     unsigned int sub_resource_idx;
     struct wined3d_gl_bo *swap_buffer;
+    void *swap_heap_memory;
 };
 
 struct wined3d_cs_skip
@@ -2113,13 +2114,13 @@ static UINT wined3d_cs_exec_texture_changed(struct wined3d_cs *cs, const void *d
 {
     const struct wined3d_cs_texture_changed *op = data;
 
-    wined3d_texture_changed(op->texture, op->sub_resource_idx, op->swap_buffer);
+    wined3d_texture_changed(op->texture, op->sub_resource_idx, op->swap_buffer, op->swap_heap_memory);
 
     return sizeof(*op);
 }
 
 void wined3d_cs_emit_texture_changed(struct wined3d_cs *cs, struct wined3d_texture *texture,
-        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer)
+        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer, void *swap_heap_memory)
 {
     struct wined3d_cs_texture_changed *op;
 
@@ -2128,6 +2129,7 @@ void wined3d_cs_emit_texture_changed(struct wined3d_cs *cs, struct wined3d_textu
     op->texture = texture;
     op->sub_resource_idx = sub_resource_idx;
     op->swap_buffer = swap_buffer;
+    op->swap_heap_memory = swap_heap_memory;
 
     cs->ops->submit(cs, sizeof(*op));
 }
diff --git a/dlls/wined3d/resource.c b/dlls/wined3d/resource.c
index 7f80957..1029f12 100644
--- a/dlls/wined3d/resource.c
+++ b/dlls/wined3d/resource.c
@@ -213,6 +213,7 @@ HRESULT resource_init(struct wined3d_resource *resource, struct wined3d_device *
             ERR("Failed to allocate system memory.\n");
             return E_OUTOFMEMORY;
         }
+        resource->heap_memory = resource->map_heap_memory;
     }
     else
     {
@@ -241,6 +242,7 @@ static void wined3d_resource_destroy_object(void *object)
     struct wined3d_resource *resource = object;
 
     wined3d_resource_free_sysmem(resource);
+    resource->map_heap_memory = NULL;
     context_resource_released(resource->device, resource, resource->type);
     wined3d_resource_release(resource);
 }
@@ -342,7 +344,7 @@ BOOL wined3d_resource_allocate_sysmem(struct wined3d_resource *resource)
     p = (void **)(((ULONG_PTR)mem + align) & ~(RESOURCE_ALIGNMENT - 1)) - 1;
     *p = mem;
 
-    resource->heap_memory = ++p;
+    resource->map_heap_memory = ++p;
 
     return TRUE;
 }
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index df0cd21..bf142b4 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -104,6 +104,7 @@ static void wined3d_texture_evict_sysmem(struct wined3d_texture *texture)
         sub_resource->locations &= ~WINED3D_LOCATION_SYSMEM;
     }
     wined3d_resource_free_sysmem(&texture->resource);
+    texture->resource.map_heap_memory = NULL;
 }
 
 void wined3d_texture_validate_location(struct wined3d_texture *texture,
@@ -351,7 +352,10 @@ void wined3d_texture_get_memory(struct wined3d_texture *texture, unsigned int su
     }
     if (locations & WINED3D_LOCATION_SYSMEM)
     {
-        data->addr = texture->resource.heap_memory;
+        if (map)
+            data->addr = texture->resource.map_heap_memory;
+        else
+            data->addr = texture->resource.heap_memory;
         data->addr += sub_resource->offset;
         data->buffer_object = 0;
         return;
@@ -1262,6 +1266,7 @@ HRESULT CDECL wined3d_texture_update_desc(struct wined3d_texture *texture, UINT
     }
 
     wined3d_resource_free_sysmem(&texture->resource);
+    texture->resource.map_heap_memory = NULL;
 
     if ((texture->row_pitch = pitch))
         texture->slice_pitch = height * pitch;
@@ -1456,6 +1461,7 @@ BOOL wined3d_texture_prepare_location(struct wined3d_texture *texture, unsigned
                 ERR("Failed to allocate system memory.\n");
                 return FALSE;
             }
+            texture->resource.heap_memory = texture->resource.map_heap_memory;
             return TRUE;
 
         case WINED3D_LOCATION_USER_MEMORY:
@@ -1781,6 +1787,12 @@ void *wined3d_texture_map_internal(struct wined3d_texture *texture, unsigned int
                 ret = !!sub_resource->map_buffer;
                 break;
 
+            case WINED3D_LOCATION_SYSMEM:
+                if (!sub_resource_idx)
+                    wined3d_resource_allocate_sysmem(&texture->resource);
+                ret = !!texture->resource.heap_memory;
+                break;
+
             default:
                 ret = wined3d_texture_prepare_location(texture, sub_resource_idx,
                         context, texture->resource.map_binding);
@@ -1886,7 +1898,21 @@ static HRESULT texture_resource_sub_resource_map(struct wined3d_resource *resour
     if (flags & WINED3D_MAP_NOOVERWRITE)
         FIXME("WINED3D_MAP_NOOVERWRITE is not implemented yet.\n");
 
-    if (!(flags & WINED3D_MAP_DISCARD) || texture->resource.map_binding != WINED3D_LOCATION_BUFFER)
+    if (flags & WINED3D_MAP_DISCARD)
+    {
+        switch (resource->map_binding)
+        {
+            case WINED3D_LOCATION_BUFFER:
+            case WINED3D_LOCATION_SYSMEM:
+                break;
+
+            default:
+                FIXME("Implement discard maps with %s map binding.\n",
+                        wined3d_debug_location(texture->resource.map_binding));
+                wined3d_resource_wait_idle(&texture->resource);
+        }
+    }
+    else
         wined3d_resource_wait_idle(&texture->resource);
 
     base_memory = wined3d_cs_emit_texture_map(device->cs, texture, sub_resource_idx, flags);
@@ -1962,7 +1988,7 @@ void wined3d_texture_unmap_internal(struct wined3d_texture *texture, unsigned in
 }
 
 void wined3d_texture_changed(struct wined3d_texture *texture, unsigned int sub_resource_idx,
-        struct wined3d_gl_bo *swap_buffer)
+        struct wined3d_gl_bo *swap_buffer, void *swap_heap_memory)
 {
     struct wined3d_texture_sub_resource *sub_resource = &texture->sub_resources[sub_resource_idx];
 
@@ -1975,6 +2001,12 @@ void wined3d_texture_changed(struct wined3d_texture *texture, unsigned int sub_r
         sub_resource->buffer = swap_buffer;
     }
 
+    if (swap_heap_memory && swap_heap_memory != texture->resource.heap_memory && !sub_resource_idx)
+    {
+        wined3d_resource_free_sysmem(&texture->resource);
+        texture->resource.heap_memory = swap_heap_memory;
+    }
+
     wined3d_texture_invalidate_location(texture, sub_resource_idx, ~texture->resource.map_binding);
 }
 
@@ -2002,7 +2034,8 @@ static HRESULT texture_resource_sub_resource_unmap(struct wined3d_resource *reso
 
     if (sub_resource->unmap_dirtify)
     {
-        wined3d_cs_emit_texture_changed(device->cs, texture, sub_resource_idx, sub_resource->map_buffer);
+        wined3d_cs_emit_texture_changed(device->cs, texture, sub_resource_idx, sub_resource->map_buffer,
+                resource->map_heap_memory);
         sub_resource->unmap_dirtify = FALSE;
     }
 
@@ -2644,6 +2677,7 @@ static HRESULT volumetexture_init(struct wined3d_texture *texture, const struct
     if (wined3d_texture_use_pbo(texture, gl_info))
     {
         wined3d_resource_free_sysmem(&texture->resource);
+        texture->resource.map_heap_memory = NULL;
         texture->resource.map_binding = WINED3D_LOCATION_BUFFER;
     }
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 7899487..c690d2c 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -2594,7 +2594,7 @@ struct wined3d_resource
     UINT depth;
     UINT size;
     DWORD priority;
-    void *heap_memory;
+    void *heap_memory, *map_heap_memory;
     struct list resource_list_entry;
     LONG access_count;
 
@@ -2791,7 +2791,8 @@ void wined3d_texture_bind(struct wined3d_texture *texture,
 void wined3d_texture_bind_and_dirtify(struct wined3d_texture *texture,
         struct wined3d_context *context, BOOL srgb) DECLSPEC_HIDDEN;
 void wined3d_texture_changed(struct wined3d_texture *texture,
-        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer) DECLSPEC_HIDDEN;
+        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer,
+        void *swap_heap_memory) DECLSPEC_HIDDEN;
 BOOL wined3d_texture_check_block_align(const struct wined3d_texture *texture,
         unsigned int level, const struct wined3d_box *box) DECLSPEC_HIDDEN;
 GLenum wined3d_texture_get_gl_buffer(const struct wined3d_texture *texture) DECLSPEC_HIDDEN;
@@ -3170,7 +3171,8 @@ void wined3d_cs_emit_set_vertex_declaration(struct wined3d_cs *cs,
         struct wined3d_vertex_declaration *declaration) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_set_viewport(struct wined3d_cs *cs, const struct wined3d_viewport *viewport) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_changed(struct wined3d_cs *cs, struct wined3d_texture *texture,
-        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer) DECLSPEC_HIDDEN;
+        unsigned int sub_resource_idx, struct wined3d_gl_bo *swap_buffer,
+        void *swap_heap_memory) DECLSPEC_HIDDEN;
 void *wined3d_cs_emit_texture_map(struct wined3d_cs *cs, struct wined3d_texture *texture,
         unsigned int sub_resource_idx, DWORD flags) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_texture_preload(struct wined3d_cs *cs, struct wined3d_texture *texture) DECLSPEC_HIDDEN;
-- 
2.9.0


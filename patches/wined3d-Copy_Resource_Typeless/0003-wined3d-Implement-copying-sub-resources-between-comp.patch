From ee5dba7ce1957961af9bfcebf0f797debbc41d3a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sun, 9 Jul 2017 01:04:33 +0200
Subject: wined3d: Implement copying sub resources between compatible formats.

---
 dlls/d3d11/tests/d3d11.c       |   2 +-
 dlls/wined3d/cs.c              | 156 +++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/device.c          |   9 ++-
 dlls/wined3d/directx.c         |   4 ++
 dlls/wined3d/wined3d_gl.h      |   1 +
 dlls/wined3d/wined3d_private.h |   3 +
 6 files changed, 171 insertions(+), 4 deletions(-)

diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index 155b8642d04..e2ef854b0aa 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -10116,7 +10116,7 @@ static void test_copy_subresource_region(void)
             for (j = 0; j < min(level_src_height, level_dst_height); j++)
             {
                 c_result = (DWORD*)((char*)map_desc.pData + j * map_desc.RowPitch);
-                todo_wine ok(c_result[i] == c_expected[j * level_src_width + i],
+                ok(c_result[i] == c_expected[j * level_src_width + i],
                    "Got unexpected color 0x%08x at (%u, %u), expected 0x%08x for test %u.\n",
                    c_result[i], i, j, c_expected[j * level_src_width + i], k);
             }
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index c7df670682d..88dbedd8d89 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -70,6 +70,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_UPDATE_SUB_RESOURCE,
     WINED3D_CS_OP_ADD_DIRTY_TEXTURE_REGION,
     WINED3D_CS_OP_CLEAR_UNORDERED_ACCESS_VIEW,
+    WINED3D_CS_OP_COPY_SUB_RESOURCE,
     WINED3D_CS_OP_STOP,
 };
 
@@ -418,6 +419,17 @@ struct wined3d_cs_clear_unordered_access_view
     struct wined3d_uvec4 clear_value;
 };
 
+struct wined3d_cs_copy_sub_resource
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_resource *dst_resource;
+    unsigned int dst_sub_resource_idx;
+    struct wined3d_box dst_box;
+    struct wined3d_resource *src_resource;
+    unsigned int src_sub_resource_idx;
+    struct wined3d_box src_box;
+};
+
 struct wined3d_cs_stop
 {
     enum wined3d_cs_op opcode;
@@ -2227,6 +2239,149 @@ void wined3d_cs_emit_clear_unordered_access_view_uint(struct wined3d_cs *cs,
     cs->ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
 }
 
+static void wined3d_cs_exec_copy_sub_resource(struct wined3d_cs *cs, const void *data)
+{
+    struct wined3d_cs_copy_sub_resource *op = (void*)data;
+
+    if (op->dst_resource->type == WINED3D_RTYPE_BUFFER)
+    {
+        if (FAILED(wined3d_buffer_copy(buffer_from_resource(op->dst_resource), op->dst_box.left,
+                buffer_from_resource(op->src_resource), op->src_box.left,
+                op->src_box.right - op->src_box.left)))
+            ERR("Failed to copy buffer.\n");
+    }
+    else if (op->dst_resource->type == WINED3D_RTYPE_TEXTURE_1D ||
+            op->dst_resource->type == WINED3D_RTYPE_TEXTURE_2D ||
+            op->dst_resource->type == WINED3D_RTYPE_TEXTURE_3D)
+    {
+        struct wined3d_texture *dst_texture, *src_texture;
+        struct gl_texture *gl_tex_src, *gl_tex_dst;
+        unsigned int update_w, update_h, update_d;
+        const struct wined3d_gl_info *gl_info;
+        unsigned int src_level, src_layer;
+        unsigned int dst_level, dst_layer;
+        struct wined3d_context *context;
+        BOOL partial_update = FALSE;
+
+        update_w = op->dst_box.right - op->dst_box.left;
+        update_h = op->dst_box.bottom - op->dst_box.top;
+        update_d = op->dst_box.back - op->dst_box.front;
+
+        dst_texture = texture_from_resource(op->dst_resource);
+        src_texture = texture_from_resource(op->src_resource);
+
+        context = context_acquire(cs->device, NULL, 0);
+        gl_info = context->gl_info;
+
+        if (!wined3d_texture_load_location(src_texture, op->src_sub_resource_idx, context, WINED3D_LOCATION_TEXTURE_RGB))
+        {
+            FIXME("Failed to load source sub-resource into WINED3D_LOCATION_TEXTURE_RGB.\n");
+            context_release(context);
+            goto error;
+        }
+
+        src_level = op->src_sub_resource_idx % src_texture->level_count;
+        src_layer = op->src_sub_resource_idx / src_texture->level_count;
+        dst_level = op->dst_sub_resource_idx % dst_texture->level_count;
+        dst_layer = op->dst_sub_resource_idx / dst_texture->level_count;
+
+        switch (op->dst_resource->type)
+        {
+            case WINED3D_RTYPE_TEXTURE_3D:
+                partial_update |= (update_d != wined3d_texture_get_level_depth(dst_texture, dst_level));
+            case WINED3D_RTYPE_TEXTURE_2D:
+                partial_update |= (update_h != wined3d_texture_get_level_height(dst_texture, dst_level));
+            case WINED3D_RTYPE_TEXTURE_1D:
+                partial_update |= (update_w != wined3d_texture_get_level_width(dst_texture, dst_level));
+            default:
+                break;
+        }
+
+        if (!partial_update)
+        {
+            wined3d_texture_prepare_texture(dst_texture, context, FALSE);
+        }
+        else if (!wined3d_texture_load_location(dst_texture, op->dst_sub_resource_idx, context, WINED3D_LOCATION_TEXTURE_RGB))
+        {
+            FIXME("Failed to load destination sub-resource.\n");
+            context_release(context);
+            goto error;
+        }
+
+        switch (op->dst_resource->type)
+        {
+            case WINED3D_RTYPE_TEXTURE_1D:
+                op->src_box.top = src_layer;
+                op->dst_box.top = dst_layer;
+                break;
+            case WINED3D_RTYPE_TEXTURE_2D:
+                op->src_box.front = src_layer;
+                op->dst_box.front = dst_layer;
+                break;
+            default:
+                break;
+        }
+
+        gl_tex_src = wined3d_texture_get_gl_texture(src_texture, FALSE);
+        gl_tex_dst = wined3d_texture_get_gl_texture(dst_texture, FALSE);
+
+        GL_EXTCALL(glCopyImageSubData(gl_tex_src->name, src_texture->target, src_level,
+                op->src_box.left, op->src_box.top, op->src_box.front,
+                gl_tex_dst->name, dst_texture->target, dst_level,
+                op->dst_box.left, op->dst_box.top, op->dst_box.front,
+                update_w, update_h, update_d));
+        checkGLcall("Copy texture content");
+
+        wined3d_texture_validate_location(dst_texture, op->dst_sub_resource_idx, WINED3D_LOCATION_TEXTURE_RGB);
+        wined3d_texture_invalidate_location(dst_texture, op->dst_sub_resource_idx, ~WINED3D_LOCATION_TEXTURE_RGB);
+
+        context_release(context);
+    }
+    else
+    {
+        FIXME("Not implemented for %s resources.\n", debug_d3dresourcetype(op->dst_resource->type));
+    }
+
+error:
+    wined3d_resource_release(op->src_resource);
+    wined3d_resource_release(op->dst_resource);
+}
+
+void wined3d_cs_emit_copy_sub_resource(struct wined3d_cs *cs, struct wined3d_resource *dst_resource,
+        unsigned int dst_sub_resource_idx, const struct wined3d_box *dst_box, struct wined3d_resource *src_resource,
+        unsigned int src_sub_resource_idx, const struct wined3d_box *src_box)
+{
+    const struct wined3d_gl_info *gl_info = &cs->device->adapter->gl_info;
+    struct wined3d_cs_blt_sub_resource *op;
+
+    if (!gl_info->supported[ARB_TEXTURE_VIEW] && src_resource->format->id != dst_resource->format->id)
+    {
+        FIXME("ARB_TEXTURE_VIEW not supported, cannot copy sub-resource.\n");
+        return;
+    }
+
+    if (!gl_info->supported[ARB_COPY_IMAGE])
+    {
+        wined3d_cs_emit_blt_sub_resource(cs, dst_resource, dst_sub_resource_idx, dst_box,
+                src_resource, src_sub_resource_idx, src_box, 0, NULL, WINED3D_TEXF_POINT);
+        return;
+    }
+
+    op = cs->ops->require_space(cs, sizeof(*op), WINED3D_CS_QUEUE_DEFAULT);
+    op->opcode = WINED3D_CS_OP_COPY_SUB_RESOURCE;
+    op->dst_resource = dst_resource;
+    op->dst_sub_resource_idx = dst_sub_resource_idx;
+    op->dst_box = *dst_box;
+    op->src_resource = src_resource;
+    op->src_sub_resource_idx = src_sub_resource_idx;
+    op->src_box = *src_box;
+
+    wined3d_resource_acquire(dst_resource);
+    wined3d_resource_acquire(src_resource);
+
+    cs->ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
+}
+
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
 {
     struct wined3d_cs_stop *op;
@@ -2284,6 +2439,7 @@ static void (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_UPDATE_SUB_RESOURCE         */ wined3d_cs_exec_update_sub_resource,
     /* WINED3D_CS_OP_ADD_DIRTY_TEXTURE_REGION    */ wined3d_cs_exec_add_dirty_texture_region,
     /* WINED3D_CS_OP_CLEAR_UNORDERED_ACCESS_VIEW */ wined3d_cs_exec_clear_unordered_access_view,
+    /* WINED3D_CS_OP_COPY_SUB_RESOURCE           */ wined3d_cs_exec_copy_sub_resource,
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_cs *cs, size_t size, enum wined3d_cs_queue_id queue_id)
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 3d12e417a43..43b88913e55 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -4062,7 +4062,10 @@ HRESULT CDECL wined3d_device_copy_sub_resource_region(struct wined3d_device *dev
         return WINED3DERR_INVALIDCALL;
     }
 
-    if (src_resource->format->id != dst_resource->format->id)
+    if (src_resource->format->id != dst_resource->format->id &&
+            (src_resource->format->typeless_id != dst_resource->format->typeless_id ||
+            src_resource->format->gl_view_class != dst_resource->format->gl_view_class ||
+            !src_resource->format->typeless_id))
     {
         WARN("Resource formats (%s / %s) don't match.\n",
                 debug_d3dformat(dst_resource->format->id),
@@ -4164,8 +4167,8 @@ HRESULT CDECL wined3d_device_copy_sub_resource_region(struct wined3d_device *dev
         return WINED3DERR_INVALIDCALL;
     }
 
-    wined3d_cs_emit_blt_sub_resource(device->cs, dst_resource, dst_sub_resource_idx, &dst_box,
-            src_resource, src_sub_resource_idx, src_box, 0, NULL, WINED3D_TEXF_POINT);
+    wined3d_cs_emit_copy_sub_resource(device->cs, dst_resource, dst_sub_resource_idx, &dst_box,
+            src_resource, src_sub_resource_idx, src_box);
 
     return WINED3D_OK;
 }
diff --git a/dlls/wined3d/directx.c b/dlls/wined3d/directx.c
index b18d1aa3619..8a03dd5913f 100644
--- a/dlls/wined3d/directx.c
+++ b/dlls/wined3d/directx.c
@@ -116,6 +116,7 @@ static const struct wined3d_extension_map gl_extension_map[] =
     {"GL_ARB_color_buffer_float",           ARB_COLOR_BUFFER_FLOAT        },
     {"GL_ARB_compute_shader",               ARB_COMPUTE_SHADER            },
     {"GL_ARB_copy_buffer",                  ARB_COPY_BUFFER               },
+    {"GL_ARB_copy_image",                   ARB_COPY_IMAGE                },
     {"GL_ARB_debug_output",                 ARB_DEBUG_OUTPUT              },
     {"GL_ARB_depth_buffer_float",           ARB_DEPTH_BUFFER_FLOAT        },
     {"GL_ARB_depth_clamp",                  ARB_DEPTH_CLAMP               },
@@ -2700,6 +2701,8 @@ static void load_gl_funcs(struct wined3d_gl_info *gl_info)
     USE_GL_FUNC(glDispatchComputeIndirect)
     /* GL_ARB_copy_buffer */
     USE_GL_FUNC(glCopyBufferSubData)
+    /* GL_ARB_copy_image */
+    USE_GL_FUNC(glCopyImageSubData)
     /* GL_ARB_debug_output */
     USE_GL_FUNC(glDebugMessageCallbackARB)
     USE_GL_FUNC(glDebugMessageControlARB)
@@ -3884,6 +3887,7 @@ static BOOL wined3d_adapter_init_gl_caps(struct wined3d_adapter *adapter,
 
         {ARB_CLEAR_BUFFER_OBJECT,          MAKEDWORD_VERSION(4, 3)},
         {ARB_COMPUTE_SHADER,               MAKEDWORD_VERSION(4, 3)},
+        {ARB_COPY_IMAGE,                   MAKEDWORD_VERSION(4, 3)},
         {ARB_DEBUG_OUTPUT,                 MAKEDWORD_VERSION(4, 3)},
         {ARB_ES3_COMPATIBILITY,            MAKEDWORD_VERSION(4, 3)},
         {ARB_FRAGMENT_LAYER_VIEWPORT,      MAKEDWORD_VERSION(4, 3)},
diff --git a/dlls/wined3d/wined3d_gl.h b/dlls/wined3d/wined3d_gl.h
index 05558760850..a743ad20316 100644
--- a/dlls/wined3d/wined3d_gl.h
+++ b/dlls/wined3d/wined3d_gl.h
@@ -50,6 +50,7 @@ enum wined3d_gl_extension
     ARB_COLOR_BUFFER_FLOAT,
     ARB_COMPUTE_SHADER,
     ARB_COPY_BUFFER,
+    ARB_COPY_IMAGE,
     ARB_DEBUG_OUTPUT,
     ARB_DEPTH_BUFFER_FLOAT,
     ARB_DEPTH_CLAMP,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 1025c98f180..7d2bdf45e52 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3478,6 +3478,9 @@ void wined3d_cs_emit_unload_resource(struct wined3d_cs *cs, struct wined3d_resou
 void wined3d_cs_emit_update_sub_resource(struct wined3d_cs *cs, struct wined3d_resource *resource,
         unsigned int sub_resource_idx, const struct wined3d_box *box, const void *data, unsigned int row_pitch,
         unsigned int slice_pitch) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_copy_sub_resource(struct wined3d_cs *cs, struct wined3d_resource *dst_resource,
+        unsigned int dst_sub_resource_idx, const struct wined3d_box *dst_box, struct wined3d_resource *src_resource,
+        unsigned int src_sub_resource_idx, const struct wined3d_box *src_box) DECLSPEC_HIDDEN;
 void wined3d_cs_init_object(struct wined3d_cs *cs,
         void (*callback)(void *object), void *object) DECLSPEC_HIDDEN;
 HRESULT wined3d_cs_map(struct wined3d_cs *cs, struct wined3d_resource *resource, unsigned int sub_resource_idx,
-- 
2.13.1


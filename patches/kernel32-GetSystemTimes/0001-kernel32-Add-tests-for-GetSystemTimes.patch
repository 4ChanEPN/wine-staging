From 15dc0e88f4fcd63c876d9037204074ed7506dd51 Mon Sep 17 00:00:00 2001
From: Louis Lenders <xerox_xerox2000@yahoo.co.uk>
Date: Sun, 27 Jul 2014 11:42:28 -0600
Subject: kernel32: Add tests for GetSystemTimes.

---
 dlls/kernel32/tests/time.c | 76 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 76 insertions(+)

diff --git a/dlls/kernel32/tests/time.c b/dlls/kernel32/tests/time.c
index 55d4be9..c524343 100644
--- a/dlls/kernel32/tests/time.c
+++ b/dlls/kernel32/tests/time.c
@@ -22,9 +22,11 @@
 #include "wine/test.h"
 #include "winbase.h"
 #include "winnls.h"
+#include "winternl.h"
 
 static BOOL (WINAPI *pTzSpecificLocalTimeToSystemTime)(LPTIME_ZONE_INFORMATION, LPSYSTEMTIME, LPSYSTEMTIME);
 static BOOL (WINAPI *pSystemTimeToTzSpecificLocalTime)(LPTIME_ZONE_INFORMATION, LPSYSTEMTIME, LPSYSTEMTIME);
+static BOOL (WINAPI *pGetSystemTimes)(LPFILETIME, LPFILETIME, LPFILETIME);
 static int (WINAPI *pGetCalendarInfoA)(LCID,CALID,CALTYPE,LPSTR,int,LPDWORD);
 static int (WINAPI *pGetCalendarInfoW)(LCID,CALID,CALTYPE,LPWSTR,int,LPDWORD);
 
@@ -732,12 +734,85 @@ static void test_GetCalendarInfo(void)
     ok( ret == ret2, "got %d, expected %d\n", ret, ret2 );
 
 }
+static void test_GetSystemTimes(void)
+{
+
+    FILETIME idletime, kerneltime, usertime;
+    int i;
+    ULARGE_INTEGER ul1, ul2, ul3;
+    SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION *sppi;
+    SYSTEM_BASIC_INFORMATION sbi;
+    ULONG ReturnLength;
+    double total_usertime = 0.0, total_kerneltime = 0.0, total_idletime = 0.0;
+
+    if (!pGetSystemTimes)
+    {
+        win_skip("GetSystemTimes not available\n");
+        return;
+    }
+
+    todo_wine ok( pGetSystemTimes(NULL, NULL, NULL), "GetSystemTimes failed unexpectedly\n" );
+
+    memset( &idletime, 0x11, sizeof(idletime) );
+    memset( &kerneltime, 0x11, sizeof(kerneltime) );
+    memset( &usertime, 0x11, sizeof(usertime) );
+    todo_wine ok( pGetSystemTimes(&idletime, &kerneltime , &usertime),
+                  "GetSystemTimes failed unexpectedly\n" );
+
+    ul1.LowPart = idletime.dwLowDateTime;
+    ul1.HighPart = idletime.dwHighDateTime;
+
+    trace( "IdleTime:   %f seconds\n", (double)ul1.QuadPart/10000000.0 );
+
+    ul2.LowPart = kerneltime.dwLowDateTime;
+    ul2.HighPart = kerneltime.dwHighDateTime;
+
+    trace( "KernelTime: %f seconds\n", (double)ul2.QuadPart/10000000.0 );
+
+    ul3.LowPart = usertime.dwLowDateTime;
+    ul3.HighPart = usertime.dwHighDateTime;
+
+    trace( "UserTime:   %f seconds\n", (double)ul3.QuadPart/10000000.0 );
+
+    ok( !NtQuerySystemInformation(SystemBasicInformation, &sbi, sizeof(sbi), &ReturnLength),
+                                  "NtQuerySystemInformation failed\n" );
+    ok( sizeof(sbi) == ReturnLength, "Inconsistent length %d\n", ReturnLength );
+
+    /* Check if we have some return values */
+    trace( "Number of Processors : %d\n", sbi.NumberOfProcessors );
+    ok( sbi.NumberOfProcessors > 0, "Expected more than 0 processors, got %d\n",
+        sbi.NumberOfProcessors );
+
+    sppi = HeapAlloc( GetProcessHeap(), 0,
+                      sizeof(SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION) * sbi.NumberOfProcessors);
+
+    ok( !NtQuerySystemInformation( SystemProcessorPerformanceInformation, sppi,
+                                   sizeof(*sppi), &ReturnLength),
+                                   "NtQuerySystemInformation failed\n" );
+
+    for (i = 0; i < sbi.NumberOfProcessors; i++)
+    {
+        total_usertime += (double)(sppi[i].UserTime.QuadPart)/10000000.0;
+        total_kerneltime += (double)(sppi[i].KernelTime.QuadPart)/10000000.0;
+        total_idletime += (double)(sppi[i].IdleTime.QuadPart)/10000000.0;
+    }
+
+    trace( "total_idletime %f total_kerneltime %f total_usertime %f \n", total_idletime,
+          total_kerneltime, total_usertime );
+
+    todo_wine ok( (total_idletime - (double)ul1.QuadPart/10000000.0) < 1.0, "test idletime failed\n" );
+    todo_wine ok( (total_kerneltime - (double)ul2.QuadPart/10000000.0) < 1.0, "test kerneltime failed\n" );
+    todo_wine ok( (total_usertime - (double)ul3.QuadPart/10000000.0) < 1.0, "test usertime failed\n" );
+
+    HeapFree(GetProcessHeap(), 0, sppi);
+}
 
 START_TEST(time)
 {
     HMODULE hKernel = GetModuleHandleA("kernel32");
     pTzSpecificLocalTimeToSystemTime = (void *)GetProcAddress(hKernel, "TzSpecificLocalTimeToSystemTime");
     pSystemTimeToTzSpecificLocalTime = (void *)GetProcAddress( hKernel, "SystemTimeToTzSpecificLocalTime");
+    pGetSystemTimes = (void *)GetProcAddress( hKernel, "GetSystemTimes");
     pGetCalendarInfoA = (void *)GetProcAddress(hKernel, "GetCalendarInfoA");
     pGetCalendarInfoW = (void *)GetProcAddress(hKernel, "GetCalendarInfoW");
 
@@ -747,6 +822,7 @@ START_TEST(time)
     test_FileTimeToSystemTime();
     test_FileTimeToLocalFileTime();
     test_TzSpecificLocalTimeToSystemTime();
+    test_GetSystemTimes();
     test_FileTimeToDosDateTime();
     test_GetCalendarInfo();
 }
-- 
2.1.0


From 39f5ce02a6524f23dbc4d8ea6dc602e9e47e15c6 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 21 Oct 2015 18:53:58 +0200
Subject: ntdll: Block signals while executing system APCs.

---
 dlls/ntdll/server.c | 48 ++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 40 insertions(+), 8 deletions(-)

diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
index 7d8d1e9..1173f4d 100644
--- a/dlls/ntdll/server.c
+++ b/dlls/ntdll/server.c
@@ -371,13 +371,30 @@ static int wait_select_reply( void *cookie )
 
 
 /***********************************************************************
+ *              is_system_apc
+ *
+ * Checks if an APC call is a system APC.
+ */
+static BOOL is_system_apc( const apc_call_t *call )
+{
+    switch (call->type)
+    {
+        case APC_USER:
+        case APC_TIMER:
+            return FALSE;
+        default:
+            return TRUE;
+    }
+}
+
+
+/***********************************************************************
  *              invoke_apc
  *
- * Invoke a single APC. Return TRUE if a user APC has been run.
+ * Invoke a single APC.
  */
-static BOOL invoke_apc( const apc_call_t *call, apc_result_t *result )
+static void invoke_apc( const apc_call_t *call, apc_result_t *result )
 {
-    BOOL user_apc = FALSE;
     SIZE_T size;
     void *addr;
 
@@ -391,7 +408,6 @@ static BOOL invoke_apc( const apc_call_t *call, apc_result_t *result )
     {
         void (WINAPI *func)(ULONG_PTR,ULONG_PTR,ULONG_PTR) = wine_server_get_ptr( call->user.func );
         func( call->user.args[0], call->user.args[1], call->user.args[2] );
-        user_apc = TRUE;
         break;
     }
     case APC_TIMER:
@@ -399,7 +415,6 @@ static BOOL invoke_apc( const apc_call_t *call, apc_result_t *result )
         void (WINAPI *func)(void*, unsigned int, unsigned int) = wine_server_get_ptr( call->timer.func );
         func( wine_server_get_ptr( call->timer.arg ),
               (DWORD)call->timer.time, (DWORD)(call->timer.time >> 32) );
-        user_apc = TRUE;
         break;
     }
     case APC_ASYNC_IO:
@@ -574,7 +589,6 @@ static BOOL invoke_apc( const apc_call_t *call, apc_result_t *result )
         server_protocol_error( "get_apc_request: bad type %d\n", call->type );
         break;
     }
-    return user_apc;
 }
 
 
@@ -590,10 +604,12 @@ unsigned int server_select( const select_op_t *select_op, data_size_t size, UINT
     obj_handle_t apc_handle = 0;
     apc_call_t call;
     apc_result_t result;
+    sigset_t old_set;
     timeout_t abs_timeout = timeout ? timeout->QuadPart : TIMEOUT_INFINITE;
 
     memset( &result, 0, sizeof(result) );
 
+    pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
     for (;;)
     {
         SERVER_START_REQ( select )
@@ -610,10 +626,25 @@ unsigned int server_select( const select_op_t *select_op, data_size_t size, UINT
             call        = reply->call;
         }
         SERVER_END_REQ;
-        if (ret == STATUS_PENDING) ret = wait_select_reply( &cookie );
+        if (ret == STATUS_PENDING)
+        {
+            pthread_sigmask( SIG_SETMASK, &old_set, NULL );
+            ret = wait_select_reply( &cookie );
+            pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
+        }
         if (ret != STATUS_USER_APC) break;
-        if (invoke_apc( &call, &result ))
+
+        if (is_system_apc( &call ))
         {
+            /* execute system APC without releasing the lock */
+            invoke_apc( &call, &result );
+        }
+        else
+        {
+            pthread_sigmask( SIG_SETMASK, &old_set, NULL );
+            invoke_apc( &call, &result );
+            pthread_sigmask( SIG_BLOCK, &server_block_set, &old_set );
+
             /* if we ran a user apc, we have to check once more if
              * additional apcs are queued, but we don't want to wait */
             abs_timeout = 0;
@@ -625,6 +656,7 @@ unsigned int server_select( const select_op_t *select_op, data_size_t size, UINT
         if (size >= sizeof(select_op->signal_and_wait) && select_op->op == SELECT_SIGNAL_AND_WAIT)
             size = offsetof( select_op_t, signal_and_wait.signal );
     }
+    pthread_sigmask( SIG_SETMASK, &old_set, NULL );
 
     if (ret == STATUS_TIMEOUT && user_apc) ret = STATUS_USER_APC;
 
-- 
2.6.1


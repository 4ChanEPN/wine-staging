From 175a4595dc5d24c586d6715a3ba8c90b094e26b4 Mon Sep 17 00:00:00 2001
From: Jactry Zeng <wine@jactry.com>
Date: Mon, 11 Aug 2014 13:51:55 +0800
Subject: riched20: Stub for ITextFont interface and implement
 ITextRange::GetFont and ITextSelection::GetFont.

---
 dlls/riched20/richole.c       | 351 +++++++++++++++++++++++++++++++++++++++---
 dlls/riched20/tests/richole.c |  93 +++++++++++
 2 files changed, 424 insertions(+), 20 deletions(-)

diff --git a/dlls/riched20/richole.c b/dlls/riched20/richole.c
index 55dda9b..d5ecf52 100644
--- a/dlls/riched20/richole.c
+++ b/dlls/riched20/richole.c
@@ -51,6 +51,7 @@ DEFINE_GUID(IID_ITextPara, 0x8cc497c4, 0xa1df, 0x11ce, 0x80, 0x98, 0x00, 0xaa, 0
 typedef struct ITextSelectionImpl ITextSelectionImpl;
 typedef struct IOleClientSiteImpl IOleClientSiteImpl;
 typedef struct ITextRangeImpl ITextRangeImpl;
+typedef struct ITextFontImpl ITextFontImpl;
 
 typedef struct IRichEditOleImpl {
     IUnknown IUnknown_inner;
@@ -63,6 +64,7 @@ typedef struct IRichEditOleImpl {
     ITextSelectionImpl *txtSel;
     IOleClientSiteImpl *clientSite;
     struct list rangelist;
+    struct list fontlist;
 } IRichEditOleImpl;
 
 struct ITextRangeImpl {
@@ -84,8 +86,11 @@ struct ITextSelectionImpl {
 typedef struct ITextFontImpl {
     ITextFont ITextFont_iface;
     LONG ref;
+    struct list entry;
 
-    ITextRange *range;
+    IRichEditOleImpl *reOle;
+    ITextRangeImpl *txtRge;
+    ITextSelectionImpl *txtSel;
 } ITextFontImpl;
 
 typedef struct ITextParaImpl {
@@ -144,7 +149,7 @@ static inline ITextParaImpl *impl_from_ITextPara(ITextPara *iface)
     return CONTAINING_RECORD(iface, ITextParaImpl, ITextPara_iface);
 }
 
-static HRESULT create_textfont(ITextRange*, ITextFont**);
+static HRESULT create_textfont(IRichEditOleImpl *, ITextFontImpl **);
 static HRESULT create_textpara(ITextRange*, ITextPara**);
 
 static HRESULT WINAPI IRichEditOleImpl_inner_fnQueryInterface(IUnknown *iface, REFIID riid, LPVOID *ppvObj)
@@ -190,6 +195,7 @@ static ULONG WINAPI IRichEditOleImpl_inner_fnRelease(IUnknown *iface)
     if (!ref)
     {
         ITextRangeImpl *txtRge;
+        ITextFontImpl *txtFont;
 
         TRACE("Destroying %p\n", This);
         This->txtSel->reOle = NULL;
@@ -198,6 +204,8 @@ static ULONG WINAPI IRichEditOleImpl_inner_fnRelease(IUnknown *iface)
         IOleClientSite_Release(&This->clientSite->IOleClientSite_iface);
         LIST_FOR_EACH_ENTRY(txtRge, &This->rangelist, ITextRangeImpl, entry)
             txtRge->reOle = NULL;
+        LIST_FOR_EACH_ENTRY(txtFont, &This->fontlist, ITextFontImpl, entry)
+            txtFont->reOle = NULL;
         heap_free(This);
     }
     return ref;
@@ -978,6 +986,8 @@ static HRESULT WINAPI ITextRange_fnSetEnd(ITextRange *me, LONG end)
 static HRESULT WINAPI ITextRange_fnGetFont(ITextRange *me, ITextFont **font)
 {
     ITextRangeImpl *This = impl_from_ITextRange(me);
+    ITextFontImpl *txtFont = NULL;
+    HRESULT hres;
 
     TRACE("(%p)->(%p)\n", This, font);
 
@@ -987,7 +997,16 @@ static HRESULT WINAPI ITextRange_fnGetFont(ITextRange *me, ITextFont **font)
     if (!font)
         return E_INVALIDARG;
 
-    return create_textfont(me, font);
+    *font = NULL;
+    hres = create_textfont(This->reOle, &txtFont);
+    if (!hres)
+    {
+        txtFont->txtSel = NULL;
+        txtFont->txtRge = This;
+        ITextRange_AddRef(me);
+        *font = &txtFont->ITextFont_iface;
+    }
+    return hres;
 }
 
 static HRESULT WINAPI ITextRange_fnSetFont(ITextRange *me, ITextFont *pFont)
@@ -1511,7 +1530,14 @@ static ULONG WINAPI TextFont_Release(ITextFont *iface)
 
     if (!ref)
     {
-        ITextRange_Release(This->range);
+        if (This->txtRge)
+            ITextRange_Release(&This->txtRge->ITextRange_iface);
+        else
+            ITextSelection_Release(&This->txtSel->ITextSelection_iface);
+        This->reOle = NULL;
+        This->txtRge = NULL;
+        This->txtSel = NULL;
+        list_remove(&This->entry);
         heap_free(This);
     }
 
@@ -1520,7 +1546,12 @@ static ULONG WINAPI TextFont_Release(ITextFont *iface)
 
 static HRESULT WINAPI TextFont_GetTypeInfoCount(ITextFont *iface, UINT *pctinfo)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     *pctinfo = 0;
     return E_NOTIMPL;
 }
@@ -1528,14 +1559,24 @@ static HRESULT WINAPI TextFont_GetTypeInfoCount(ITextFont *iface, UINT *pctinfo)
 static HRESULT WINAPI TextFont_GetTypeInfo(ITextFont *iface, UINT iTInfo, LCID lcid,
     ITypeInfo **ppTInfo)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
 static HRESULT WINAPI TextFont_GetIDsOfNames(ITextFont *iface, REFIID riid,
     LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1550,7 +1591,12 @@ static HRESULT WINAPI TextFont_Invoke(
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1558,6 +1604,10 @@ static HRESULT WINAPI TextFont_GetDuplicate(ITextFont *iface, ITextFont **ret)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1565,6 +1615,10 @@ static HRESULT WINAPI TextFont_SetDuplicate(ITextFont *iface, ITextFont *pFont)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, pFont);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1572,6 +1626,10 @@ static HRESULT WINAPI TextFont_CanChange(ITextFont *iface, LONG *ret)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1579,6 +1637,10 @@ static HRESULT WINAPI TextFont_IsEqual(ITextFont *iface, ITextFont *font, LONG *
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1586,6 +1648,10 @@ static HRESULT WINAPI TextFont_Reset(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p): stub\n", This);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1593,6 +1659,10 @@ static HRESULT WINAPI TextFont_GetStyle(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1600,6 +1670,10 @@ static HRESULT WINAPI TextFont_SetStyle(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1607,6 +1681,10 @@ static HRESULT WINAPI TextFont_GetAllCaps(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1614,6 +1692,10 @@ static HRESULT WINAPI TextFont_SetAllCaps(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1621,6 +1703,10 @@ static HRESULT WINAPI TextFont_GetAnimation(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1628,6 +1714,10 @@ static HRESULT WINAPI TextFont_SetAnimation(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1635,6 +1725,10 @@ static HRESULT WINAPI TextFont_GetBackColor(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1642,6 +1736,10 @@ static HRESULT WINAPI TextFont_SetBackColor(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1649,13 +1747,24 @@ static HRESULT WINAPI TextFont_GetBold(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetBold(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1663,6 +1772,10 @@ static HRESULT WINAPI TextFont_GetEmboss(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1670,6 +1783,10 @@ static HRESULT WINAPI TextFont_SetEmboss(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1677,13 +1794,24 @@ static HRESULT WINAPI TextFont_GetForeColor(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomAutoColor;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetForeColor(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1691,6 +1819,10 @@ static HRESULT WINAPI TextFont_GetHidden(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1698,6 +1830,10 @@ static HRESULT WINAPI TextFont_SetHidden(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1705,6 +1841,10 @@ static HRESULT WINAPI TextFont_GetEngrave(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1712,6 +1852,10 @@ static HRESULT WINAPI TextFont_SetEngrave(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1719,13 +1863,24 @@ static HRESULT WINAPI TextFont_GetItalic(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetItalic(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1733,6 +1888,10 @@ static HRESULT WINAPI TextFont_GetKerning(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1740,6 +1899,10 @@ static HRESULT WINAPI TextFont_SetKerning(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1747,6 +1910,10 @@ static HRESULT WINAPI TextFont_GetLanguageID(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1754,20 +1921,37 @@ static HRESULT WINAPI TextFont_SetLanguageID(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
 static HRESULT WINAPI TextFont_GetName(ITextFont *iface, BSTR *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
+    static const WCHAR font[] = {'S', 'y', 's', 't', 'e', 'm', 0};
+
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = SysAllocString(font);
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetName(ITextFont *iface, BSTR value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%s): stub\n", This, debugstr_w(value));
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1775,6 +1959,10 @@ static HRESULT WINAPI TextFont_GetOutline(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1782,6 +1970,10 @@ static HRESULT WINAPI TextFont_SetOutline(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1789,6 +1981,10 @@ static HRESULT WINAPI TextFont_GetPosition(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1796,6 +1992,10 @@ static HRESULT WINAPI TextFont_SetPosition(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1803,6 +2003,10 @@ static HRESULT WINAPI TextFont_GetProtected(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1810,6 +2014,10 @@ static HRESULT WINAPI TextFont_SetProtected(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1817,6 +2025,10 @@ static HRESULT WINAPI TextFont_GetShadow(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1824,6 +2036,10 @@ static HRESULT WINAPI TextFont_SetShadow(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1831,13 +2047,24 @@ static HRESULT WINAPI TextFont_GetSize(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = 12.0;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetSize(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1845,6 +2072,10 @@ static HRESULT WINAPI TextFont_GetSmallCaps(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1852,6 +2083,10 @@ static HRESULT WINAPI TextFont_SetSmallCaps(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1859,6 +2094,10 @@ static HRESULT WINAPI TextFont_GetSpacing(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1866,6 +2105,10 @@ static HRESULT WINAPI TextFont_SetSpacing(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1873,13 +2116,24 @@ static HRESULT WINAPI TextFont_GetStrikeThrough(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetStrikeThrough(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1887,13 +2141,24 @@ static HRESULT WINAPI TextFont_GetSubscript(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+      return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetSubscript(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1901,13 +2166,24 @@ static HRESULT WINAPI TextFont_GetSuperscript(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetSuperscript(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1915,13 +2191,24 @@ static HRESULT WINAPI TextFont_GetUnderline(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomNone;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetUnderline(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1929,6 +2216,10 @@ static HRESULT WINAPI TextFont_GetWeight(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1936,6 +2227,10 @@ static HRESULT WINAPI TextFont_SetWeight(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2004,21 +2299,20 @@ static ITextFontVtbl textfontvtbl = {
     TextFont_SetWeight
 };
 
-static HRESULT create_textfont(ITextRange *range, ITextFont **ret)
+static HRESULT create_textfont(IRichEditOleImpl *reOle, ITextFontImpl **ret)
 {
     ITextFontImpl *font;
 
-    *ret = NULL;
     font = heap_alloc(sizeof(*font));
     if (!font)
         return E_OUTOFMEMORY;
 
     font->ITextFont_iface.lpVtbl = &textfontvtbl;
     font->ref = 1;
-    font->range = range;
-    ITextRange_AddRef(range);
+    font->reOle = reOle;
+    list_add_head(&reOle->fontlist, &font->entry);
 
-    *ret = &font->ITextFont_iface;
+    *ret = font;
     return S_OK;
 }
 
@@ -3070,11 +3364,27 @@ static HRESULT WINAPI ITextSelection_fnSetEnd(ITextSelection *me, LONG cpLim)
 static HRESULT WINAPI ITextSelection_fnGetFont(ITextSelection *me, ITextFont **pFont)
 {
     ITextSelectionImpl *This = impl_from_ITextSelection(me);
+    ITextFontImpl *txtFont = NULL;
+    HRESULT hres;
+
+    TRACE("(%p)->(%p)\n", This, pFont);
+
     if (!This->reOle)
         return CO_E_RELEASED;
 
-    FIXME("not implemented\n");
-    return E_NOTIMPL;
+    if (!pFont)
+        return E_INVALIDARG;
+
+    *pFont = NULL;
+    hres = create_textfont(This->reOle, &txtFont);
+    if (!hres)
+    {
+        txtFont->txtSel = This;
+        txtFont->txtRge = NULL;
+        ITextSelection_AddRef(me);
+        *pFont = &txtFont->ITextFont_iface;
+    }
+    return hres;
 }
 
 static HRESULT WINAPI ITextSelection_fnSetFont(ITextSelection *me, ITextFont *pFont)
@@ -3708,6 +4018,7 @@ LRESULT CreateIRichEditOle(IUnknown *outer_unk, ME_TextEditor *editor, LPVOID *p
     }
     TRACE("Created %p\n",reo);
     list_init(&reo->rangelist);
+    list_init(&reo->fontlist);
     if (outer_unk)
         reo->outer_unk = outer_unk;
     else
diff --git a/dlls/riched20/tests/richole.c b/dlls/riched20/tests/richole.c
index 9a52f78..c52653f 100644
--- a/dlls/riched20/tests/richole.c
+++ b/dlls/riched20/tests/richole.c
@@ -1478,6 +1478,97 @@ static void test_ITextSelection_SetEnd(void)
   release_interfaces(&w, &reOle, &txtDoc, &txtSel);
 }
 
+static void test_ITextRange_GetFont(void)
+{
+  HWND w;
+  IRichEditOle *reOle = NULL;
+  ITextDocument *txtDoc = NULL;
+  ITextRange *txtRge = NULL;
+  ITextFont *txtFont = NULL, *txtFont1 = NULL;
+  HRESULT hres;
+  int first, lim;
+  int refcount;
+  static const CHAR test_text1[] = "TestSomeText";
+  LONG value;
+
+  create_interfaces(&w, &reOle, &txtDoc, NULL);
+  SendMessageA(w, WM_SETTEXT, 0, (LPARAM)test_text1);
+
+  first = 4, lim = 4;
+  ITextDocument_Range(txtDoc, first, lim, &txtRge);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextRange_GetFont(txtRge, &txtFont);
+  ok(hres == S_OK, "ITextRange_GetFont\n");
+  refcount = get_refcount((IUnknown *)txtFont);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextRange_GetFont(txtRge, &txtFont1);
+  ok(hres == S_OK, "ITextRange_GetFont\n");
+  ok(txtFont1 != txtFont, "A new pointer should be return\n");
+  refcount = get_refcount((IUnknown *)txtFont1);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  ITextFont_Release(txtFont1);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  ITextRange_Release(txtRge);
+  release_interfaces(&w, &reOle, &txtDoc, NULL);
+
+  hres = ITextFont_GetOutline(txtFont, &value);
+  ok(hres == CO_E_RELEASED, "ITextFont after ITextDocument destroyed\n");
+
+  ITextFont_Release(txtFont);
+}
+
+static void test_ITextSelection_GetFont(void)
+{
+  HWND w;
+  IRichEditOle *reOle = NULL;
+  ITextDocument *txtDoc = NULL;
+  ITextSelection *txtSel = NULL;
+  ITextFont *txtFont = NULL, *txtFont1 = NULL;
+  HRESULT hres;
+  int first, lim;
+  int refcount;
+  static const CHAR test_text1[] = "TestSomeText";
+  LONG value;
+
+  create_interfaces(&w, &reOle, &txtDoc, &txtSel);
+  SendMessageA(w, WM_SETTEXT, 0, (LPARAM)test_text1);
+
+  first = 4, lim = 4;
+  SendMessageA(w, EM_SETSEL, first, lim);
+  refcount = get_refcount((IUnknown *)txtSel);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextSelection_GetFont(txtSel, &txtFont);
+  ok(hres == S_OK, "ITextSelection_GetFont\n");
+  refcount = get_refcount((IUnknown *)txtFont);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  refcount = get_refcount((IUnknown *)txtSel);
+  ok(refcount == 3, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextSelection_GetFont(txtSel, &txtFont1);
+  ok(hres == S_OK, "ITextSelection_GetFont\n");
+  ok(txtFont1 != txtFont, "A new pointer should be return\n");
+  refcount = get_refcount((IUnknown *)txtFont1);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  ITextFont_Release(txtFont1);
+  refcount = get_refcount((IUnknown *)txtSel);
+  ok(refcount == 3, "got wrong ref count: %d\n", refcount);
+
+  release_interfaces(&w, &reOle, &txtDoc, &txtSel);
+
+  hres = ITextFont_GetOutline(txtFont, &value);
+  ok(hres == CO_E_RELEASED, "ITextFont after ITextDocument destroyed\n");
+
+  ITextFont_Release(txtFont);
+}
+
 START_TEST(richole)
 {
   /* Must explicitly LoadLibrary(). The test has no references to functions in
@@ -1493,6 +1584,7 @@ START_TEST(richole)
   test_ITextSelection_SetStart();
   test_ITextSelection_SetEnd();
   test_ITextSelection_Collapse();
+  test_ITextSelection_GetFont();
   test_ITextDocument_Range();
   test_ITextRange_GetChar();
   test_ITextRange_GetStart_GetEnd();
@@ -1500,6 +1592,7 @@ START_TEST(richole)
   test_ITextRange_Collapse();
   test_ITextRange_SetStart();
   test_ITextRange_SetEnd();
+  test_ITextRange_GetFont();
   test_IOleClientSite_QueryInterface();
   test_IOleWindow_GetWindow();
   test_IOleInPlaceSite_GetWindow();
-- 
2.4.0


From db292bf18161a88ac2760aa6dcfb82a14906da67 Mon Sep 17 00:00:00 2001
From: Jactry Zeng <wine@jactry.com>
Date: Mon, 11 Aug 2014 13:51:55 +0800
Subject: riched20: Stub for ITextFont interface and implement
 ITextRange::GetFont and ITextSelection::GetFont.

---
 dlls/riched20/richole.c       | 362 +++++++++++++++++++++++++++++++++++++++---
 dlls/riched20/tests/richole.c |  93 +++++++++++
 2 files changed, 433 insertions(+), 22 deletions(-)

diff --git a/dlls/riched20/richole.c b/dlls/riched20/richole.c
index b3566e5..3623ec7 100644
--- a/dlls/riched20/richole.c
+++ b/dlls/riched20/richole.c
@@ -52,6 +52,7 @@ DEFINE_GUID(IID_ITextPara, 0x8cc497c4, 0xa1df, 0x11ce, 0x80, 0x98, 0x00, 0xaa, 0
 typedef struct ITextSelectionImpl ITextSelectionImpl;
 typedef struct IOleClientSiteImpl IOleClientSiteImpl;
 typedef struct ITextRangeImpl ITextRangeImpl;
+typedef struct ITextFontImpl ITextFontImpl;
 
 typedef struct IRichEditOleImpl {
     IUnknown IUnknown_inner;
@@ -64,6 +65,7 @@ typedef struct IRichEditOleImpl {
     ITextSelectionImpl *txtSel;
     IOleClientSiteImpl *clientSite;
     struct list rangelist;
+    struct list fontlist;
 } IRichEditOleImpl;
 
 struct ITextRangeImpl {
@@ -85,8 +87,11 @@ struct ITextSelectionImpl {
 typedef struct ITextFontImpl {
     ITextFont ITextFont_iface;
     LONG ref;
+    struct list entry;
 
-    ITextRange *range;
+    IRichEditOleImpl *reOle;
+    ITextRangeImpl *txtRge;
+    ITextSelectionImpl *txtSel;
 } ITextFontImpl;
 
 typedef struct ITextParaImpl {
@@ -150,7 +155,7 @@ static inline ITextParaImpl *impl_from_ITextPara(ITextPara *iface)
     return CONTAINING_RECORD(iface, ITextParaImpl, ITextPara_iface);
 }
 
-static HRESULT create_textfont(ITextRange*, ITextFont**);
+static HRESULT create_textfont(IRichEditOleImpl *, ITextFontImpl **);
 static HRESULT create_textpara(ITextRange*, ITextPara**);
 
 enum textfont_prop_id {
@@ -238,9 +243,8 @@ static HRESULT get_textfont_prop_for_pos(const IRichEditOleImpl *reole, int pos,
     return S_OK;
 }
 
-static HRESULT get_textfont_prop(ITextRange *range, enum textfont_prop_id propid, LONG *value)
+static HRESULT get_textfont_prop(ITextRangeImpl *rng, enum textfont_prop_id propid, LONG *value)
 {
-    ITextRangeImpl *rng = impl_from_ITextRange(range);
     HRESULT hr;
     LONG v;
     int i;
@@ -316,6 +320,7 @@ static ULONG WINAPI IRichEditOleImpl_inner_fnRelease(IUnknown *iface)
     if (!ref)
     {
         ITextRangeImpl *txtRge;
+        ITextFontImpl *txtFont;
 
         TRACE("Destroying %p\n", This);
         This->txtSel->reOle = NULL;
@@ -324,6 +329,8 @@ static ULONG WINAPI IRichEditOleImpl_inner_fnRelease(IUnknown *iface)
         IOleClientSite_Release(&This->clientSite->IOleClientSite_iface);
         LIST_FOR_EACH_ENTRY(txtRge, &This->rangelist, ITextRangeImpl, entry)
             txtRge->reOle = NULL;
+        LIST_FOR_EACH_ENTRY(txtFont, &This->fontlist, ITextFontImpl, entry)
+            txtFont->reOle = NULL;
         heap_free(This);
     }
     return ref;
@@ -1099,6 +1106,8 @@ static HRESULT WINAPI ITextRange_fnSetEnd(ITextRange *me, LONG end)
 static HRESULT WINAPI ITextRange_fnGetFont(ITextRange *me, ITextFont **font)
 {
     ITextRangeImpl *This = impl_from_ITextRange(me);
+    ITextFontImpl *txtFont = NULL;
+    HRESULT hres;
 
     TRACE("(%p)->(%p)\n", This, font);
 
@@ -1108,7 +1117,16 @@ static HRESULT WINAPI ITextRange_fnGetFont(ITextRange *me, ITextFont **font)
     if (!font)
         return E_INVALIDARG;
 
-    return create_textfont(me, font);
+    *font = NULL;
+    hres = create_textfont(This->reOle, &txtFont);
+    if (!hres)
+    {
+        txtFont->txtSel = NULL;
+        txtFont->txtRge = This;
+        ITextRange_AddRef(me);
+        *font = &txtFont->ITextFont_iface;
+    }
+    return hres;
 }
 
 static HRESULT WINAPI ITextRange_fnSetFont(ITextRange *me, ITextFont *pFont)
@@ -1632,7 +1650,14 @@ static ULONG WINAPI TextFont_Release(ITextFont *iface)
 
     if (!ref)
     {
-        ITextRange_Release(This->range);
+        if (This->txtRge)
+            ITextRange_Release(&This->txtRge->ITextRange_iface);
+        else
+            ITextSelection_Release(&This->txtSel->ITextSelection_iface);
+        This->reOle = NULL;
+        This->txtRge = NULL;
+        This->txtSel = NULL;
+        list_remove(&This->entry);
         heap_free(This);
     }
 
@@ -1641,7 +1666,12 @@ static ULONG WINAPI TextFont_Release(ITextFont *iface)
 
 static HRESULT WINAPI TextFont_GetTypeInfoCount(ITextFont *iface, UINT *pctinfo)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     *pctinfo = 0;
     return E_NOTIMPL;
 }
@@ -1649,14 +1679,24 @@ static HRESULT WINAPI TextFont_GetTypeInfoCount(ITextFont *iface, UINT *pctinfo)
 static HRESULT WINAPI TextFont_GetTypeInfo(ITextFont *iface, UINT iTInfo, LCID lcid,
     ITypeInfo **ppTInfo)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
 static HRESULT WINAPI TextFont_GetIDsOfNames(ITextFont *iface, REFIID riid,
     LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1671,7 +1711,12 @@ static HRESULT WINAPI TextFont_Invoke(
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr)
 {
+    ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1679,6 +1724,10 @@ static HRESULT WINAPI TextFont_GetDuplicate(ITextFont *iface, ITextFont **ret)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1686,6 +1735,10 @@ static HRESULT WINAPI TextFont_SetDuplicate(ITextFont *iface, ITextFont *pFont)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, pFont);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1693,6 +1746,10 @@ static HRESULT WINAPI TextFont_CanChange(ITextFont *iface, LONG *ret)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1700,6 +1757,10 @@ static HRESULT WINAPI TextFont_IsEqual(ITextFont *iface, ITextFont *font, LONG *
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1707,6 +1768,10 @@ static HRESULT WINAPI TextFont_Reset(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p): stub\n", This);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1714,6 +1779,10 @@ static HRESULT WINAPI TextFont_GetStyle(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1721,6 +1790,10 @@ static HRESULT WINAPI TextFont_SetStyle(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1728,6 +1801,10 @@ static HRESULT WINAPI TextFont_GetAllCaps(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1735,6 +1812,10 @@ static HRESULT WINAPI TextFont_SetAllCaps(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1742,6 +1823,10 @@ static HRESULT WINAPI TextFont_GetAnimation(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1749,6 +1834,10 @@ static HRESULT WINAPI TextFont_SetAnimation(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1756,6 +1845,10 @@ static HRESULT WINAPI TextFont_GetBackColor(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1763,6 +1856,10 @@ static HRESULT WINAPI TextFont_SetBackColor(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1770,13 +1867,28 @@ static HRESULT WINAPI TextFont_GetBold(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     TRACE("(%p)->(%p)\n", This, value);
-    return get_textfont_prop(This->range, FONT_BOLD, value);
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+    if (!This->txtRge)
+    {
+        FIXME("not implemented\n");
+        return E_NOTIMPL;
+    }
+
+    return get_textfont_prop(This->txtRge, FONT_BOLD, value);
 }
 
 static HRESULT WINAPI TextFont_SetBold(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1784,6 +1896,10 @@ static HRESULT WINAPI TextFont_GetEmboss(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1791,6 +1907,10 @@ static HRESULT WINAPI TextFont_SetEmboss(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1798,13 +1918,24 @@ static HRESULT WINAPI TextFont_GetForeColor(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomAutoColor;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetForeColor(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1812,6 +1943,10 @@ static HRESULT WINAPI TextFont_GetHidden(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1819,6 +1954,10 @@ static HRESULT WINAPI TextFont_SetHidden(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1826,6 +1965,10 @@ static HRESULT WINAPI TextFont_GetEngrave(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1833,6 +1976,10 @@ static HRESULT WINAPI TextFont_SetEngrave(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1840,13 +1987,28 @@ static HRESULT WINAPI TextFont_GetItalic(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     TRACE("(%p)->(%p)\n", This, value);
-    return get_textfont_prop(This->range, FONT_ITALIC, value);
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+    if (!This->txtRge)
+    {
+        FIXME("not implemented\n");
+        return E_NOTIMPL;
+    }
+
+    return get_textfont_prop(This->txtRge, FONT_ITALIC, value);
 }
 
 static HRESULT WINAPI TextFont_SetItalic(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1854,6 +2016,10 @@ static HRESULT WINAPI TextFont_GetKerning(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1861,6 +2027,10 @@ static HRESULT WINAPI TextFont_SetKerning(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1868,6 +2038,10 @@ static HRESULT WINAPI TextFont_GetLanguageID(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1875,20 +2049,37 @@ static HRESULT WINAPI TextFont_SetLanguageID(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
 static HRESULT WINAPI TextFont_GetName(ITextFont *iface, BSTR *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
+    static const WCHAR font[] = {'S', 'y', 's', 't', 'e', 'm', 0};
+
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = SysAllocString(font);
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetName(ITextFont *iface, BSTR value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%s): stub\n", This, debugstr_w(value));
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1896,6 +2087,10 @@ static HRESULT WINAPI TextFont_GetOutline(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1903,6 +2098,10 @@ static HRESULT WINAPI TextFont_SetOutline(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1910,6 +2109,10 @@ static HRESULT WINAPI TextFont_GetPosition(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1917,6 +2120,10 @@ static HRESULT WINAPI TextFont_SetPosition(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1924,6 +2131,10 @@ static HRESULT WINAPI TextFont_GetProtected(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1931,6 +2142,10 @@ static HRESULT WINAPI TextFont_SetProtected(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1938,6 +2153,10 @@ static HRESULT WINAPI TextFont_GetShadow(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1945,6 +2164,10 @@ static HRESULT WINAPI TextFont_SetShadow(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1952,13 +2175,24 @@ static HRESULT WINAPI TextFont_GetSize(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = 12.0;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetSize(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1966,6 +2200,10 @@ static HRESULT WINAPI TextFont_GetSmallCaps(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1973,6 +2211,10 @@ static HRESULT WINAPI TextFont_SetSmallCaps(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1980,6 +2222,10 @@ static HRESULT WINAPI TextFont_GetSpacing(ITextFont *iface, FLOAT *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1987,6 +2233,10 @@ static HRESULT WINAPI TextFont_SetSpacing(ITextFont *iface, FLOAT value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%.2f): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -1994,13 +2244,24 @@ static HRESULT WINAPI TextFont_GetStrikeThrough(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetStrikeThrough(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2008,13 +2269,24 @@ static HRESULT WINAPI TextFont_GetSubscript(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+      return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetSubscript(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2022,13 +2294,24 @@ static HRESULT WINAPI TextFont_GetSuperscript(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomFalse;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetSuperscript(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2036,13 +2319,24 @@ static HRESULT WINAPI TextFont_GetUnderline(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
-    return E_NOTIMPL;
+
+    if (!value)
+        return E_INVALIDARG;
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
+    *value = tomNone;
+    return S_OK;
 }
 
 static HRESULT WINAPI TextFont_SetUnderline(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2050,6 +2344,10 @@ static HRESULT WINAPI TextFont_GetWeight(ITextFont *iface, LONG *value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%p): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2057,6 +2355,10 @@ static HRESULT WINAPI TextFont_SetWeight(ITextFont *iface, LONG value)
 {
     ITextFontImpl *This = impl_from_ITextFont(iface);
     FIXME("(%p)->(%d): stub\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2125,21 +2427,20 @@ static ITextFontVtbl textfontvtbl = {
     TextFont_SetWeight
 };
 
-static HRESULT create_textfont(ITextRange *range, ITextFont **ret)
+static HRESULT create_textfont(IRichEditOleImpl *reOle, ITextFontImpl **ret)
 {
     ITextFontImpl *font;
 
-    *ret = NULL;
     font = heap_alloc(sizeof(*font));
     if (!font)
         return E_OUTOFMEMORY;
 
     font->ITextFont_iface.lpVtbl = &textfontvtbl;
     font->ref = 1;
-    font->range = range;
-    ITextRange_AddRef(range);
+    font->reOle = reOle;
+    list_add_head(&reOle->fontlist, &font->entry);
 
-    *ret = &font->ITextFont_iface;
+    *ret = font;
     return S_OK;
 }
 
@@ -3191,11 +3492,27 @@ static HRESULT WINAPI ITextSelection_fnSetEnd(ITextSelection *me, LONG cpLim)
 static HRESULT WINAPI ITextSelection_fnGetFont(ITextSelection *me, ITextFont **pFont)
 {
     ITextSelectionImpl *This = impl_from_ITextSelection(me);
+    ITextFontImpl *txtFont = NULL;
+    HRESULT hres;
+
+    TRACE("(%p)->(%p)\n", This, pFont);
+
     if (!This->reOle)
         return CO_E_RELEASED;
 
-    FIXME("not implemented\n");
-    return E_NOTIMPL;
+    if (!pFont)
+        return E_INVALIDARG;
+
+    *pFont = NULL;
+    hres = create_textfont(This->reOle, &txtFont);
+    if (!hres)
+    {
+        txtFont->txtSel = This;
+        txtFont->txtRge = NULL;
+        ITextSelection_AddRef(me);
+        *pFont = &txtFont->ITextFont_iface;
+    }
+    return hres;
 }
 
 static HRESULT WINAPI ITextSelection_fnSetFont(ITextSelection *me, ITextFont *pFont)
@@ -3829,6 +4146,7 @@ LRESULT CreateIRichEditOle(IUnknown *outer_unk, ME_TextEditor *editor, LPVOID *p
     }
     TRACE("Created %p\n",reo);
     list_init(&reo->rangelist);
+    list_init(&reo->fontlist);
     if (outer_unk)
         reo->outer_unk = outer_unk;
     else
diff --git a/dlls/riched20/tests/richole.c b/dlls/riched20/tests/richole.c
index e9ae68b..070b05a 100644
--- a/dlls/riched20/tests/richole.c
+++ b/dlls/riched20/tests/richole.c
@@ -1506,6 +1506,97 @@ static void test_ITextSelection_SetEnd(void)
   release_interfaces(&w, &reOle, &txtDoc, &txtSel);
 }
 
+static void test_ITextRange_GetFont(void)
+{
+  HWND w;
+  IRichEditOle *reOle = NULL;
+  ITextDocument *txtDoc = NULL;
+  ITextRange *txtRge = NULL;
+  ITextFont *txtFont = NULL, *txtFont1 = NULL;
+  HRESULT hres;
+  int first, lim;
+  int refcount;
+  static const CHAR test_text1[] = "TestSomeText";
+  LONG value;
+
+  create_interfaces(&w, &reOle, &txtDoc, NULL);
+  SendMessageA(w, WM_SETTEXT, 0, (LPARAM)test_text1);
+
+  first = 4, lim = 4;
+  ITextDocument_Range(txtDoc, first, lim, &txtRge);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextRange_GetFont(txtRge, &txtFont);
+  ok(hres == S_OK, "ITextRange_GetFont\n");
+  refcount = get_refcount((IUnknown *)txtFont);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextRange_GetFont(txtRge, &txtFont1);
+  ok(hres == S_OK, "ITextRange_GetFont\n");
+  ok(txtFont1 != txtFont, "A new pointer should be return\n");
+  refcount = get_refcount((IUnknown *)txtFont1);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  ITextFont_Release(txtFont1);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  ITextRange_Release(txtRge);
+  release_interfaces(&w, &reOle, &txtDoc, NULL);
+
+  hres = ITextFont_GetOutline(txtFont, &value);
+  ok(hres == CO_E_RELEASED, "ITextFont after ITextDocument destroyed\n");
+
+  ITextFont_Release(txtFont);
+}
+
+static void test_ITextSelection_GetFont(void)
+{
+  HWND w;
+  IRichEditOle *reOle = NULL;
+  ITextDocument *txtDoc = NULL;
+  ITextSelection *txtSel = NULL;
+  ITextFont *txtFont = NULL, *txtFont1 = NULL;
+  HRESULT hres;
+  int first, lim;
+  int refcount;
+  static const CHAR test_text1[] = "TestSomeText";
+  LONG value;
+
+  create_interfaces(&w, &reOle, &txtDoc, &txtSel);
+  SendMessageA(w, WM_SETTEXT, 0, (LPARAM)test_text1);
+
+  first = 4, lim = 4;
+  SendMessageA(w, EM_SETSEL, first, lim);
+  refcount = get_refcount((IUnknown *)txtSel);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextSelection_GetFont(txtSel, &txtFont);
+  ok(hres == S_OK, "ITextSelection_GetFont\n");
+  refcount = get_refcount((IUnknown *)txtFont);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  refcount = get_refcount((IUnknown *)txtSel);
+  ok(refcount == 3, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextSelection_GetFont(txtSel, &txtFont1);
+  ok(hres == S_OK, "ITextSelection_GetFont\n");
+  ok(txtFont1 != txtFont, "A new pointer should be return\n");
+  refcount = get_refcount((IUnknown *)txtFont1);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  ITextFont_Release(txtFont1);
+  refcount = get_refcount((IUnknown *)txtSel);
+  ok(refcount == 3, "got wrong ref count: %d\n", refcount);
+
+  release_interfaces(&w, &reOle, &txtDoc, &txtSel);
+
+  hres = ITextFont_GetOutline(txtFont, &value);
+  ok(hres == CO_E_RELEASED, "ITextFont after ITextDocument destroyed\n");
+
+  ITextFont_Release(txtFont);
+}
+
 START_TEST(richole)
 {
   /* Must explicitly LoadLibrary(). The test has no references to functions in
@@ -1521,6 +1612,7 @@ START_TEST(richole)
   test_ITextSelection_SetStart();
   test_ITextSelection_SetEnd();
   test_ITextSelection_Collapse();
+  test_ITextSelection_GetFont();
   test_ITextDocument_Range();
   test_ITextRange_GetChar();
   test_ITextRange_GetStart_GetEnd();
@@ -1528,6 +1620,7 @@ START_TEST(richole)
   test_ITextRange_Collapse();
   test_ITextRange_SetStart();
   test_ITextRange_SetEnd();
+  test_ITextRange_GetFont();
   test_IOleClientSite_QueryInterface();
   test_IOleWindow_GetWindow();
   test_IOleInPlaceSite_GetWindow();
-- 
2.4.0


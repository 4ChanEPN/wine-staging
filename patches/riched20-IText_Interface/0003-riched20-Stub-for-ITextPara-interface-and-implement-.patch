From c3bde6240c5e45eaca9a25e1e7f0b4b640325b19 Mon Sep 17 00:00:00 2001
From: Jactry Zeng <wine@jactry.com>
Date: Sun, 10 Aug 2014 22:17:57 +0800
Subject: riched20: Stub for ITextPara interface and implement
 ITextRange::GetPara.

---
 dlls/riched20/richole.c       | 256 ++++++++++++++++++++++++++++++++++++++++--
 dlls/riched20/tests/richole.c |  47 ++++++++
 2 files changed, 294 insertions(+), 9 deletions(-)

diff --git a/dlls/riched20/richole.c b/dlls/riched20/richole.c
index d5ecf52..409f3e8 100644
--- a/dlls/riched20/richole.c
+++ b/dlls/riched20/richole.c
@@ -52,6 +52,7 @@ typedef struct ITextSelectionImpl ITextSelectionImpl;
 typedef struct IOleClientSiteImpl IOleClientSiteImpl;
 typedef struct ITextRangeImpl ITextRangeImpl;
 typedef struct ITextFontImpl ITextFontImpl;
+typedef struct ITextParaImpl ITextParaImpl;
 
 typedef struct IRichEditOleImpl {
     IUnknown IUnknown_inner;
@@ -65,6 +66,7 @@ typedef struct IRichEditOleImpl {
     IOleClientSiteImpl *clientSite;
     struct list rangelist;
     struct list fontlist;
+    struct list paralist;
 } IRichEditOleImpl;
 
 struct ITextRangeImpl {
@@ -96,8 +98,11 @@ typedef struct ITextFontImpl {
 typedef struct ITextParaImpl {
     ITextPara ITextPara_iface;
     LONG ref;
+    struct list entry;
 
-    ITextRange *range;
+    IRichEditOleImpl *reOle;
+    ITextRangeImpl *txtRge;
+    ITextSelectionImpl *txtSel;
 } ITextParaImpl;
 
 struct IOleClientSiteImpl {
@@ -150,7 +155,7 @@ static inline ITextParaImpl *impl_from_ITextPara(ITextPara *iface)
 }
 
 static HRESULT create_textfont(IRichEditOleImpl *, ITextFontImpl **);
-static HRESULT create_textpara(ITextRange*, ITextPara**);
+static HRESULT create_textpara(IRichEditOleImpl *, ITextParaImpl **);
 
 static HRESULT WINAPI IRichEditOleImpl_inner_fnQueryInterface(IUnknown *iface, REFIID riid, LPVOID *ppvObj)
 {
@@ -196,6 +201,7 @@ static ULONG WINAPI IRichEditOleImpl_inner_fnRelease(IUnknown *iface)
     {
         ITextRangeImpl *txtRge;
         ITextFontImpl *txtFont;
+        ITextParaImpl *txtPara;
 
         TRACE("Destroying %p\n", This);
         This->txtSel->reOle = NULL;
@@ -206,6 +212,8 @@ static ULONG WINAPI IRichEditOleImpl_inner_fnRelease(IUnknown *iface)
             txtRge->reOle = NULL;
         LIST_FOR_EACH_ENTRY(txtFont, &This->fontlist, ITextFontImpl, entry)
             txtFont->reOle = NULL;
+        LIST_FOR_EACH_ENTRY(txtPara, &This->paralist, ITextParaImpl, entry)
+            txtPara->reOle = NULL;
         heap_free(This);
     }
     return ref;
@@ -1022,6 +1030,8 @@ static HRESULT WINAPI ITextRange_fnSetFont(ITextRange *me, ITextFont *pFont)
 static HRESULT WINAPI ITextRange_fnGetPara(ITextRange *me, ITextPara **para)
 {
     ITextRangeImpl *This = impl_from_ITextRange(me);
+    ITextParaImpl *txtPara = NULL;
+    HRESULT hres;
 
     TRACE("(%p)->(%p)\n", This, para);
 
@@ -1031,7 +1041,16 @@ static HRESULT WINAPI ITextRange_fnGetPara(ITextRange *me, ITextPara **para)
     if (!para)
         return E_INVALIDARG;
 
-    return create_textpara(me, para);
+    *para = NULL;
+    hres = create_textpara(This->reOle, &txtPara);
+    if (!hres)
+    {
+        txtPara->txtSel = NULL;
+        txtPara->txtRge = This;
+        ITextRange_AddRef(me);
+        *para = &txtPara->ITextPara_iface;
+    }
+    return hres;
 }
 
 static HRESULT WINAPI ITextRange_fnSetPara(ITextRange *me, ITextPara *pPara)
@@ -2353,7 +2372,14 @@ static ULONG WINAPI TextPara_Release(ITextPara *iface)
 
     if (!ref)
     {
-        ITextRange_Release(This->range);
+        if (This->txtRge)
+            ITextRange_Release(&This->txtRge->ITextRange_iface);
+        else
+            ITextSelection_Release(&This->txtSel->ITextSelection_iface);
+        This->reOle = NULL;
+        This->txtRge = NULL;
+        This->txtSel = NULL;
+        list_remove(&This->entry);
         heap_free(This);
     }
 
@@ -2362,7 +2388,12 @@ static ULONG WINAPI TextPara_Release(ITextPara *iface)
 
 static HRESULT WINAPI TextPara_GetTypeInfoCount(ITextPara *iface, UINT *pctinfo)
 {
+    ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     *pctinfo = 0;
     return E_NOTIMPL;
 }
@@ -2370,14 +2401,24 @@ static HRESULT WINAPI TextPara_GetTypeInfoCount(ITextPara *iface, UINT *pctinfo)
 static HRESULT WINAPI TextPara_GetTypeInfo(ITextPara *iface, UINT iTInfo, LCID lcid,
     ITypeInfo **ppTInfo)
 {
+    ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
 static HRESULT WINAPI TextPara_GetIDsOfNames(ITextPara *iface, REFIID riid,
     LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId)
 {
+    ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2392,7 +2433,12 @@ static HRESULT WINAPI TextPara_Invoke(
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr)
 {
+    ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("stub\n");
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2400,6 +2446,10 @@ static HRESULT WINAPI TextPara_GetDuplicate(ITextPara *iface, ITextPara **ret)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2407,6 +2457,10 @@ static HRESULT WINAPI TextPara_SetDuplicate(ITextPara *iface, ITextPara *para)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, para);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2414,6 +2468,10 @@ static HRESULT WINAPI TextPara_CanChange(ITextPara *iface, LONG *ret)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2421,6 +2479,10 @@ static HRESULT WINAPI TextPara_IsEqual(ITextPara *iface, ITextPara *para, LONG *
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p %p)\n", This, para, ret);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2428,6 +2490,10 @@ static HRESULT WINAPI TextPara_Reset(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2435,6 +2501,10 @@ static HRESULT WINAPI TextPara_GetStyle(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2442,6 +2512,10 @@ static HRESULT WINAPI TextPara_SetStyle(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2449,6 +2523,10 @@ static HRESULT WINAPI TextPara_GetAlignment(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2456,6 +2534,10 @@ static HRESULT WINAPI TextPara_SetAlignment(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2463,6 +2545,10 @@ static HRESULT WINAPI TextPara_GetHyphenation(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2470,6 +2556,10 @@ static HRESULT WINAPI TextPara_SetHyphenation(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2477,6 +2567,10 @@ static HRESULT WINAPI TextPara_GetFirstLineIndent(ITextPara *iface, FLOAT *value
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2484,6 +2578,10 @@ static HRESULT WINAPI TextPara_GetKeepTogether(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2491,6 +2589,10 @@ static HRESULT WINAPI TextPara_SetKeepTogether(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2498,6 +2600,10 @@ static HRESULT WINAPI TextPara_GetKeepWithNext(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2505,6 +2611,10 @@ static HRESULT WINAPI TextPara_SetKeepWithNext(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2512,6 +2622,10 @@ static HRESULT WINAPI TextPara_GetLeftIndent(ITextPara *iface, FLOAT *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2519,6 +2633,10 @@ static HRESULT WINAPI TextPara_GetLineSpacing(ITextPara *iface, FLOAT *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2526,6 +2644,10 @@ static HRESULT WINAPI TextPara_GetLineSpacingRule(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2533,6 +2655,10 @@ static HRESULT WINAPI TextPara_GetListAlignment(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2540,6 +2666,10 @@ static HRESULT WINAPI TextPara_SetListAlignment(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2547,6 +2677,10 @@ static HRESULT WINAPI TextPara_GetListLevelIndex(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2554,6 +2688,10 @@ static HRESULT WINAPI TextPara_SetListLevelIndex(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2561,6 +2699,10 @@ static HRESULT WINAPI TextPara_GetListStart(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2568,6 +2710,10 @@ static HRESULT WINAPI TextPara_SetListStart(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2575,6 +2721,10 @@ static HRESULT WINAPI TextPara_GetListTab(ITextPara *iface, FLOAT *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2582,6 +2732,10 @@ static HRESULT WINAPI TextPara_SetListTab(ITextPara *iface, FLOAT value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2589,6 +2743,10 @@ static HRESULT WINAPI TextPara_GetListType(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2596,6 +2754,10 @@ static HRESULT WINAPI TextPara_SetListType(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2603,6 +2765,10 @@ static HRESULT WINAPI TextPara_GetNoLineNumber(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2610,6 +2776,10 @@ static HRESULT WINAPI TextPara_SetNoLineNumber(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2617,6 +2787,10 @@ static HRESULT WINAPI TextPara_GetPageBreakBefore(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2624,6 +2798,10 @@ static HRESULT WINAPI TextPara_SetPageBreakBefore(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2631,6 +2809,10 @@ static HRESULT WINAPI TextPara_GetRightIndent(ITextPara *iface, FLOAT *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2638,6 +2820,10 @@ static HRESULT WINAPI TextPara_SetRightIndent(ITextPara *iface, FLOAT value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2645,6 +2831,10 @@ static HRESULT WINAPI TextPara_SetIndents(ITextPara *iface, FLOAT StartIndent, F
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f %.2f %.2f)\n", This, StartIndent, LeftIndent, RightIndent);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2652,6 +2842,10 @@ static HRESULT WINAPI TextPara_SetLineSpacing(ITextPara *iface, LONG LineSpacing
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d %.2f)\n", This, LineSpacingRule, LineSpacing);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2659,6 +2853,10 @@ static HRESULT WINAPI TextPara_GetSpaceAfter(ITextPara *iface, FLOAT *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2666,6 +2864,10 @@ static HRESULT WINAPI TextPara_SetSpaceAfter(ITextPara *iface, FLOAT value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2673,6 +2875,10 @@ static HRESULT WINAPI TextPara_GetSpaceBefore(ITextPara *iface, FLOAT *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2680,6 +2886,10 @@ static HRESULT WINAPI TextPara_SetSpaceBefore(ITextPara *iface, FLOAT value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2687,6 +2897,10 @@ static HRESULT WINAPI TextPara_GetWidowControl(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2694,6 +2908,10 @@ static HRESULT WINAPI TextPara_SetWidowControl(ITextPara *iface, LONG value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2701,6 +2919,10 @@ static HRESULT WINAPI TextPara_GetTabCount(ITextPara *iface, LONG *value)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%p)\n", This, value);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2708,6 +2930,10 @@ static HRESULT WINAPI TextPara_AddTab(ITextPara *iface, FLOAT tbPos, LONG tbAlig
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f %d %d)\n", This, tbPos, tbAlign, tbLeader);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2715,6 +2941,10 @@ static HRESULT WINAPI TextPara_ClearAllTabs(ITextPara *iface)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)\n", This);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2722,6 +2952,10 @@ static HRESULT WINAPI TextPara_DeleteTab(ITextPara *iface, FLOAT pos)
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%.2f)\n", This, pos);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2729,6 +2963,10 @@ static HRESULT WINAPI TextPara_GetTab(ITextPara *iface, LONG iTab, FLOAT *ptbPos
 {
     ITextParaImpl *This = impl_from_ITextPara(iface);
     FIXME("(%p)->(%d %p %p %p)\n", This, iTab, ptbPos, ptbAlign, ptbLeader);
+
+    if (!This->reOle)
+        return CO_E_RELEASED;
+
     return E_NOTIMPL;
 }
 
@@ -2790,21 +3028,20 @@ static ITextParaVtbl textparavtbl = {
     TextPara_GetTab
 };
 
-static HRESULT create_textpara(ITextRange *range, ITextPara **ret)
+static HRESULT create_textpara(IRichEditOleImpl *reOle, ITextParaImpl **ret)
 {
     ITextParaImpl *para;
 
-    *ret = NULL;
     para = heap_alloc(sizeof(*para));
     if (!para)
         return E_OUTOFMEMORY;
 
     para->ITextPara_iface.lpVtbl = &textparavtbl;
     para->ref = 1;
-    para->range = range;
-    ITextRange_AddRef(range);
+    para->reOle = reOle;
+    list_add_head(&reOle->paralist, &para->entry);
 
-    *ret = &para->ITextPara_iface;
+    *ret = para;
     return S_OK;
 }
 
@@ -4019,6 +4256,7 @@ LRESULT CreateIRichEditOle(IUnknown *outer_unk, ME_TextEditor *editor, LPVOID *p
     TRACE("Created %p\n",reo);
     list_init(&reo->rangelist);
     list_init(&reo->fontlist);
+    list_init(&reo->paralist);
     if (outer_unk)
         reo->outer_unk = outer_unk;
     else
diff --git a/dlls/riched20/tests/richole.c b/dlls/riched20/tests/richole.c
index c52653f..e1e330d 100644
--- a/dlls/riched20/tests/richole.c
+++ b/dlls/riched20/tests/richole.c
@@ -1569,6 +1569,52 @@ static void test_ITextSelection_GetFont(void)
   ITextFont_Release(txtFont);
 }
 
+static void test_ITextRange_GetPara(void)
+{
+  HWND w;
+  IRichEditOle *reOle = NULL;
+  ITextDocument *txtDoc = NULL;
+  ITextRange *txtRge = NULL;
+  ITextPara *txtPara = NULL, *txtPara1 = NULL;
+  HRESULT hres;
+  int first, lim;
+  int refcount;
+  static const CHAR test_text1[] = "TestSomeText";
+  LONG value;
+
+  create_interfaces(&w, &reOle, &txtDoc, NULL);
+  SendMessageA(w, WM_SETTEXT, 0, (LPARAM)test_text1);
+
+  first = 4, lim = 4;
+  ITextDocument_Range(txtDoc, first, lim, &txtRge);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextRange_GetPara(txtRge, &txtPara);
+  ok(hres == S_OK, "ITextRange_GetPara\n");
+  refcount = get_refcount((IUnknown *)txtPara);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  hres = ITextRange_GetPara(txtRge, &txtPara1);
+  ok(hres == S_OK, "ITextRange_GetPara\n");
+  ok(txtPara1 != txtPara, "A new pointer should be return\n");
+  refcount = get_refcount((IUnknown *)txtPara1);
+  ok(refcount == 1, "got wrong ref count: %d\n", refcount);
+  ITextPara_Release(txtPara1);
+  refcount = get_refcount((IUnknown *)txtRge);
+  ok(refcount == 2, "got wrong ref count: %d\n", refcount);
+
+  ITextRange_Release(txtRge);
+  release_interfaces(&w, &reOle, &txtDoc, NULL);
+
+  hres = ITextPara_GetStyle(txtPara, &value);
+  ok(hres == CO_E_RELEASED, "ITextPara after ITextDocument destroyed\n");
+
+  ITextPara_Release(txtPara);
+}
+
 START_TEST(richole)
 {
   /* Must explicitly LoadLibrary(). The test has no references to functions in
@@ -1593,6 +1639,7 @@ START_TEST(richole)
   test_ITextRange_SetStart();
   test_ITextRange_SetEnd();
   test_ITextRange_GetFont();
+  test_ITextRange_GetPara();
   test_IOleClientSite_QueryInterface();
   test_IOleWindow_GetWindow();
   test_IOleInPlaceSite_GetWindow();
-- 
2.4.0


From a8bf53baa972197e228ea01701d5992a11151824 Mon Sep 17 00:00:00 2001
From: Alex Henrie <alexhenrie24@gmail.com>
Date: Fri, 17 Oct 2014 12:54:02 -0600
Subject: kernel32: Support UTF-7 in MultiByteToWideChar.

Portions of utf7_mbstowcs were written by Sebastian Lackner
<sebastian@fds-team.de>
---
 dlls/kernel32/locale.c | 153 ++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 150 insertions(+), 3 deletions(-)

diff --git a/dlls/kernel32/locale.c b/dlls/kernel32/locale.c
index 730574b..0123124 100644
--- a/dlls/kernel32/locale.c
+++ b/dlls/kernel32/locale.c
@@ -1954,6 +1954,154 @@ BOOL WINAPI EnumSystemCodePagesW( CODEPAGE_ENUMPROCW lpfnCodePageEnum, DWORD fla
 
 
 /***********************************************************************
+ *              utf7_write_w
+ *
+ * Helper for utf7_mbstowcs
+ *
+ * RETURNS
+ *   TRUE on success, FALSE on error
+ */
+static inline BOOL utf7_write_w(WCHAR *dst, int dstlen, int *index, WCHAR character)
+{
+    if (dstlen > 0)
+    {
+        if (*index >= dstlen)
+            return FALSE;
+
+        dst[*index] = character;
+    }
+
+    (*index)++;
+
+    return TRUE;
+}
+
+/***********************************************************************
+ *              utf7_mbstowcs
+ *
+ * UTF-7 to UTF-16 string conversion, helper for MultiByteToWideChar
+ *
+ * RETURNS
+ *   On success, the number of characters written
+ *   On dst buffer overflow, -1
+ */
+static int utf7_mbstowcs(const char *src, int srclen, WCHAR *dst, int dstlen)
+{
+    static const signed char base64_decoding_table[] = {
+        /* \0     \x01   \x02   \x03   \x04   \x05   \x06   \a   */
+           -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+        /* \b     \t     \n     \v     \f     \r     \x0E   \x0F */
+           -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+        /* \x10   \x11   \x12   \x13   \x14   \x15   \x16   \x17 */
+           -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+        /* \x18   \x19   \x1A   \e     \x1C   \x1D   \x1E   \x1F */
+           -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+        /*        !      "      #      $      %      &      '    */
+           -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+        /* (      )      *      +      ,      -      .      /    */
+           -1,    -1,    -1,    62,    -1,    -1,    -1,    63,
+        /* 0      1      2      3      4      5      6      7    */
+           52,    53,    54,    55,    56,    57,    58,    59,
+        /* 8      9      :      ;      <      =      >      ?    */
+           60,    61,    -1,    -1,    -1,    -1,    -1,    -1,
+        /* @      A      B      C      D      E      F      G    */
+           -1,    0,     1,     2,     3,     4,     5,     6,
+        /* H      I      J      K      L      M      N      O    */
+           7,     8,     9,     10,    11,    12,    13,    14,
+        /* P      Q      R      S      T      U      V      W    */
+           15,    16,    17,    18,    19,    20,    21,    22,
+        /* X      Y      Z      [      \      ]      ^      _    */
+           23,    24,    25,    -1,    -1,    -1,    -1,    -1,
+        /* `      a      b      c      d      e      f      g    */
+           -1,    26,    27,    28,    29,    30,    31,    32,
+        /* h      i      j      k      l      m      n      o    */
+           33,    34,    35,    36,    37,    38,    39,    40,
+        /* p      q      r      s      t      u      v      w    */
+           41,    42,    43,    44,    45,    46,    47,    48,
+        /* x      y      z      {      |      }      ~      \x7F */
+           49,    50,    51,    -1,    -1,    -1,    -1,    -1
+    };
+
+    const char *source_end = src + srclen;
+    int dest_index = 0;
+
+    DWORD byte_pair = 0;
+    short offset = 0;
+
+    while (src < source_end)
+    {
+        if (*src == '+')
+        {
+            src++;
+            if (src >= source_end)
+                break;
+
+            if (*src == '-')
+            {
+                /* just a plus sign escaped as +- */
+                if (!utf7_write_w(dst, dstlen, &dest_index, '+'))
+                    return -1;
+                src++;
+                continue;
+            }
+
+            do
+            {
+                signed char sextet = *src;
+                if (sextet == '-')
+                {
+                    /* skip over the dash and end base64 decoding */
+                    /* the current, unfinished byte pair is discarded */
+                    src++;
+                    offset = 0;
+                    break;
+                }
+                if (sextet < 0)
+                {
+                    /* the next character of src is < 0 and therefore not part of a base64 sequence */
+                    /* the current, unfinished byte pair is NOT discarded in this case */
+                    /* this is probably a bug in Windows */
+                    break;
+                }
+
+                sextet = base64_decoding_table[sextet];
+                if (sextet == -1)
+                {
+                    /* -1 means that the next character of src is not part of a base64 sequence */
+                    /* in other words, all sextets in this base64 sequence have been processed */
+                    /* the current, unfinished byte pair is discarded */
+                    offset = 0;
+                    break;
+                }
+
+                byte_pair = (byte_pair << 6) | sextet;
+                offset += 6;
+
+                if (offset >= 16)
+                {
+                    /* this byte pair is done */
+                    if (!utf7_write_w(dst, dstlen, &dest_index, (byte_pair >> (offset - 16)) & 0xFFFF))
+                        return -1;
+                    offset -= 16;
+                }
+
+                src++;
+            }
+            while (src < source_end);
+        }
+        else
+        {
+            /* we have to convert to unsigned char in case *src < 0 */
+            if (!utf7_write_w(dst, dstlen, &dest_index, (unsigned char)*src))
+                return -1;
+            src++;
+        }
+    }
+
+    return dest_index;
+}
+
+/***********************************************************************
  *              MultiByteToWideChar   (KERNEL32.@)
  *
  * Convert a multibyte character string into a Unicode string.
@@ -2006,9 +2154,8 @@ INT WINAPI MultiByteToWideChar( UINT page, DWORD flags, LPCSTR src, INT srclen,
             SetLastError( ERROR_INVALID_FLAGS );
             return 0;
         }
-        FIXME("UTF-7 not supported\n");
-        SetLastError( ERROR_CALL_NOT_IMPLEMENTED );
-        return 0;
+        ret = utf7_mbstowcs( src, srclen, dst, dstlen );
+        break;
     case CP_UNIXCP:
         if (unix_cptable)
         {
-- 
2.1.2


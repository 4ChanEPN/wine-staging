From 02cb021277295aa3a2166e2497a686d2ebb32126 Mon Sep 17 00:00:00 2001
From: Alex Henrie <alexhenrie24@gmail.com>
Date: Fri, 17 Oct 2014 15:40:51 -0600
Subject: kernel32: Support UTF-7 in WideCharToMultiByte.

Portions of utf7_wcstombs were written by Sebastian Lackner
<sebastian@fds-team.de>
---
 dlls/kernel32/locale.c | 148 ++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 145 insertions(+), 3 deletions(-)

diff --git a/dlls/kernel32/locale.c b/dlls/kernel32/locale.c
index 0123124..6c2b6e7 100644
--- a/dlls/kernel32/locale.c
+++ b/dlls/kernel32/locale.c
@@ -2195,6 +2195,149 @@ INT WINAPI MultiByteToWideChar( UINT page, DWORD flags, LPCSTR src, INT srclen,
 
 
 /***********************************************************************
+ *              utf7_can_directly_encode
+ *
+ * Helper for utf7_wcstombs
+ */
+static inline BOOL utf7_can_directly_encode(WCHAR codepoint)
+{
+    static const BOOL directly_encodable_table[] = {
+        /* \0     \x01   \x02   \x03   \x04   \x05   \x06   \a   */
+           TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
+        /* \b     \t     \n     \v     \f     \r     \x0E   \x0F */
+           FALSE, TRUE,  TRUE,  FALSE, FALSE, TRUE,  FALSE, FALSE,
+        /* \x10   \x11   \x12   \x13   \x14   \x15   \x16   \x17 */
+           FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
+        /* \x18   \x19   \x1A   \e     \x1C   \x1D   \x1E   \x1F */
+           FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
+        /*        !      "      #      $      %      &      '    */
+           TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE,
+        /* (      )      *      +      ,      -      .      /    */
+           TRUE,  TRUE,  FALSE, TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* 0      1      2      3      4      5      6      7    */
+           TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* 8      9      :      ;      <      =      >      ?    */
+           TRUE,  TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, TRUE,
+        /* @      A      B      C      D      E      F      G    */
+           FALSE, TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* H      I      J      K      L      M      N      O    */
+           TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* P      Q      R      S      T      U      V      W    */
+           TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* X      Y      Z      [      \      ]      ^      _    */
+           TRUE,  TRUE,  TRUE,  FALSE, FALSE, FALSE, FALSE, FALSE,
+        /* `      a      b      c      d      e      f      g    */
+           FALSE, TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* h      i      j      k      l      m      n      o    */
+           TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* p      q      r      s      t      u      v      w    */
+           TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,  TRUE,
+        /* x      y      z                                       */
+           TRUE,  TRUE,  TRUE
+    };
+
+    return codepoint <= 'z' ? directly_encodable_table[codepoint] : FALSE;
+}
+
+/***********************************************************************
+ *              utf7_write_c
+ *
+ * Helper for utf7_wcstombs
+ *
+ * RETURNS
+ *   TRUE on success, FALSE on error
+ */
+static inline BOOL utf7_write_c(char *dst, int dstlen, int *index, char character)
+{
+    if (dstlen > 0)
+    {
+        if (*index >= dstlen)
+            return FALSE;
+
+        dst[*index] = character;
+    }
+
+    (*index)++;
+
+    return TRUE;
+}
+
+/***********************************************************************
+ *              utf7_wcstombs
+ *
+ * UTF-16 to UTF-7 string conversion, helper for WideCharToMultiByte
+ *
+ * RETURNS
+ *   On success, the number of characters written
+ *   On dst buffer overflow, -1
+ */
+static int utf7_wcstombs(const WCHAR *src, int srclen, char *dst, int dstlen)
+{
+    static const char base64_encoding_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
+
+    const WCHAR *source_end = src + srclen;
+    int dest_index = 0;
+
+    while (src < source_end)
+    {
+        if (*src == '+')
+        {
+            if (!utf7_write_c(dst, dstlen, &dest_index, '+'))
+                return -1;
+            if (!utf7_write_c(dst, dstlen, &dest_index, '-'))
+                return -1;
+            src++;
+        }
+        else if (utf7_can_directly_encode(*src))
+        {
+            if (!utf7_write_c(dst, dstlen, &dest_index, *src))
+                return -1;
+            src++;
+        }
+        else
+        {
+            unsigned int offset = 0;
+            DWORD byte_pair = 0;
+
+            if (!utf7_write_c(dst, dstlen, &dest_index, '+'))
+                return -1;
+
+            do
+            {
+                byte_pair = (byte_pair << 16) | *src;
+                offset += 16;
+                while (offset >= 6)
+                {
+                    if (!utf7_write_c(dst, dstlen, &dest_index, base64_encoding_table[(byte_pair >> (offset - 6)) & 0x3F]))
+                        return -1;
+                    offset -= 6;
+                }
+                src++;
+            }
+            while (src < source_end && !utf7_can_directly_encode(*src));
+
+            if (offset)
+            {
+                /* Windows won't create a padded base64 character if there's not room for the - sign too */
+                /* this is probably a bug in Windows */
+                if (dstlen > 0 && dest_index + 1 >= dstlen)
+                    return -1;
+
+                byte_pair <<= (6 - offset);
+                if (!utf7_write_c(dst, dstlen, &dest_index, base64_encoding_table[byte_pair & 0x3F]))
+                    return -1;
+            }
+
+            /* Windows always explicitly terminates the base64 sequence even though RFC 2152 (page 3, rule 2) does not require this */
+            if (!utf7_write_c(dst, dstlen, &dest_index, '-'))
+                return -1;
+        }
+    }
+
+    return dest_index;
+}
+
+/***********************************************************************
  *              WideCharToMultiByte   (KERNEL32.@)
  *
  * Convert a Unicode character string into a multibyte string.
@@ -2261,9 +2404,8 @@ INT WINAPI WideCharToMultiByte( UINT page, DWORD flags, LPCWSTR src, INT srclen,
             SetLastError( ERROR_INVALID_FLAGS );
             return 0;
         }
-        FIXME("UTF-7 not supported\n");
-        SetLastError( ERROR_CALL_NOT_IMPLEMENTED );
-        return 0;
+        ret = utf7_wcstombs( src, srclen, dst, dstlen );
+        break;
     case CP_UNIXCP:
         if (unix_cptable)
         {
-- 
2.1.2


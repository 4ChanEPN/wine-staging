From a905d238bf7bdfa11ba1a78cea673bd7c835ee19 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Fri, 12 May 2017 04:05:24 +0200
Subject: winebuild: Use Windows 7 WOW64 signature for syscall thunks.

---
 dlls/ntdll/signal_i386.c |  2 ++
 include/winternl.h       |  2 +-
 tools/winebuild/spec32.c | 32 ++++++++++++++++++++++++++------
 3 files changed, 29 insertions(+), 7 deletions(-)

diff --git a/dlls/ntdll/signal_i386.c b/dlls/ntdll/signal_i386.c
index f071ea3b79b..602688820a1 100644
--- a/dlls/ntdll/signal_i386.c
+++ b/dlls/ntdll/signal_i386.c
@@ -481,6 +481,7 @@ static wine_signal_handler handlers[256];
 static BOOL fpux_support;  /* whether the CPU supports extended fpu context */
 
 extern void DECLSPEC_NORETURN __wine_restore_regs( const CONTEXT *context );
+extern void DECLSPEC_NORETURN __wine_syscall_dispatcher( void );
 
 enum i386_trap_code
 {
@@ -2376,6 +2377,7 @@ NTSTATUS signal_alloc_thread( TEB **teb )
         *teb = addr;
         (*teb)->Tib.Self = &(*teb)->Tib;
         (*teb)->Tib.ExceptionList = (void *)~0UL;
+        (*teb)->WOW32Reserved = __wine_syscall_dispatcher;
         thread_data = (struct ntdll_thread_data *)(*teb)->SpareBytes1;
         if (!(thread_data->fs = wine_ldt_alloc_fs()))
         {
diff --git a/include/winternl.h b/include/winternl.h
index ae3163daeac..6b0624290fa 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -322,7 +322,7 @@ typedef struct _TEB
     PVOID                        CsrClientThread;                   /* 03c/0070 */
     PVOID                        Win32ThreadInfo;                   /* 040/0078 */
     ULONG                        Win32ClientInfo[31];               /* 044/0080 used for user32 private data in Wine */
-    PVOID                        WOW32Reserved;                     /* 0c0/0100 */
+    PVOID                        WOW32Reserved;                     /* 0c0/0100 used for ntdll syscall thunks */
     ULONG                        CurrentLocale;                     /* 0c4/0108 */
     ULONG                        FpSoftwareStatusRegister;          /* 0c8/010c */
     PVOID                        SystemReserved1[54];               /* 0cc/0110 used for krnl386.exe16 private data in Wine */
diff --git a/tools/winebuild/spec32.c b/tools/winebuild/spec32.c
index fbde7ce6937..452e26fa949 100644
--- a/tools/winebuild/spec32.c
+++ b/tools/winebuild/spec32.c
@@ -297,24 +297,44 @@ static void output_syscall_thunks( DLLSPEC *spec )
         output( "\t%s\n", func_declaration(name) );
         output( "%s\n", asm_globl(name) );
         output_cfi( ".cfi_startproc" );
-        output( "\tmovl $%s, %%eax\n", asm_name(odp->impl_name) );
-        output( "\tmovl $__wine_syscall_dispatcher, %%edx\n" );
-        output( "\tcall *%%edx\n" );
-        output( "\tret $%d\n", get_args_size(odp) );
+        output( "\t.byte 0xb8\n" );                               /* mov eax, SYSCALL */
+        output( "\t.long %d\n", i );
+        output( "\t.byte 0x33,0xc9\n" );                          /* xor ecx, ecx */
+        output( "\t.byte 0x8d,0x54,0x24,0x04\n" );                /* lea edx, [esp + 4] */
+        output( "\t.byte 0x64,0xff,0x15,0xc0,0x00,0x00,0x00\n" ); /* call dword ptr fs:[0C0h] */
+        output( "\t.byte 0x83,0xc4,0x04\n" );                     /* add esp, 4 */
+        output( "\t.byte 0xc2\n" );                               /* ret X */
+        output( "\t.short %d\n", get_args_size(odp) );
         output_cfi( ".cfi_endproc" );
         output_function_size( name );
     }
 
+    output( "\n/* syscall table */\n\n" );
+    output( "\t.data\n" );
+    output( "%s\n", asm_globl("__wine_syscall_table") );
+    for (i = 0; i < spec->nb_syscalls; i++)
+    {
+        ORDDEF *odp = spec->syscalls[i];
+        output ("\t%s %s\n", get_asm_ptr_keyword(), asm_name(odp->impl_name) );
+    }
+
+    output( "\n/* syscall dispatcher */\n\n" );
+    output( "\t.text\n" );
     output( "\t.align %d\n", get_alignment(16) );
     output( "\t%s\n", func_declaration("__wine_syscall_dispatcher") );
     output( "%s\n", asm_globl("__wine_syscall_dispatcher") );
     output_cfi( ".cfi_startproc" );
     output( "\tadd $4, %%esp\n" );
-    output( "\tjmp *%%eax\n" );
+    if (UsePIC)
+    {
+        output( "\tcall 1f\n" );
+        output( "1:\tpopl %%ecx\n" );
+        output( "\tjmpl *(%s-1b)(%%ecx,%%eax,%d)\n", asm_name("__wine_syscall_table"), get_ptr_size() );
+    }
+    else output( "\tjmpl *%s(,%%eax,4)\n", asm_name("__wine_syscall_table") );
     output( "\tret\n" );
     output_cfi( ".cfi_endproc" );
     output_function_size( "__wine_syscall_dispatcher" );
-    output( "\t.previous\n" );
 }
 
 /*******************************************************************
-- 
2.12.2


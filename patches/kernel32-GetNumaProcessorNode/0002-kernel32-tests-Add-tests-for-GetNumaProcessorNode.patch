From 24212987a7f995c9219be5807c6d70bd5d0f6f2d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sat, 18 Oct 2014 06:00:48 +0200
Subject: kernel32/tests: Add tests for GetNumaProcessorNode.

---
 dlls/kernel32/tests/Makefile.in |  1 +
 dlls/kernel32/tests/cpu.c       | 77 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 78 insertions(+)
 create mode 100644 dlls/kernel32/tests/cpu.c

diff --git a/dlls/kernel32/tests/Makefile.in b/dlls/kernel32/tests/Makefile.in
index 2f2ac5f..50b0d8d 100644
--- a/dlls/kernel32/tests/Makefile.in
+++ b/dlls/kernel32/tests/Makefile.in
@@ -8,6 +8,7 @@ C_SRCS = \
 	codepage.c \
 	comm.c \
 	console.c \
+	cpu.c \
 	debugger.c \
 	directory.c \
 	drive.c \
diff --git a/dlls/kernel32/tests/cpu.c b/dlls/kernel32/tests/cpu.c
new file mode 100644
index 0000000..405d990
--- /dev/null
+++ b/dlls/kernel32/tests/cpu.c
@@ -0,0 +1,77 @@
+/*
+ * Unit test suite for cpu functions
+ *
+ * Copyright 2014 Michael MÃ¼ller
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include "wine/test.h"
+#include "winbase.h"
+#include "winnls.h"
+
+static BOOL (WINAPI *pGetNumaProcessorNode)(UCHAR, PUCHAR);
+
+static void InitFunctionPointers(void)
+{
+    HMODULE hkernel32 = GetModuleHandleA("kernel32");
+
+    pGetNumaProcessorNode = (void *)GetProcAddress(hkernel32, "GetNumaProcessorNode");
+}
+
+static void test_GetNumaProcessorNode(void)
+{
+    SYSTEM_INFO si;
+    UCHAR node;
+    BOOL ret;
+    int i;
+
+    if (!pGetNumaProcessorNode)
+    {
+        win_skip("GetNumaProcessorNode() is missing\n");
+        return;
+    }
+
+    GetSystemInfo(&si);
+
+    for (i = 0; i < 256; i++)
+    {
+        ret = pGetNumaProcessorNode(i, &node);
+        if (i < si.dwNumberOfProcessors)
+        {
+            ok(ret, "expected TRUE, got FALSE for processor %d\n", i);
+            ok(node != 0xFF, "expected node != 0xFF, but got 0xFF\n");
+        }
+        else
+        {
+            ok(!ret, "expected FALSE, got TRUE for processor %d\n", i);
+            ok(node == 0xFF, "expected node == 0xFF, but got %x\n", node);
+            ok(GetLastError() == ERROR_INVALID_PARAMETER, "expected ERROR_INVALID_PARAMETER, got %d\n", GetLastError());
+        }
+    }
+
+    /* crashes on windows */
+    if (0)
+    {
+        ok(!pGetNumaProcessorNode(0, NULL), "expected return value FALSE, got TRUE\n");
+        ok(GetLastError() == ERROR_INVALID_PARAMETER, "expected ERROR_INVALID_PARAMETER, got %d\n", GetLastError());
+    }
+}
+
+START_TEST(cpu)
+{
+    InitFunctionPointers();
+    test_GetNumaProcessorNode();
+}
-- 
1.9.1


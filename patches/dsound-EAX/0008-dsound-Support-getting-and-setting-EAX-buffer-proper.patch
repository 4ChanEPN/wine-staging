From 3765b43e4c646b3cbbcfbec79a2e84791d88349e Mon Sep 17 00:00:00 2001
From: Mark Harmstone <mark@harmstone.com>
Date: Fri, 27 Mar 2015 20:48:19 +0000
Subject: [PATCH 08/18] dsound: Support getting and setting EAX buffer
 properties.
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------2.0.5"

This is a multi-part message in MIME format.
--------------2.0.5
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit

---
 dlls/dsound/buffer.c         |  2 ++
 dlls/dsound/dsound_eax.h     |  4 +++
 dlls/dsound/dsound_private.h |  2 ++
 dlls/dsound/eax.c            | 64 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 72 insertions(+)


--------------2.0.5
Content-Type: text/x-patch; name="0008-dsound-Support-getting-and-setting-EAX-buffer-proper.patch"
Content-Transfer-Encoding: 8bit
Content-Disposition: attachment; filename="0008-dsound-Support-getting-and-setting-EAX-buffer-proper.patch"

diff --git a/dlls/dsound/buffer.c b/dlls/dsound/buffer.c
index 4ceb176..9ebf213 100644
--- a/dlls/dsound/buffer.c
+++ b/dlls/dsound/buffer.c
@@ -1095,6 +1095,8 @@ HRESULT IDirectSoundBufferImpl_Create(
 	/* calculate fragment size and write lead */
 	DSOUND_RecalcFormat(dsb);
 
+	dsb->eax.reverb_mix = EAX_REVERBMIX_USEDISTANCE;
+
 	if (dsb->dsbd.dwFlags & DSBCAPS_CTRL3D) {
 		dsb->ds3db_ds3db.dwSize = sizeof(DS3DBUFFER);
 		dsb->ds3db_ds3db.vPosition.x = 0.0;
diff --git a/dlls/dsound/dsound_eax.h b/dlls/dsound/dsound_eax.h
index d9e88f4..56b4263 100644
--- a/dlls/dsound/dsound_eax.h
+++ b/dlls/dsound/dsound_eax.h
@@ -118,6 +118,10 @@ typedef struct {
     EFXEAXREVERBPROPERTIES eax_props;
 } eax_info;
 
+typedef struct {
+    float reverb_mix;
+} eax_buffer_info;
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/dlls/dsound/dsound_private.h b/dlls/dsound/dsound_private.h
index d9be65b..0aef20f 100644
--- a/dlls/dsound/dsound_private.h
+++ b/dlls/dsound/dsound_private.h
@@ -178,6 +178,8 @@ struct IDirectSoundBufferImpl
     DSFilter*                   filters;
     CPFIELDSPROC                cp_fields_proc;
 
+    eax_buffer_info             eax;
+
     struct list entry;
 };
 
diff --git a/dlls/dsound/eax.c b/dlls/dsound/eax.c
index 3b06495..56a76f6 100644
--- a/dlls/dsound/eax.c
+++ b/dlls/dsound/eax.c
@@ -178,6 +178,38 @@ HRESULT WINAPI EAX_Get(IDirectSoundBufferImpl *buf, REFGUID guidPropSet,
         }
 
         return S_OK;
+    } else if (IsEqualGUID(&DSPROPSETID_EAXBUFFER_ReverbProperties, guidPropSet)) {
+        EAXBUFFER_REVERBPROPERTIES *props;
+
+        if (!buf->device->eax.using_eax)
+            init_eax(buf->device);
+
+        switch (dwPropID) {
+            case DSPROPERTY_EAXBUFFER_ALL:
+                if (cbPropData < sizeof(EAXBUFFER_REVERBPROPERTIES))
+                    return E_FAIL;
+
+                props = pPropData;
+
+                props->fMix = buf->eax.reverb_mix;
+
+                *pcbReturned = sizeof(EAXBUFFER_REVERBPROPERTIES);
+            break;
+
+            case DSPROPERTY_EAXBUFFER_REVERBMIX:
+                if (cbPropData < sizeof(float))
+                    return E_FAIL;
+
+                *(float*)pPropData = buf->eax.reverb_mix;
+
+                *pcbReturned = sizeof(float);
+            break;
+
+            default:
+                return E_PROP_ID_UNSUPPORTED;
+        }
+
+        return S_OK;
     }
 
     return E_PROP_ID_UNSUPPORTED;
@@ -275,6 +307,38 @@ HRESULT WINAPI EAX_Set(IDirectSoundBufferImpl *buf, REFGUID guidPropSet,
         }
 
         return S_OK;
+    } else if (IsEqualGUID(&DSPROPSETID_EAXBUFFER_ReverbProperties, guidPropSet)) {
+        EAXBUFFER_REVERBPROPERTIES *props;
+
+        if (!buf->device->eax.using_eax)
+            init_eax(buf->device);
+
+        switch (dwPropID) {
+            case DSPROPERTY_EAXBUFFER_ALL:
+                if (cbPropData != sizeof(EAXBUFFER_REVERBPROPERTIES))
+                    return E_FAIL;
+
+                props = pPropData;
+
+                TRACE("setting reverb mix to %f\n", props->fMix);
+
+                buf->eax.reverb_mix = props->fMix;
+            break;
+
+            case DSPROPERTY_EAXBUFFER_REVERBMIX:
+                if (cbPropData != sizeof(float))
+                    return E_FAIL;
+
+                TRACE("setting reverb mix to %f\n", *(float*)pPropData);
+
+                buf->eax.reverb_mix = *(float*)pPropData;
+            break;
+
+            default:
+                return E_PROP_ID_UNSUPPORTED;
+        }
+
+        return S_OK;
     }
 
     return E_PROP_ID_UNSUPPORTED;

--------------2.0.5--



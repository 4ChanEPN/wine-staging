From af45ec89198e3561d37515ce1befb8be6afa5171 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sat, 29 Mar 2014 06:50:40 +0100
Subject: dxva2: Implement stubs for IDirectXVideoDecoder interface (MPEG2)

---
 dlls/dxva2/Makefile.in     |    3 +-
 dlls/dxva2/dxva2_private.h |   43 +++++++++-
 dlls/dxva2/mpeg2decoder.c  |  198 ++++++++++++++++++++++++++++++++++++++++++++
 dlls/dxva2/videoservices.c |   24 ++----
 4 files changed, 247 insertions(+), 21 deletions(-)
 create mode 100644 dlls/dxva2/mpeg2decoder.c

diff --git a/dlls/dxva2/Makefile.in b/dlls/dxva2/Makefile.in
index 7ee5b1c..96ce1e6 100644
--- a/dlls/dxva2/Makefile.in
+++ b/dlls/dxva2/Makefile.in
@@ -5,4 +5,5 @@ EXTRALIBS = -lX11 -lva -lva-x11
 C_SRCS = \
 	main.c \
 	videoservices.c \
-	devicemanager.c
+	devicemanager.c \
+	mpeg2decoder.c
diff --git a/dlls/dxva2/dxva2_private.h b/dlls/dxva2/dxva2_private.h
index ff0de54..7976275 100644
--- a/dlls/dxva2/dxva2_private.h
+++ b/dlls/dxva2/dxva2_private.h
@@ -1,5 +1,42 @@
+/*
+ * Copyright 2014 Michael MÃ¼ller for Pipelight
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
 #include "dxva2api.h"
+#include <va/va_x11.h>
+
+typedef struct
+{
+    IDirectXVideoAccelerationService IDirectXVideoAccelerationService_iface;
+    IDirectXVideoDecoderService      IDirectXVideoDecoderService_iface;
+    IDirectXVideoProcessorService    IDirectXVideoProcessorService_iface;
+
+    LONG refCount;
+    IDirect3DDevice9 *device;
+} DirectXVideoAccelerationServiceImpl;
+
+extern BOOL va_initialized  DECLSPEC_HIDDEN;
+extern Display *x11_display DECLSPEC_HIDDEN;
+extern VADisplay va_display DECLSPEC_HIDDEN;
+
+extern void dxva2_mutex_lock( void )   DECLSPEC_HIDDEN;
+extern void dxva2_mutex_unlock( void ) DECLSPEC_HIDDEN;
 
-BOOL    videoservice_init( void );
-HRESULT videoservice_create( IDirect3DDevice9 *device, REFIID riid, void **ppv );
-HRESULT devicemanager_create( UINT *resetToken, void **ppv );
\ No newline at end of file
+extern BOOL    videoservice_init( void ) DECLSPEC_HIDDEN;
+extern HRESULT videoservice_create( IDirect3DDevice9 *device, REFIID riid, void **ppv ) DECLSPEC_HIDDEN;
+extern HRESULT devicemanager_create( UINT *resetToken, void **ppv ) DECLSPEC_HIDDEN;
+extern HRESULT mpeg2decoder_create( IDirectXVideoDecoderService *videodecoder, void **ppv ) DECLSPEC_HIDDEN;
diff --git a/dlls/dxva2/mpeg2decoder.c b/dlls/dxva2/mpeg2decoder.c
new file mode 100644
index 0000000..7a4e65d
--- /dev/null
+++ b/dlls/dxva2/mpeg2decoder.c
@@ -0,0 +1,198 @@
+/*
+ * Copyright 2014 Sebastian Lackner for Pipelight
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#include <stdarg.h>
+#include "windef.h"
+#include "winbase.h"
+
+#include "wine/debug.h"
+
+#define COBJMACROS
+#include "dxva2api.h"
+#include "dxva2_private.h"
+#include "PhysicalMonitorEnumerationAPI.h"
+#include "LowLevelMonitorConfigurationAPI.h"
+#include "HighLevelMonitorConfigurationAPI.h"
+
+WINE_DEFAULT_DEBUG_CHANNEL(dxva2);
+
+typedef struct
+{
+    IDirectXVideoDecoder IDirectXVideoDecoder_iface;
+
+    LONG refCount;
+    IDirectXVideoDecoderService *videodecoder;
+} DirectXVideoDecoderMPEG2Impl;
+
+static inline DirectXVideoDecoderMPEG2Impl *impl_from_DirectXVideoDecoderMPEG2( IDirectXVideoDecoder *iface )
+{
+    return CONTAINING_RECORD(iface, DirectXVideoDecoderMPEG2Impl, IDirectXVideoDecoder_iface);
+}
+
+/*****************************************************************************
+ * IDirectXVideoDecoder interface (MPEG 2)
+ */
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_QueryInterface( IDirectXVideoDecoder *iface, REFIID riid, LPVOID *ppv )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+    TRACE("(%p/%p)->(%s, %p)\n", iface, This, debugstr_guid(riid), ppv);
+
+    *ppv = NULL;
+
+    if (IsEqualIID(riid, &IID_IUnknown) || IsEqualIID(riid, &IID_IDirectXVideoDecoder))
+        *ppv = (LPVOID)iface;
+
+    if (*ppv)
+    {
+        IUnknown_AddRef((IUnknown *)(*ppv));
+        return S_OK;
+    }
+
+    FIXME("No interface for %s\n", debugstr_guid(riid));
+    return E_NOINTERFACE;
+}
+
+static ULONG WINAPI DirectXVideoDecoderMPEG2_AddRef( IDirectXVideoDecoder *iface )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+    ULONG refCount = InterlockedIncrement(&This->refCount);
+
+    TRACE("(%p)->() AddRef from %d\n", This, refCount - 1);
+
+    return refCount;
+}
+
+static ULONG WINAPI DirectXVideoDecoderMPEG2_Release( IDirectXVideoDecoder *iface )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+    ULONG refCount = InterlockedDecrement(&This->refCount);
+
+    TRACE("(%p)->() Release from %d\n", This, refCount + 1);
+
+    if (!refCount)
+    {
+        TRACE("Destroying\n");
+        IDirectXVideoDecoderService_Release(This->videodecoder);
+        CoTaskMemFree(This);
+    }
+
+    return refCount;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_GetVideoDecoderService( IDirectXVideoDecoder *iface, IDirectXVideoDecoderService **ppService )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%p)\n", This, ppService);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_GetCreationParameters( IDirectXVideoDecoder *iface, GUID *pDeviceGuid, DXVA2_VideoDesc *pVideoDesc,
+                                                                      DXVA2_ConfigPictureDecode *pConfig, IDirect3DSurface9 ***pDecoderRenderTargets,
+                                                                      UINT *pNumSurfaces )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%p, %p, %p, %p, %p)\n", This, pDeviceGuid, pVideoDesc, pConfig, pDecoderRenderTargets, pNumSurfaces);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_GetBuffer( IDirectXVideoDecoder *iface, UINT BufferType, void **ppBuffer, UINT *pBufferSize )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%u, %p, %p)\n", This, BufferType, ppBuffer, pBufferSize);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_ReleaseBuffer( IDirectXVideoDecoder *iface, UINT BufferType )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%u)\n", This, BufferType);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_BeginFrame( IDirectXVideoDecoder *iface, IDirect3DSurface9 *pRenderTarget, void *pvPVPData )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%p, %p)\n", This, pRenderTarget, pvPVPData);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_EndFrame( IDirectXVideoDecoder *iface, HANDLE *pHandleComplete )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%p)\n", This, pHandleComplete);
+
+    return E_NOTIMPL;
+}
+
+static HRESULT WINAPI DirectXVideoDecoderMPEG2_Execute( IDirectXVideoDecoder *iface, const DXVA2_DecodeExecuteParams *pExecuteParams )
+{
+    DirectXVideoDecoderMPEG2Impl *This = impl_from_DirectXVideoDecoderMPEG2(iface);
+
+    FIXME("(%p)->(%p)\n", This, pExecuteParams);
+
+    return E_NOTIMPL;
+}
+
+static const IDirectXVideoDecoderVtbl DirectXVideoDecoderMPEG2_VTable =
+{
+    DirectXVideoDecoderMPEG2_QueryInterface,
+    DirectXVideoDecoderMPEG2_AddRef,
+    DirectXVideoDecoderMPEG2_Release,
+    DirectXVideoDecoderMPEG2_GetVideoDecoderService,
+    DirectXVideoDecoderMPEG2_GetCreationParameters,
+    DirectXVideoDecoderMPEG2_GetBuffer,
+    DirectXVideoDecoderMPEG2_ReleaseBuffer,
+    DirectXVideoDecoderMPEG2_BeginFrame,
+    DirectXVideoDecoderMPEG2_EndFrame,
+    DirectXVideoDecoderMPEG2_Execute
+};
+
+HRESULT mpeg2decoder_create( IDirectXVideoDecoderService *videodecoder, void **ppv )
+{
+    DirectXVideoDecoderMPEG2Impl *mpeg2decoder;
+
+    if (!ppv)
+        return E_INVALIDARG;
+
+    *ppv = NULL;
+
+    mpeg2decoder = CoTaskMemAlloc(sizeof(DirectXVideoDecoderMPEG2Impl));
+    if (!mpeg2decoder)
+        return E_OUTOFMEMORY;
+
+    mpeg2decoder->IDirectXVideoDecoder_iface.lpVtbl = &DirectXVideoDecoderMPEG2_VTable;
+    mpeg2decoder->refCount = 1;
+    mpeg2decoder->videodecoder = videodecoder;
+    *ppv = mpeg2decoder;
+
+    IDirectXVideoDecoderService_AddRef(videodecoder);
+
+    return S_OK;
+}
\ No newline at end of file
diff --git a/dlls/dxva2/videoservices.c b/dlls/dxva2/videoservices.c
index a80ec09..23c24fb 100644
--- a/dlls/dxva2/videoservices.c
+++ b/dlls/dxva2/videoservices.c
@@ -29,8 +29,6 @@
 #include "LowLevelMonitorConfigurationAPI.h"
 #include "HighLevelMonitorConfigurationAPI.h"
 
-#include <va/va_x11.h>
-
 WINE_DEFAULT_DEBUG_CHANNEL(dxva2);
 
 static CRITICAL_SECTION dxva2_cs;
@@ -43,9 +41,9 @@ static CRITICAL_SECTION_DEBUG dxva2_cs_debug =
 };
 static CRITICAL_SECTION dxva2_cs = {&dxva2_cs_debug, -1, 0, 0, 0, 0};
 
-static BOOL va_initialized = FALSE;
-static Display *x11_display;
-static VADisplay va_display;
+BOOL va_initialized = FALSE;
+Display *x11_display;
+VADisplay va_display;
 
 struct dxva2_profiles
 {
@@ -108,12 +106,12 @@ const struct dxva2_formats format_table[] =
     {0,                           VA_FOURCC_411R, 0,                   FALSE}, /* TODO */
 };
 
-static void dxva2_mutex_lock( void )
+void dxva2_mutex_lock( void )
 {
     EnterCriticalSection(&dxva2_cs);
 }
 
-static void dxva2_mutex_unlock( void )
+void dxva2_mutex_unlock( void )
 {
     LeaveCriticalSection(&dxva2_cs);
 }
@@ -250,16 +248,6 @@ err:
     return result;
 }
 
-typedef struct
-{
-    IDirectXVideoAccelerationService IDirectXVideoAccelerationService_iface;
-    IDirectXVideoDecoderService      IDirectXVideoDecoderService_iface;
-    IDirectXVideoProcessorService    IDirectXVideoProcessorService_iface;
-
-    LONG refCount;
-    IDirect3DDevice9 *device;
-} DirectXVideoAccelerationServiceImpl;
-
 static inline DirectXVideoAccelerationServiceImpl *impl_from_IDirectXVideoAccelerationService( IDirectXVideoAccelerationService *iface )
 {
     return CONTAINING_RECORD(iface, DirectXVideoAccelerationServiceImpl, IDirectXVideoAccelerationService_iface);
@@ -752,6 +740,8 @@ HRESULT videoservice_create( IDirect3DDevice9 *device, REFIID riid, void **ppv )
     if (!device || !riid || !ppv)
         return E_INVALIDARG;
 
+    *ppv = NULL;
+
     videoservice = CoTaskMemAlloc(sizeof(DirectXVideoAccelerationServiceImpl));
     if (!videoservice)
         return E_OUTOFMEMORY;
-- 
1.7.9.5


From 10a86e0d87850cc77ee13b9e814dc8a9a558721b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Tue, 12 Aug 2014 20:25:18 +0200
Subject: kernel32/tests: Add tests for GetFinalPathNameByHandle

---
 dlls/kernel32/tests/file.c | 204 +++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 204 insertions(+)

diff --git a/dlls/kernel32/tests/file.c b/dlls/kernel32/tests/file.c
index ddfa019..55e9045 100644
--- a/dlls/kernel32/tests/file.c
+++ b/dlls/kernel32/tests/file.c
@@ -34,6 +34,7 @@
 #include "winerror.h"
 #include "winnls.h"
 #include "fileapi.h"
+#include "ntsecapi.h"
 
 static HANDLE (WINAPI *pFindFirstFileExA)(LPCSTR,FINDEX_INFO_LEVELS,LPVOID,FINDEX_SEARCH_OPS,LPVOID,DWORD);
 static BOOL (WINAPI *pReplaceFileA)(LPCSTR, LPCSTR, LPCSTR, DWORD, LPVOID, LPVOID);
@@ -46,6 +47,8 @@ static HANDLE (WINAPI *pOpenFileById)(HANDLE, LPFILE_ID_DESCRIPTOR, DWORD, DWORD
 static BOOL (WINAPI *pSetFileValidData)(HANDLE, LONGLONG);
 static HRESULT (WINAPI *pCopyFile2)(PCWSTR,PCWSTR,COPYFILE2_EXTENDED_PARAMETERS*);
 static HANDLE (WINAPI *pCreateFile2)(LPCWSTR, DWORD, DWORD, DWORD, CREATEFILE2_EXTENDED_PARAMETERS*);
+static DWORD (WINAPI* pGetFinalPathNameByHandleA)(HANDLE, LPSTR, DWORD, DWORD);
+static DWORD (WINAPI* pGetFinalPathNameByHandleW)(HANDLE, LPWSTR, DWORD, DWORD);
 
 /* keep filename and filenameW the same */
 static const char filename[] = "testfile.xxx";
@@ -85,6 +88,8 @@ static void InitFunctionPointers(void)
     pSetFileValidData = (void *) GetProcAddress(hkernel32, "SetFileValidData");
     pCopyFile2 = (void *) GetProcAddress(hkernel32, "CopyFile2");
     pCreateFile2 = (void *) GetProcAddress(hkernel32, "CreateFile2");
+    pGetFinalPathNameByHandleA = (void *) GetProcAddress(hkernel32, "GetFinalPathNameByHandleA");
+    pGetFinalPathNameByHandleW = (void *) GetProcAddress(hkernel32, "GetFinalPathNameByHandleW");
 }
 
 static void test__hread( void )
@@ -4145,6 +4150,203 @@ todo_wine
     }
 }
 
+
+static void test_GetFinalPathNameByHandleA(void)
+{
+    static char prefix[] = "GetFinalPathNameByHandleA";
+    static char dos_prefix[] = "\\\\?\\";
+    char temp_path[MAX_PATH], test_path[MAX_PATH];
+    char long_path[MAX_PATH], result_path[MAX_PATH];
+    char dos_path[sizeof(dos_prefix) + MAX_PATH];
+    HANDLE hFile;
+    DWORD count;
+    UINT ret;
+
+    if (!pGetFinalPathNameByHandleA)
+    {
+        win_skip("GetFinalPathNameByHandleA is missing\n");
+        return;
+    }
+
+    /* Test calling with INVALID_HANDLE_VALUE */
+    SetLastError(0xdeadbeaf);
+    count = pGetFinalPathNameByHandleA(INVALID_HANDLE_VALUE, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == 0, "Expected length 0, got %d\n", count);
+    ok(GetLastError() == ERROR_INVALID_HANDLE, "Expected ERROR_INVALID_HANDLE, got %d\n", GetLastError());
+
+    count = GetTempPathA(MAX_PATH, temp_path);
+    ok(count, "Failed to get temp path, error %d\n", GetLastError());
+    if (!count) return;
+
+    ret = GetTempFileNameA(temp_path, prefix, 0, test_path);
+    ok(ret != 0, "GetTempFileNameA error %d\n", GetLastError());
+    if (!ret) return;
+
+    ret = GetLongPathNameA(test_path, long_path, MAX_PATH);
+    ok(ret != 0, "GetLongPathNameA error %d\n", GetLastError());
+    if (!ret) return;
+
+    hFile = CreateFileA(test_path, GENERIC_READ | GENERIC_WRITE, 0, NULL,
+                        CREATE_ALWAYS, FILE_FLAG_DELETE_ON_CLOSE, 0);
+    ok(hFile != INVALID_HANDLE_VALUE, "CreateFileA error %d\n", GetLastError());
+    if (hFile == INVALID_HANDLE_VALUE) return;
+
+    dos_path[0] = 0;
+    strcat(dos_path, dos_prefix);
+    strcat(dos_path, long_path);
+
+    /* Test VOLUME_NAME_DOS with sufficient buffer size */
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleA(hFile, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == strlen(dos_path), "Expected length %d, got %d\n", strlen(dos_path), count);
+    if (count && count <= MAX_PATH)
+        ok(lstrcmpiA(dos_path, result_path) == 0, "Expected %s, got %s\n", dos_path, result_path);
+
+    /* Test VOLUME_NAME_DOS with insufficient buffer size */
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleA(hFile, result_path, strlen(dos_path)-2, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == strlen(dos_path), "Expected length %d, got %d\n", strlen(dos_path), count);
+    ok(result_path[0] == 0x11, "Result path was modified\n");
+
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleA(hFile, result_path, strlen(dos_path)-1, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == strlen(dos_path), "Expected length %d, got %d\n", strlen(dos_path), count);
+    ok(result_path[0] == 0x11, "Result path was modified\n");
+
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleA(hFile, result_path, strlen(dos_path), FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == strlen(dos_path), "Expected length %d, got %d\n", strlen(dos_path), count);
+    ok(result_path[0] == 0x11, "Result path was modified\n");
+
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleA(hFile, result_path, strlen(dos_path)+1, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == strlen(dos_path), "Expected length %d, got %d\n", strlen(dos_path), count);
+    ok(result_path[0] != 0x11, "Result path was not modified\n");
+    ok(result_path[strlen(dos_path)+1] == 0x11, "Buffer overflow\n");
+
+    CloseHandle(hFile);
+}
+
+static void test_GetFinalPathNameByHandleW(void)
+{
+    static WCHAR prefix[] = {'G','e','t','F','i','n','a','l','P','a','t','h','N','a','m','e','B','y','H','a','n','d','l','e','W','\0'};
+    static WCHAR dos_prefix[] = {'\\','\\','?','\\','\0'};
+    WCHAR temp_path[MAX_PATH], test_path[MAX_PATH];
+    WCHAR long_path[MAX_PATH], result_path[MAX_PATH];
+    WCHAR dos_path[MAX_PATH + sizeof(dos_prefix)];
+    WCHAR drive_part[MAX_PATH];
+    WCHAR *file_part;
+    WCHAR volume_path[MAX_PATH+50];
+    WCHAR nt_path[2*MAX_PATH];
+    HANDLE hFile;
+    DWORD count;
+    UINT ret;
+
+    if (!pGetFinalPathNameByHandleW)
+    {
+        win_skip("GetFinalPathNameByHandleW is missing\n");
+        return;
+    }
+
+    /* Test calling with INVALID_HANDLE_VALUE */
+    SetLastError(0xdeadbeaf);
+    count = pGetFinalPathNameByHandleW(INVALID_HANDLE_VALUE, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == 0, "Expected length 0, got %d\n", count);
+    ok(GetLastError() == ERROR_INVALID_HANDLE, "Expected ERROR_INVALID_HANDLE, got %d\n", GetLastError());
+
+    count = GetTempPathW(MAX_PATH, temp_path);
+    ok(count, "Failed to get temp path, error %d\n", GetLastError());
+    if (!count) return;
+
+    ret = GetTempFileNameW(temp_path, prefix, 0, test_path);
+    ok(ret != 0, "GetTempFileNameW error %d\n", GetLastError());
+    if (!ret) return;
+
+    ret = GetLongPathNameW(test_path, long_path, MAX_PATH);
+    ok(ret != 0, "GetLongPathNameW error %d\n", GetLastError());
+    if (!ret) return;
+
+    hFile = CreateFileW(test_path, GENERIC_READ | GENERIC_WRITE, 0, NULL,
+                        CREATE_ALWAYS, FILE_FLAG_DELETE_ON_CLOSE, 0);
+    ok(hFile != INVALID_HANDLE_VALUE, "CreateFileW error %d\n", GetLastError());
+    if (hFile == INVALID_HANDLE_VALUE) return;
+
+    dos_path[0] = 0;
+    lstrcatW(dos_path, dos_prefix);
+    lstrcatW(dos_path, long_path);
+
+    /* Test VOLUME_NAME_DOS with sufficient buffer size */
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleW(hFile, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == lstrlenW(dos_path), "Expected length %d, got %d\n", lstrlenW(dos_path), count);
+    if (count && count <= MAX_PATH)
+        ok(lstrcmpiW(dos_path, result_path) == 0, "Expected %s, got %s\n", wine_dbgstr_w(dos_path), wine_dbgstr_w(result_path));
+
+    /* Test VOLUME_NAME_DOS with insufficient buffer size */
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleW(hFile, result_path, lstrlenW(dos_path)-1, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == lstrlenW(dos_path) + 1, "Expected length %d, got %d\n", lstrlenW(dos_path) + 1, count);
+    ok(result_path[0] == 0x1111, "Result path was modified\n");
+
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleW(hFile, result_path, lstrlenW(dos_path), FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == lstrlenW(dos_path) + 1, "Expected length %d, got %d\n", lstrlenW(dos_path) + 1, count);
+    ok(result_path[0] == 0x1111, "Result path was modified\n");
+
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleW(hFile, result_path, lstrlenW(dos_path)+1, FILE_NAME_NORMALIZED | VOLUME_NAME_DOS);
+    ok(count == lstrlenW(dos_path), "Expected length %d, got %d\n", lstrlenW(dos_path), count);
+    ok(result_path[0] != 0x1111, "Result path was not modified\n");
+    ok(result_path[lstrlenW(dos_path)+1] == 0x1111, "Buffer overflow\n");
+
+    if (!GetVolumePathNameW(long_path, drive_part, MAX_PATH))
+    {
+        ok(0, "Failed to get drive part, error: %d\n", GetLastError());
+        CloseHandle(hFile);
+        return;
+    }
+
+    if (!GetVolumeNameForVolumeMountPointW(drive_part, volume_path, sizeof(volume_path) / sizeof(WCHAR)))
+        ok(0, "GetVolumeNameForVolumeMountPointW failed, error: %d\n", GetLastError());
+    else
+    {
+        /* Test for VOLUME_NAME_GUID */
+        lstrcatW(volume_path, long_path + lstrlenW(drive_part));
+        memset(result_path, 0x11, sizeof(result_path));
+        count = pGetFinalPathNameByHandleW(hFile, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_GUID);
+        ok(count == lstrlenW(volume_path), "Expected length %d, got %d\n", lstrlenW(volume_path), count);
+        if (count && count <= MAX_PATH)
+            ok(lstrcmpiW(volume_path, result_path) == 0, "Expected %s, got %s\n",
+               wine_dbgstr_w(volume_path), wine_dbgstr_w(result_path));
+    }
+
+    /* Test for VOLUME_NAME_NONE */
+    file_part = long_path + lstrlenW(drive_part) - 1;
+    memset(result_path, 0x11, sizeof(result_path));
+    count = pGetFinalPathNameByHandleW(hFile, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_NONE);
+    ok(count == lstrlenW(file_part), "Expected length %d, got %d\n", lstrlenW(file_part), count);
+    if (count && count <= MAX_PATH)
+        ok(lstrcmpiW(file_part, result_path) == 0, "Expected %s, got %s\n",
+           wine_dbgstr_w(file_part), wine_dbgstr_w(result_path));
+
+    drive_part[lstrlenW(drive_part)-1] = 0;
+    if (!QueryDosDeviceW(drive_part, nt_path, sizeof(nt_path) / sizeof(WCHAR)))
+        ok(0, "QueryDosDeviceW failed, error: %d\n", GetLastError());
+    else
+    {
+        /* Test for VOLUME_NAME_NT */
+        lstrcatW(nt_path, file_part);
+        memset(result_path, 0x11, sizeof(result_path));
+        count = pGetFinalPathNameByHandleW(hFile, result_path, MAX_PATH, FILE_NAME_NORMALIZED | VOLUME_NAME_NT);
+        ok(count == lstrlenW(nt_path), "Expected length %d, got %d\n", lstrlenW(nt_path), count);
+        if (count && count <= MAX_PATH)
+            ok(lstrcmpiW(nt_path, result_path) == 0, "Expected %s, got %s\n",
+               wine_dbgstr_w(nt_path), wine_dbgstr_w(result_path));
+    }
+
+    CloseHandle(hFile);
+}
+
 START_TEST(file)
 {
     InitFunctionPointers();
@@ -4191,4 +4393,6 @@ START_TEST(file)
     test_SetFileValidData();
     test_WriteFileGather();
     test_file_access();
+    test_GetFinalPathNameByHandleA();
+    test_GetFinalPathNameByHandleW();
 }
-- 
2.1.0


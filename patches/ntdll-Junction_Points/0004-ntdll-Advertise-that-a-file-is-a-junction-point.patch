From 624df21e36009121bf5d7ecab86fb0ace8ca15d7 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 16 Jan 2014 21:01:25 -0700
Subject: ntdll: Advertise that a file is a junction point.

---
 dlls/ntdll/file.c       |    7 +++++--
 dlls/ntdll/tests/file.c |    5 +++++
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
index 682e2e8..3230d95 100644
--- a/dlls/ntdll/file.c
+++ b/dlls/ntdll/file.c
@@ -182,8 +182,8 @@ int get_file_info( const char *path, struct stat *st, ULONG *xattr )
     if (S_ISLNK( st->st_mode ))
     {
         ret = stat( path, st );
+        st->st_mode |= S_IFLNK;
         if (ret == -1) return ret;
-        if (S_ISDIR( st->st_mode )) *xattr |= FILE_ATTRIBUTE_REPARSE_POINT;
     }
     len = xattr_get( path, SAMBA_XATTR_DOS_ATTRIB, hexattr, sizeof(hexattr)-1 );
     if (len == -1) return ret;
@@ -2088,7 +2088,7 @@ static inline ULONG get_file_attributes( const ULONG xattr, const struct stat *s
 {
     ULONG attr;
 
-    if (S_ISDIR(st->st_mode))
+    if (st->st_mode & S_IFDIR)
         attr = FILE_ATTRIBUTE_DIRECTORY;
     else
         attr = FILE_ATTRIBUTE_ARCHIVE;
@@ -2098,6 +2098,9 @@ static inline ULONG get_file_attributes( const ULONG xattr, const struct stat *s
 
     if (!(st->st_mode & (S_IWUSR | S_IWGRP | S_IWOTH)))
         attr |= FILE_ATTRIBUTE_READONLY;
+
+    if (st->st_mode & S_IFLNK)
+        attr |= FILE_ATTRIBUTE_REPARSE_POINT;
     return attr;
 }
 
diff --git a/dlls/ntdll/tests/file.c b/dlls/ntdll/tests/file.c
index cc241c8..3f1973c 100644
--- a/dlls/ntdll/tests/file.c
+++ b/dlls/ntdll/tests/file.c
@@ -2770,6 +2770,11 @@ static void test_junction_points(void)
     bret = DeviceIoControl(hJunction, FSCTL_SET_REPARSE_POINT, (LPVOID)buffer, buffer_len, NULL, 0, &dwret, 0);
     ok(bret, "Failed to create junction point! (0x%x)\n", GetLastError());
 
+    /* Check the file attributes of the junction point */
+    dwret = GetFileAttributesW(junction_path);
+    ok(dwret != (DWORD)~0, "Junction point doesn't exist (attributes: 0x%x)!\n", dwret);
+    ok(dwret & FILE_ATTRIBUTE_REPARSE_POINT, "File is not a junction point! (attributes: %d)\n", dwret);
+
     /* Read back the junction point */
     HeapFree(GetProcessHeap(), 0, buffer);
     buffer_len = sizeof(*buffer) + MAX_PATH*sizeof(WCHAR);
-- 
1.7.9.5


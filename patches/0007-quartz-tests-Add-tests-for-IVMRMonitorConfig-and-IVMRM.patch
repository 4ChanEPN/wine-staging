From 8c8c8c24a8c90c292c6af2c83fd2587a04492a4f Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Fri, 22 Nov 2013 18:40:59 +0100
Subject: quartz/tests: Add tests for IVMRMonitorConfig and IVMRMonitorConfig9
 interface

---
 dlls/quartz/tests/videorenderer.c |  210 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 205 insertions(+), 5 deletions(-)

diff --git a/dlls/quartz/tests/videorenderer.c b/dlls/quartz/tests/videorenderer.c
index ce1ac29..df45e1e 100644
--- a/dlls/quartz/tests/videorenderer.c
+++ b/dlls/quartz/tests/videorenderer.c
@@ -22,6 +22,9 @@
 
 #include "wine/test.h"
 #include "dshow.h"
+#include "initguid.h"
+#include "d3d9.h"
+#include "vmr9.h"
 
 #define QI_SUCCEED(iface, riid, ppv) hr = IUnknown_QueryInterface(iface, &riid, (LPVOID*)&ppv); \
     ok(hr == S_OK, "IUnknown_QueryInterface returned %x\n", hr); \
@@ -33,6 +36,8 @@
 }
 
 static IUnknown *pVideoRenderer = NULL;
+static IUnknown *pVMR7 = NULL;
+static IUnknown *pVMR9 = NULL;
 
 static int create_video_renderer(void)
 {
@@ -150,16 +155,211 @@ static void test_basefilter(void)
     IBaseFilter_Release(base);
 }
 
+static int create_vmr7(void)
+{
+    HRESULT hr;
+
+    hr = CoCreateInstance(&CLSID_VideoMixingRenderer, NULL, CLSCTX_INPROC_SERVER,
+                          &IID_IUnknown, (LPVOID*)&pVMR7);
+    return (hr == S_OK && pVMR7 != NULL);
+}
+
+static void release_vmr7(void)
+{
+    HRESULT hr;
+
+    hr = IUnknown_Release(pVMR7);
+    ok(hr == 0, "IUnknown_Release failed with %x\n", hr);
+}
+
+static void test_monitorconfig7(void)
+{
+    HRESULT hr;
+    IVMRMonitorConfig *pMonitorConfig = NULL;
+    VMRGUID guid;
+    VMRMONITORINFO info[8];
+    DWORD numdev_total, numdev;
+
+    hr = IUnknown_QueryInterface(pVMR7, &IID_IVMRMonitorConfig, (LPVOID*)&pMonitorConfig);
+    ok(hr == S_OK, "IUnknown_QueryInterface returned %x.\n", hr);
+    ok(pMonitorConfig != NULL, "pMonitorConfig is NULL.\n");
+    if (!pMonitorConfig) goto out;
+
+    hr = IVMRMonitorConfig_SetMonitor(pMonitorConfig, NULL);
+    ok(hr == E_POINTER, "SetMonitor returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig_GetMonitor(pMonitorConfig, NULL);
+    ok(hr == E_POINTER, "GetMonitor returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig_SetDefaultMonitor(pMonitorConfig, NULL);
+    ok(hr == E_POINTER, "SetDefaultMonitor returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig_GetDefaultMonitor(pMonitorConfig, NULL);
+    ok(hr == E_POINTER, "GetDefaultMonitor returned %x, expected E_POINTER.\n", hr);
+
+    memset(&guid, 0, sizeof(guid));
+    guid.pGUID = NULL; /* default DirectDraw device */
+    hr = IVMRMonitorConfig_SetMonitor(pMonitorConfig, &guid);
+    ok(hr == S_OK, "SetMonitor failed with %x.\n", hr);
+
+    memset(&guid, 255, sizeof(guid));
+    hr = IVMRMonitorConfig_GetMonitor(pMonitorConfig, &guid);
+    ok(hr == S_OK, "GetMonitor failed with %x.\n", hr);
+    ok(guid.pGUID == NULL, "GetMonitor returned guid.pGUID = %p, expected NULL.\n", guid.pGUID);
+
+    memset(&guid, 0, sizeof(guid));
+    guid.pGUID = NULL; /* default DirectDraw device */
+    hr = IVMRMonitorConfig_SetDefaultMonitor(pMonitorConfig, &guid);
+    ok(hr == S_OK, "SetDefaultMonitor failed with %x.\n", hr);
+
+    memset(&guid, 255, sizeof(guid));
+    hr = IVMRMonitorConfig_GetDefaultMonitor(pMonitorConfig, &guid);
+    ok(hr == S_OK, "GetDefaultMonitor failed with %x.\n", hr);
+    ok(guid.pGUID == NULL, "GetDefaultMonitor returned guid.pGUID = %p, expected NULL.\n", guid.pGUID);
+
+    hr = IVMRMonitorConfig_GetAvailableMonitors(pMonitorConfig, NULL, 0, NULL);
+    ok(hr == E_POINTER, "GetAvailableMonitors returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig_GetAvailableMonitors(pMonitorConfig, info, 0, &numdev_total);
+    ok(hr == E_INVALIDARG, "GetAvailableMonitors returned %x, expected E_INVALIDARG.\n", hr);
+
+    numdev_total = 0;
+    hr = IVMRMonitorConfig_GetAvailableMonitors(pMonitorConfig, NULL, 0, &numdev_total);
+    ok(hr == S_OK, "GetAvailableMonitors failed with %x.\n", hr);
+    ok(numdev_total > 0, "GetAvailableMonitors returned numdev_total = %d, expected > 0.\n", numdev_total);
+
+    /* check if its possible to provide a buffer which is too small for all entries */
+    if (numdev_total > 1)
+    {
+        hr = IVMRMonitorConfig_GetAvailableMonitors(pMonitorConfig, info, 1, &numdev);
+        ok(hr == S_OK, "GetAvailableMonitors failed with %x.\n", hr);
+        ok(numdev == 1, "GetAvailableMonitors returned numdev = %d, expected 1.\n", numdev);
+    }
+
+    /* don't request information for more monitors than memory available */
+    if (numdev_total > sizeof(info)/sizeof(info[0]))
+        numdev_total = sizeof(info)/sizeof(info[0]);
+    hr = IVMRMonitorConfig_GetAvailableMonitors(pMonitorConfig, info, numdev_total, &numdev);
+    ok(hr == S_OK, "GetAvailableMonitors failed with %x.\n", hr);
+    ok(numdev == numdev_total, "GetAvailableMonitors returned numdev = %d, expected %d.\n", numdev, numdev_total);
+
+    /* TODO: Add more tests for content of info */
+
+out:
+    if (pMonitorConfig) IVMRMonitorConfig_Release(pMonitorConfig);
+}
+
+static int create_vmr9(void)
+{
+    HRESULT hr;
+
+    hr = CoCreateInstance(&CLSID_VideoMixingRenderer9, NULL, CLSCTX_INPROC_SERVER,
+                          &IID_IUnknown, (LPVOID*)&pVMR9);
+    return (hr == S_OK && pVMR7 != NULL);
+}
+
+static void release_vmr9(void)
+{
+    HRESULT hr;
+
+    hr = IUnknown_Release(pVMR9);
+    ok(hr == 0, "IUnknown_Release failed with %x\n", hr);
+}
+
+static void test_monitorconfig9(void)
+{
+    HRESULT hr;
+    IVMRMonitorConfig9 *pMonitorConfig = NULL;
+    UINT uDev;
+    VMR9MonitorInfo info[8];
+    DWORD numdev_total, numdev;
+
+    hr = IUnknown_QueryInterface(pVMR9, &IID_IVMRMonitorConfig9, (LPVOID*)&pMonitorConfig);
+    ok(hr == S_OK, "IUnknown_QueryInterface returned %x.\n", hr);
+    ok(pMonitorConfig != NULL, "pMonitorConfig is NULL.\n");
+    if (!pMonitorConfig) goto out;
+
+    hr = IVMRMonitorConfig9_GetMonitor(pMonitorConfig, NULL);
+    ok(hr == E_POINTER, "GetMonitor returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig9_GetDefaultMonitor(pMonitorConfig, NULL);
+    ok(hr == E_POINTER, "GetDefaultMonitor returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig9_SetMonitor(pMonitorConfig, 0);
+    ok(hr == S_OK, "SetMonitor failed with %x.\n", hr);
+
+    uDev = 0xdeadbeef;
+    hr = IVMRMonitorConfig9_GetMonitor(pMonitorConfig, &uDev);
+    ok(hr == S_OK, "GetMonitor failed with %x.\n", hr);
+    ok(uDev == 0, "GetMonitor returned uDev = %d, expected 0.\n", uDev);
+
+    hr = IVMRMonitorConfig9_SetDefaultMonitor(pMonitorConfig, 0);
+    ok(hr == S_OK, "SetDefaultMonitor failed with %x.\n", hr);
+
+    uDev = 0xdeadbeef;
+    hr = IVMRMonitorConfig9_GetDefaultMonitor(pMonitorConfig, &uDev);
+    ok(hr == S_OK, "GetDefaultMonitor failed with %x.\n", hr);
+    ok(uDev == 0, "GetDefaultMonitor returned uDev = %d, expected 0.\n", uDev);
+
+    hr = IVMRMonitorConfig9_GetAvailableMonitors(pMonitorConfig, NULL, 0, NULL);
+    ok(hr == E_POINTER, "GetAvailableMonitors returned %x, expected E_POINTER.\n", hr);
+
+    hr = IVMRMonitorConfig9_GetAvailableMonitors(pMonitorConfig, info, 0, &numdev_total);
+    ok(hr == E_INVALIDARG, "GetAvailableMonitors returned %x, expected E_INVALIDARG.\n", hr);
+
+    numdev_total = 0;
+    hr = IVMRMonitorConfig9_GetAvailableMonitors(pMonitorConfig, NULL, 0, &numdev_total);
+    ok(hr == S_OK, "GetAvailableMonitors failed with %x.\n", hr);
+    ok(numdev_total > 0, "GetAvailableMonitors returned numdev_total = %d, expected > 0.\n", numdev_total);
+
+    /* check if its possible to provide a buffer which is too small for all entries */
+    if (numdev_total > 1)
+    {
+        hr = IVMRMonitorConfig9_GetAvailableMonitors(pMonitorConfig, info, 1, &numdev);
+        ok(hr == S_OK, "GetAvailableMonitors failed with %x.\n", hr);
+        ok(numdev == 1, "GetAvailableMonitors returned numdev = %d, expected 1.\n", numdev);
+    }
+
+    if (numdev_total > sizeof(info)/sizeof(info[0]))
+        numdev_total = sizeof(info)/sizeof(info[0]);
+    hr = IVMRMonitorConfig9_GetAvailableMonitors(pMonitorConfig, info, numdev_total, &numdev);
+    ok(hr == S_OK, "GetAvailableMonitors failed with %x.\n", hr);
+    ok(numdev == numdev_total, "GetAvailableMonitors returned numdev = %d, expected %d.\n", numdev, numdev_total);
+
+    /* TODO: Add more tests for content of info */
+
+out:
+    if (pMonitorConfig) IVMRMonitorConfig9_Release(pMonitorConfig);
+}
+
 START_TEST(videorenderer)
 {
     CoInitialize(NULL);
-    if (!create_video_renderer())
-        return;
 
-    test_query_interface();
-    test_basefilter();
+    /* Video Renderer tests */
+    if (create_video_renderer())
+    {
+        test_query_interface();
+        test_basefilter();
+        release_video_renderer();
+    }else
+        skip("VideoRenderer is not available.\n");
+
+    /* Video Mixing Renderer 7 tests */
+    if (create_vmr7())
+    {
+        test_monitorconfig7();
+        release_vmr7();
+    }else
+        skip("VideoMixingRenderer7 is not available.\n");
 
-    release_video_renderer();
+    /* Video Mixing Renderer 9 tests */
+    if (create_vmr9())
+    {
+        test_monitorconfig9();
+        release_vmr9();
+    }else
+        skip("VideoMixingRenderer9 is not available.\n");
 
     CoUninitialize();
 }
-- 
1.7.9.5


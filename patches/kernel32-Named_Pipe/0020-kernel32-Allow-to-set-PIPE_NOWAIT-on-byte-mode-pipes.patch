From f638980305e10bb66e8656a9ca1ce3639761d6fe Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Mon, 11 Aug 2014 05:34:19 +0200
Subject: kernel32: Allow to set PIPE_NOWAIT on byte-mode pipes.

This patch implements the functionality to set PIPE_NOWAIT on regular bytemode
pipes. This patch also extends the test to show that the implemented behaviour
matches the native implementation.
---
 dlls/kernel32/tests/pipe.c |   37 +++++++++++++++++++++++++++++--------
 dlls/ntdll/file.c          |    2 ++
 2 files changed, 31 insertions(+), 8 deletions(-)

diff --git a/dlls/kernel32/tests/pipe.c b/dlls/kernel32/tests/pipe.c
index 29430a0..e8b0067 100644
--- a/dlls/kernel32/tests/pipe.c
+++ b/dlls/kernel32/tests/pipe.c
@@ -2419,7 +2419,7 @@ static void test_overlapped(void)
     CloseHandle(thread);
 }
 
-static void test_nowait(void)
+static void test_nowait(int pipemode)
 {
     HANDLE hnp;
     HANDLE hFile;
@@ -2430,7 +2430,7 @@ static void test_nowait(void)
     DWORD lpmode;
 
     hnp = CreateNamedPipeA(PIPENAME, PIPE_ACCESS_DUPLEX,
-                           PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_NOWAIT,
+                           pipemode | PIPE_NOWAIT,
                            /* nMaxInstances */ 1,
                            /* nOutBufSize */ 1024,
                            /* nInBufSize */ 1024,
@@ -2461,7 +2461,7 @@ static void test_nowait(void)
         ok(readden == 0, "got %d bytes\n", readden);
         ok(GetLastError() == ERROR_NO_DATA, "GetLastError() returned %08x, expected ERROR_NO_DATA\n", GetLastError());
 
-        lpmode = PIPE_READMODE_MESSAGE | PIPE_NOWAIT;
+        lpmode = (pipemode & PIPE_READMODE_MESSAGE) | PIPE_NOWAIT;
         ok(SetNamedPipeHandleState(hFile, &lpmode, NULL, NULL), "Change mode\n");
 
         /* send message from server to client */
@@ -2485,8 +2485,18 @@ static void test_nowait(void)
         ok(WriteFile(hFile, obuf, 0, &written, NULL), "WriteFile\n");
         ok(written == 0, "write file len\n");
 
-        ok(ReadFile(hnp, ibuf, sizeof(ibuf), &readden, NULL), "ReadFile() failed: %08x\n", GetLastError());
-        ok(readden == 0, "got %d bytes\n", readden);
+        if (pipemode != PIPE_TYPE_BYTE)
+        {
+            ok(ReadFile(hnp, ibuf, sizeof(ibuf), &readden, NULL), "ReadFile() failed: %08x\n", GetLastError());
+            ok(readden == 0, "got %d bytes\n", readden);
+        }
+        else
+        {
+            SetLastError(0xdeadbeef);
+            ok(!ReadFile(hnp, ibuf, sizeof(ibuf), &readden, NULL), "ReadFile() succeeded\n");
+            ok(readden == 0, "got %d bytes\n", readden);
+            ok(GetLastError() == ERROR_NO_DATA, "GetLastError() returned %08x, expected ERROR_NO_DATA\n", GetLastError());
+        }
 
         readden = 0xdeadbeef;
         SetLastError(0xdeadbeef);
@@ -2498,8 +2508,18 @@ static void test_nowait(void)
         ok(WriteFile(hnp, obuf, 0, &written, NULL), "WriteFile\n");
         ok(written == 0, "write file len\n");
 
-        ok(ReadFile(hFile, ibuf, sizeof(ibuf), &readden, NULL), "ReadFile() failed: %08x\n", GetLastError());
-        ok(readden == 0, "got %d bytes\n", readden);
+        if (pipemode != PIPE_TYPE_BYTE)
+        {
+            ok(ReadFile(hFile, ibuf, sizeof(ibuf), &readden, NULL), "ReadFile() failed: %08x\n", GetLastError());
+            ok(readden == 0, "got %d bytes\n", readden);
+        }
+        else
+        {
+            SetLastError(0xdeadbeef);
+            ok(!ReadFile(hFile, ibuf, sizeof(ibuf), &readden, NULL), "ReadFile() succeeded\n");
+            ok(readden == 0, "got %d bytes\n", readden);
+            ok(GetLastError() == ERROR_NO_DATA, "GetLastError() returned %08x, expected ERROR_NO_DATA\n", GetLastError());
+        }
 
         readden = 0xdeadbeef;
         SetLastError(0xdeadbeef);
@@ -2791,7 +2811,8 @@ START_TEST(pipe)
     test_CreatePipe();
     test_impersonation();
     test_overlapped();
-    test_nowait();
+    test_nowait(PIPE_TYPE_BYTE);
+    test_nowait(PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE);
     test_NamedPipeHandleState();
     test_readfileex_pending();
 }
diff --git a/dlls/ntdll/file.c b/dlls/ntdll/file.c
index 7c0a2ee..cb75072 100644
--- a/dlls/ntdll/file.c
+++ b/dlls/ntdll/file.c
@@ -705,6 +705,8 @@ NTSTATUS WINAPI NtReadFile(HANDLE hFile, HANDLE hEvent,
                 while (result > 0 && !ret);
             }
         }
+        else if (message_mode_flags & NAMED_PIPE_NONBLOCKING_MODE)
+            result = recv( unix_handle, (char *)buffer + total, length - total, MSG_DONTWAIT );
         else
             result = read( unix_handle, (char *)buffer + total, length - total );
 
-- 
1.7.9.5


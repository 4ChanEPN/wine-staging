From b474b9b40dc95c477890ef0b1407e647b46a22d0 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Thu, 30 Apr 2015 05:43:21 +0200
Subject: ntdll: Introduce a helper function to check for existance of server
 handles.

---
 dlls/ntdll/ntdll.spec |  1 +
 dlls/ntdll/server.c   | 21 +++++++++++++++++++++
 dlls/ws2_32/socket.c  | 13 ++++---------
 include/wine/server.h |  1 +
 4 files changed, 27 insertions(+), 9 deletions(-)

diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 28165ef..0c73380 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1417,6 +1417,7 @@
 # Server interface
 @ cdecl -norelay wine_server_call(ptr)
 @ cdecl wine_server_fd_to_handle(long long long ptr)
+@ cdecl wine_server_handle_exists(long long)
 @ cdecl wine_server_handle_to_fd(long long ptr ptr)
 @ cdecl wine_server_release_fd(long long)
 @ cdecl wine_server_send_fd(long)
diff --git a/dlls/ntdll/server.c b/dlls/ntdll/server.c
index 69d01be..03f85ff 100644
--- a/dlls/ntdll/server.c
+++ b/dlls/ntdll/server.c
@@ -974,6 +974,27 @@ int CDECL wine_server_fd_to_handle( int fd, unsigned int access, unsigned int at
 
 
 /***********************************************************************
+ *           wine_server_handle_exists   (NTDLL.@)
+ *
+ * Checks if a file handle exists (without duplicating it).
+ *
+ * PARAMS
+ *     handle  [I] Wine file handle.
+ *     access  [I] Win32 file access rights requested.
+ *
+ * RETURNS
+ *     NTSTATUS code
+ */
+int CDECL wine_server_handle_exists( HANDLE handle, unsigned int access )
+{
+    int unix_fd, needs_close, ret;
+    ret = server_get_unix_fd( handle, access, &unix_fd, &needs_close, NULL, NULL );
+    if (!ret && needs_close) close( unix_fd );
+    return !ret;
+}
+
+
+/***********************************************************************
  *           wine_server_handle_to_fd   (NTDLL.@)
  *
  * Retrieve the file descriptor corresponding to a file handle.
diff --git a/dlls/ws2_32/socket.c b/dlls/ws2_32/socket.c
index ef43186..22dd084 100644
--- a/dlls/ws2_32/socket.c
+++ b/dlls/ws2_32/socket.c
@@ -2940,18 +2940,13 @@ int WINAPI WS_bind(SOCKET s, const struct WS_sockaddr* name, int namelen)
  */
 int WINAPI WS_closesocket(SOCKET s)
 {
-    int res = SOCKET_ERROR, fd;
+    int res = SOCKET_ERROR;
     if (num_startup)
     {
-        fd = get_sock_fd(s, FILE_READ_DATA, NULL);
-        if (fd >= 0)
-        {
-            release_sock_fd(s, fd);
-            if (CloseHandle(SOCKET2HANDLE(s)))
-                res = 0;
-        }
-        else
+        if (!wine_server_handle_exists(SOCKET2HANDLE(s), FILE_READ_DATA))
             SetLastError(WSAENOTSOCK);
+        else if (CloseHandle(SOCKET2HANDLE(s)))
+            res = 0;
     }
     else
         SetLastError(WSANOTINITIALISED);
diff --git a/include/wine/server.h b/include/wine/server.h
index d573d1f..a114cf9 100644
--- a/include/wine/server.h
+++ b/include/wine/server.h
@@ -52,6 +52,7 @@ struct __server_request_info
 extern unsigned int wine_server_call( void *req_ptr );
 extern void CDECL wine_server_send_fd( int fd );
 extern int CDECL wine_server_fd_to_handle( int fd, unsigned int access, unsigned int attributes, HANDLE *handle );
+extern int CDECL wine_server_handle_exists( HANDLE handle, unsigned int access );
 extern int CDECL wine_server_handle_to_fd( HANDLE handle, unsigned int access, int *unix_fd, unsigned int *options );
 extern void CDECL wine_server_release_fd( HANDLE handle, int unix_fd );
 
-- 
2.3.5


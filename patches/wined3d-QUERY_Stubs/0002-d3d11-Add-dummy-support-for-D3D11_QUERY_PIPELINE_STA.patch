From 834cd708e0bc3ea23ea2a8b0c3563f9add49fcdd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sun, 22 Jan 2017 01:51:51 +0100
Subject: d3d11: Add dummy support for D3D11_QUERY_PIPELINE_STATISTICS query.

---
 dlls/d3d10core/tests/device.c |  2 +-
 dlls/d3d11/tests/d3d11.c      |  2 +-
 dlls/wined3d/query.c          | 47 +++++++++++++++++++++++++++++++++++++++++++
 include/wine/wined3d.h        | 15 ++++++++++++++
 4 files changed, 64 insertions(+), 2 deletions(-)

diff --git a/dlls/d3d10core/tests/device.c b/dlls/d3d10core/tests/device.c
index 8276f98873..12d690fb6d 100644
--- a/dlls/d3d10core/tests/device.c
+++ b/dlls/d3d10core/tests/device.c
@@ -3658,7 +3658,7 @@ static void test_create_query(void)
         {D3D10_QUERY_OCCLUSION,             FALSE, FALSE},
         {D3D10_QUERY_TIMESTAMP,             FALSE, FALSE},
         {D3D10_QUERY_TIMESTAMP_DISJOINT,    FALSE, FALSE},
-        {D3D10_QUERY_PIPELINE_STATISTICS,   FALSE, TRUE},
+        {D3D10_QUERY_PIPELINE_STATISTICS,   FALSE, FALSE},
         {D3D10_QUERY_OCCLUSION_PREDICATE,   TRUE,  FALSE},
         {D3D10_QUERY_SO_STATISTICS,         FALSE, FALSE},
         {D3D10_QUERY_SO_OVERFLOW_PREDICATE, TRUE,  FALSE},
diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index e532ee28c8..97b1f2ce1b 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -4645,7 +4645,7 @@ static void test_create_query(void)
         {D3D11_QUERY_OCCLUSION,                     D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_TIMESTAMP,                     D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_TIMESTAMP_DISJOINT,            D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
-        {D3D11_QUERY_PIPELINE_STATISTICS,           D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, TRUE},
+        {D3D11_QUERY_PIPELINE_STATISTICS,           D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_OCCLUSION_PREDICATE,           D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  FALSE},
         {D3D11_QUERY_SO_STATISTICS,                 D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_SO_OVERFLOW_PREDICATE,         D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  FALSE},
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index 95d735c05e..f1e0d680b9 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -301,6 +301,10 @@ static void wined3d_query_destroy_object(void *object)
     {
         HeapFree(GetProcessHeap(), 0, query);
     }
+    else if (query->type == WINED3D_QUERY_TYPE_PIPELINE_STATISTICS)
+    {
+        HeapFree(GetProcessHeap(), 0, query);
+    }
     else
     {
         ERR("Query %p has invalid type %#x.\n", query, query->type);
@@ -669,6 +673,20 @@ static BOOL wined3d_overflow_query_ops_issue(struct wined3d_query *query, DWORD
     return FALSE;
 }
 
+static BOOL wined3d_pipeline_query_ops_poll(struct wined3d_query *query, DWORD flags)
+{
+    TRACE("query %p, flags %#x.\n", query, flags);
+
+    return TRUE;
+}
+
+static BOOL wined3d_pipeline_query_ops_issue(struct wined3d_query *query, DWORD flags)
+{
+    FIXME("query %p, flags %#x.\n", query, flags);
+
+    return FALSE;
+}
+
 static const struct wined3d_query_ops event_query_ops =
 {
     wined3d_event_query_ops_poll,
@@ -861,6 +879,32 @@ static HRESULT wined3d_overflow_query_create(struct wined3d_device *device,
     return WINED3D_OK;
 }
 
+static const struct wined3d_query_ops pipeline_query_ops =
+{
+    wined3d_pipeline_query_ops_poll,
+    wined3d_pipeline_query_ops_issue,
+};
+
+static HRESULT wined3d_pipeline_query_create(struct wined3d_device *device,
+        enum wined3d_query_type type, void *parent, struct wined3d_query **query)
+{
+    static const struct wined3d_query_data_pipeline_statistics data;
+    struct wined3d_query *object;
+
+    FIXME("device %p, type %#x, parent %p, query %p.\n", device, type, parent, query);
+
+    if (!(object = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
+        return E_OUTOFMEMORY;
+
+    wined3d_query_init(object, device, type, &data,
+            sizeof(data), &pipeline_query_ops, parent);
+
+    TRACE("Created query %p.\n", object);
+    *query = object;
+
+    return WINED3D_OK;
+}
+
 HRESULT CDECL wined3d_query_create(struct wined3d_device *device,
         enum wined3d_query_type type, void *parent, struct wined3d_query **query)
 {
@@ -887,6 +931,9 @@ HRESULT CDECL wined3d_query_create(struct wined3d_device *device,
         case WINED3D_QUERY_TYPE_SO_OVERFLOW:
             return wined3d_overflow_query_create(device, type, parent, query);
 
+        case WINED3D_QUERY_TYPE_PIPELINE_STATISTICS:
+            return wined3d_pipeline_query_create(device, type, parent, query);
+
         default:
             FIXME("Unhandled query type %#x.\n", type);
             return WINED3DERR_NOTAVAILABLE;
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 30925d2ca3..52db093676 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -715,6 +715,21 @@ struct wined3d_query_data_so_statistics
     UINT64 needed;
 };
 
+struct wined3d_query_data_pipeline_statistics
+{
+    UINT64 ia_vertices;
+    UINT64 ia_primitives;
+    UINT64 vs_invocations;
+    UINT64 gs_invocations;
+    UINT64 gs_primitives;
+    UINT64 c_invocations;
+    UINT64 c_primitives;
+    UINT64 ps_invocations;
+    UINT64 hs_invocations;
+    UINT64 ds_invocations;
+    UINT64 cs_invocations;
+};
+
 #define WINED3DISSUE_BEGIN                                      (1u << 1)
 #define WINED3DISSUE_END                                        (1u << 0)
 #define WINED3DGETDATA_FLUSH                                    (1u << 0)
-- 
2.11.0


From 6313efefb1d2dc0adaaae123cee74678e0709fee Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sun, 22 Jan 2017 01:51:51 +0100
Subject: d3d11: Add dummy support for D3D11_QUERY_PIPELINE_STATISTICS query.

---
 dlls/d3d10core/tests/device.c |  2 +-
 dlls/d3d11/tests/d3d11.c      |  2 +-
 dlls/wined3d/query.c          | 50 +++++++++++++++++++++++++++++++++++++++++++
 include/wine/wined3d.h        | 15 +++++++++++++
 4 files changed, 67 insertions(+), 2 deletions(-)

diff --git a/dlls/d3d10core/tests/device.c b/dlls/d3d10core/tests/device.c
index c08004723cc..9958feb1c25 100644
--- a/dlls/d3d10core/tests/device.c
+++ b/dlls/d3d10core/tests/device.c
@@ -3824,7 +3824,7 @@ static void test_create_query(void)
         {D3D10_QUERY_OCCLUSION,             FALSE, FALSE},
         {D3D10_QUERY_TIMESTAMP,             FALSE, FALSE},
         {D3D10_QUERY_TIMESTAMP_DISJOINT,    FALSE, FALSE},
-        {D3D10_QUERY_PIPELINE_STATISTICS,   FALSE, TRUE},
+        {D3D10_QUERY_PIPELINE_STATISTICS,   FALSE, FALSE},
         {D3D10_QUERY_OCCLUSION_PREDICATE,   TRUE,  FALSE},
         {D3D10_QUERY_SO_STATISTICS,         FALSE, FALSE},
         {D3D10_QUERY_SO_OVERFLOW_PREDICATE, TRUE,  FALSE},
diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index a56bcd91f70..9c4b0392014 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -4598,7 +4598,7 @@ static void test_create_query(void)
         {D3D11_QUERY_OCCLUSION,                     D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_TIMESTAMP,                     D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_TIMESTAMP_DISJOINT,            D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
-        {D3D11_QUERY_PIPELINE_STATISTICS,           D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, TRUE},
+        {D3D11_QUERY_PIPELINE_STATISTICS,           D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_OCCLUSION_PREDICATE,           D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  FALSE},
         {D3D11_QUERY_SO_STATISTICS,                 D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_SO_OVERFLOW_PREDICATE,         D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  FALSE},
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index 3c7a3ae4f8a..1da1b3ea7ae 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -757,6 +757,20 @@ static BOOL wined3d_overflow_query_ops_issue(struct wined3d_query *query, DWORD
     return FALSE;
 }
 
+static BOOL wined3d_pipeline_query_ops_poll(struct wined3d_query *query, DWORD flags)
+{
+    TRACE("query %p, flags %#x.\n", query, flags);
+
+    return TRUE;
+}
+
+static BOOL wined3d_pipeline_query_ops_issue(struct wined3d_query *query, DWORD flags)
+{
+    FIXME("query %p, flags %#x.\n", query, flags);
+
+    return FALSE;
+}
+
 static void wined3d_event_query_ops_destroy(struct wined3d_query *query)
 {
     struct wined3d_event_query *event_query = wined3d_event_query_from_query(query);
@@ -1075,6 +1089,39 @@ static HRESULT wined3d_overflow_query_create(struct wined3d_device *device,
     return WINED3D_OK;
 }
 
+static void wined3d_pipeline_query_ops_destroy(struct wined3d_query *query)
+{
+    HeapFree(GetProcessHeap(), 0, query);
+}
+
+static const struct wined3d_query_ops pipeline_query_ops =
+{
+    wined3d_pipeline_query_ops_poll,
+    wined3d_pipeline_query_ops_issue,
+    wined3d_pipeline_query_ops_destroy,
+};
+
+static HRESULT wined3d_pipeline_query_create(struct wined3d_device *device,
+        enum wined3d_query_type type, void *parent, const struct wined3d_parent_ops *parent_ops,
+        struct wined3d_query **query)
+{
+    static const struct wined3d_query_data_pipeline_statistics data;
+    struct wined3d_query *object;
+
+    FIXME("device %p, type %#x, parent %p, query %p.\n", device, type, parent, query);
+
+    if (!(object = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
+        return E_OUTOFMEMORY;
+
+    wined3d_query_init(object, device, type, &data,
+            sizeof(data), &pipeline_query_ops, parent, parent_ops);
+
+    TRACE("Created query %p.\n", object);
+    *query = object;
+
+    return WINED3D_OK;
+}
+
 HRESULT CDECL wined3d_query_create(struct wined3d_device *device, enum wined3d_query_type type,
         void *parent, const struct wined3d_parent_ops *parent_ops, struct wined3d_query **query)
 {
@@ -1108,6 +1155,9 @@ HRESULT CDECL wined3d_query_create(struct wined3d_device *device, enum wined3d_q
         case WINED3D_QUERY_TYPE_SO_OVERFLOW:
             return wined3d_overflow_query_create(device, type, parent, parent_ops, query);
 
+        case WINED3D_QUERY_TYPE_PIPELINE_STATISTICS:
+            return wined3d_pipeline_query_create(device, type, parent, parent_ops, query);
+
         default:
             FIXME("Unhandled query type %#x.\n", type);
             return WINED3DERR_NOTAVAILABLE;
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 8697fbfa935..b81bc437efe 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -725,6 +725,21 @@ struct wined3d_query_data_so_statistics
     UINT64 primitives_generated;
 };
 
+struct wined3d_query_data_pipeline_statistics
+{
+    UINT64 ia_vertices;
+    UINT64 ia_primitives;
+    UINT64 vs_invocations;
+    UINT64 gs_invocations;
+    UINT64 gs_primitives;
+    UINT64 c_invocations;
+    UINT64 c_primitives;
+    UINT64 ps_invocations;
+    UINT64 hs_invocations;
+    UINT64 ds_invocations;
+    UINT64 cs_invocations;
+};
+
 #define WINED3DISSUE_BEGIN                                      (1u << 1)
 #define WINED3DISSUE_END                                        (1u << 0)
 #define WINED3DGETDATA_FLUSH                                    (1u << 0)
-- 
2.12.2


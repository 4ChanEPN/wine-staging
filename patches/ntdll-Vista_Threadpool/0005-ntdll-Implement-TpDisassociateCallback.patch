From e6ab4f5a5525d2d65cafef3b45ccd156105ebe46 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 4 Mar 2015 07:31:27 +0100
Subject: ntdll: Implement TpDisassociateCallback.

---
 dlls/ntdll/ntdll.spec   |  1 +
 dlls/ntdll/threadpool.c | 42 +++++++++++++++++++++++++++++++++++++++---
 2 files changed, 40 insertions(+), 3 deletions(-)

diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 5a698c4..f61728f 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -974,6 +974,7 @@
 @ stdcall TpAllocPool(ptr ptr)
 @ stdcall TpAllocWork(ptr ptr ptr ptr)
 @ stdcall TpCallbackMayRunLong(ptr)
+@ stdcall TpDisassociateCallback(ptr)
 @ stdcall TpPostWork(ptr)
 @ stdcall TpReleaseCleanupGroup(ptr)
 @ stdcall TpReleaseCleanupGroupMembers(ptr long ptr)
diff --git a/dlls/ntdll/threadpool.c b/dlls/ntdll/threadpool.c
index 8634f44..6bd3206 100644
--- a/dlls/ntdll/threadpool.c
+++ b/dlls/ntdll/threadpool.c
@@ -202,6 +202,7 @@ struct threadpool_instance
 {
     struct threadpool_object *object;
     DWORD                   threadid;
+    BOOL                    disassociated;
     BOOL                    may_run_long;
 };
 
@@ -1628,6 +1629,7 @@ static void CALLBACK threadpool_worker_proc( void *param )
             /* Initialize threadpool instance struct. */
             instance.object                     = object;
             instance.threadid                   = GetCurrentThreadId();
+            instance.disassociated              = FALSE;
             instance.may_run_long               = object->may_run_long;
 
             switch (object->type)
@@ -1666,9 +1668,12 @@ static void CALLBACK threadpool_worker_proc( void *param )
 
             RtlEnterCriticalSection( &pool->cs );
             pool->num_busy_workers--;
-            object->num_running_callbacks--;
-            if (!object->num_pending_callbacks && !object->num_running_callbacks)
-                RtlWakeAllConditionVariable( &object->finished_event );
+            if (!instance.disassociated)
+            {
+                object->num_running_callbacks--;
+                if (!object->num_pending_callbacks && !object->num_running_callbacks)
+                    RtlWakeAllConditionVariable( &object->finished_event );
+            }
             tp_object_release( object );
         }
 
@@ -1796,6 +1801,37 @@ NTSTATUS WINAPI TpCallbackMayRunLong( TP_CALLBACK_INSTANCE *instance )
 }
 
 /***********************************************************************
+ *           TpDisassociateCallback    (NTDLL.@)
+ */
+VOID WINAPI TpDisassociateCallback( TP_CALLBACK_INSTANCE *instance )
+{
+    struct threadpool_instance *this = impl_from_TP_CALLBACK_INSTANCE( instance );
+    struct threadpool_object *object = this->object;
+    struct threadpool *pool;
+
+    TRACE( "%p\n", instance );
+
+    if (this->threadid != GetCurrentThreadId())
+    {
+        ERR("called from wrong thread, ignoring\n");
+        return;
+    }
+
+    if (this->disassociated)
+        return;
+
+    pool = object->pool;
+    RtlEnterCriticalSection( &pool->cs );
+
+    object->num_running_callbacks--;
+    if (!object->num_pending_callbacks && !object->num_running_callbacks)
+        RtlWakeAllConditionVariable( &object->finished_event );
+
+    RtlLeaveCriticalSection( &pool->cs );
+    this->disassociated = TRUE;
+}
+
+/***********************************************************************
  *           TpPostWork    (NTDLL.@)
  */
 VOID WINAPI TpPostWork( TP_WORK *work )
-- 
2.4.4


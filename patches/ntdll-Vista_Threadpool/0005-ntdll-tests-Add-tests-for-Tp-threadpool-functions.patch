From 8e03c37240d2a0fafbe6347bc8d509ce5555757a Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Wed, 4 Mar 2015 13:17:04 +0100
Subject: ntdll/tests: Add tests for Tp* threadpool functions.

---
 dlls/ntdll/tests/threadpool.c | 228 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 228 insertions(+)

diff --git a/dlls/ntdll/tests/threadpool.c b/dlls/ntdll/tests/threadpool.c
index a75b622..4be3a8b 100644
--- a/dlls/ntdll/tests/threadpool.c
+++ b/dlls/ntdll/tests/threadpool.c
@@ -22,18 +22,37 @@
 
 static HMODULE hntdll = 0;
 static NTSTATUS (WINAPI *pTpAllocCleanupGroup)(TP_CLEANUP_GROUP **);
+static NTSTATUS (WINAPI *pTpAllocIoCompletion)(TP_IO **,HANDLE,PTP_WIN32_IO_CALLBACK,PVOID,TP_CALLBACK_ENVIRON *);
 static NTSTATUS (WINAPI *pTpAllocPool)(TP_POOL **,PVOID);
+static NTSTATUS (WINAPI *pTpAllocTimer)(TP_TIMER **,PTP_TIMER_CALLBACK,PVOID,TP_CALLBACK_ENVIRON *);
+static NTSTATUS (WINAPI *pTpAllocWait)(TP_WAIT **,PTP_WAIT_CALLBACK,PVOID,TP_CALLBACK_ENVIRON *);
 static NTSTATUS (WINAPI *pTpAllocWork)(TP_WORK **,PTP_WORK_CALLBACK,PVOID,TP_CALLBACK_ENVIRON *);
+static VOID     (WINAPI *pTpCallbackLeaveCriticalSectionOnCompletion)(TP_CALLBACK_INSTANCE *,CRITICAL_SECTION *);
 static NTSTATUS (WINAPI *pTpCallbackMayRunLong)(TP_CALLBACK_INSTANCE *);
+static VOID     (WINAPI *pTpCallbackReleaseMutexOnCompletion)(TP_CALLBACK_INSTANCE *,HANDLE);
 static VOID     (WINAPI *pTpCallbackReleaseSemaphoreOnCompletion)(TP_CALLBACK_INSTANCE *,HANDLE,DWORD);
+static VOID     (WINAPI *pTpCallbackSetEventOnCompletion)(TP_CALLBACK_INSTANCE *,HANDLE);
+static VOID     (WINAPI *pTpCallbackUnloadDllOnCompletion)(TP_CALLBACK_INSTANCE *,HMODULE);
+static VOID     (WINAPI *pTpCancelAsyncIoOperation)(TP_IO *);
 static VOID     (WINAPI *pTpDisassociateCallback)(TP_CALLBACK_INSTANCE *);
+static BOOL     (WINAPI *pTpIsTimerSet)(TP_TIMER *);
 static VOID     (WINAPI *pTpPostWork)(TP_WORK *);
 static VOID     (WINAPI *pTpReleaseCleanupGroup)(TP_CLEANUP_GROUP *);
 static VOID     (WINAPI *pTpReleaseCleanupGroupMembers)(TP_CLEANUP_GROUP *,BOOL,PVOID);
+static VOID     (WINAPI *pTpReleaseIoCompletion)(TP_IO *);
 static VOID     (WINAPI *pTpReleasePool)(TP_POOL *);
+static VOID     (WINAPI *pTpReleaseTimer)(TP_TIMER *);
+static VOID     (WINAPI *pTpReleaseWait)(TP_WAIT *);
 static VOID     (WINAPI *pTpReleaseWork)(TP_WORK *);
 static VOID     (WINAPI *pTpSetPoolMaxThreads)(TP_POOL *,DWORD);
+static BOOL     (WINAPI *pTpSetPoolMinThreads)(TP_POOL *,DWORD);
+static VOID     (WINAPI *pTpSetTimer)(TP_TIMER *,LARGE_INTEGER *,LONG,LONG);
+static VOID     (WINAPI *pTpSetWait)(TP_WAIT *,HANDLE,LARGE_INTEGER *);
 static NTSTATUS (WINAPI *pTpSimpleTryPost)(PTP_SIMPLE_CALLBACK,PVOID,TP_CALLBACK_ENVIRON *);
+static VOID     (WINAPI *pTpStartAsyncIoOperation)(TP_IO *);
+static VOID     (WINAPI *pTpWaitForIoCompletion)(TP_IO *,BOOL);
+static VOID     (WINAPI *pTpWaitForTimer)(TP_TIMER *,BOOL);
+static VOID     (WINAPI *pTpWaitForWait)(TP_WAIT *,BOOL);
 static VOID     (WINAPI *pTpWaitForWork)(TP_WORK *,BOOL);
 
 #define NTDLL_GET_PROC(func) \
@@ -54,18 +73,37 @@ static BOOL init_threadpool(void)
     }
 
     NTDLL_GET_PROC(TpAllocCleanupGroup);
+    NTDLL_GET_PROC(TpAllocIoCompletion);
     NTDLL_GET_PROC(TpAllocPool);
+    NTDLL_GET_PROC(TpAllocTimer);
+    NTDLL_GET_PROC(TpAllocWait);
     NTDLL_GET_PROC(TpAllocWork);
+    NTDLL_GET_PROC(TpCallbackLeaveCriticalSectionOnCompletion);
     NTDLL_GET_PROC(TpCallbackMayRunLong);
+    NTDLL_GET_PROC(TpCallbackReleaseMutexOnCompletion);
     NTDLL_GET_PROC(TpCallbackReleaseSemaphoreOnCompletion);
+    NTDLL_GET_PROC(TpCallbackSetEventOnCompletion);
+    NTDLL_GET_PROC(TpCallbackUnloadDllOnCompletion);
+    NTDLL_GET_PROC(TpCancelAsyncIoOperation);
     NTDLL_GET_PROC(TpDisassociateCallback);
+    NTDLL_GET_PROC(TpIsTimerSet);
     NTDLL_GET_PROC(TpPostWork);
     NTDLL_GET_PROC(TpReleaseCleanupGroup);
     NTDLL_GET_PROC(TpReleaseCleanupGroupMembers);
+    NTDLL_GET_PROC(TpReleaseIoCompletion);
     NTDLL_GET_PROC(TpReleasePool);
+    NTDLL_GET_PROC(TpReleaseTimer);
+    NTDLL_GET_PROC(TpReleaseWait);
     NTDLL_GET_PROC(TpReleaseWork);
     NTDLL_GET_PROC(TpSetPoolMaxThreads);
+    NTDLL_GET_PROC(TpSetPoolMinThreads);
+    NTDLL_GET_PROC(TpSetTimer);
+    NTDLL_GET_PROC(TpSetWait);
     NTDLL_GET_PROC(TpSimpleTryPost);
+    NTDLL_GET_PROC(TpStartAsyncIoOperation);
+    NTDLL_GET_PROC(TpWaitForIoCompletion);
+    NTDLL_GET_PROC(TpWaitForTimer);
+    NTDLL_GET_PROC(TpWaitForWait);
     NTDLL_GET_PROC(TpWaitForWork);
 
     if (!pTpAllocPool)
@@ -646,6 +684,191 @@ static void test_tp_disassociate(void)
     CloseHandle(semaphores[1]);
 }
 
+static void CALLBACK timer_cb(TP_CALLBACK_INSTANCE *instance, void *userdata, TP_TIMER *timer)
+{
+    trace("Running timer callback\n");
+    InterlockedIncrement( (LONG *)userdata );
+}
+
+static void test_tp_timer(void)
+{
+    TP_CALLBACK_ENVIRON environment;
+    TP_TIMER *timer;
+    TP_POOL *pool;
+    NTSTATUS status;
+    LONG userdata;
+    BOOL success;
+    LARGE_INTEGER when;
+    DWORD ticks;
+
+    /* Allocate new threadpool */
+    pool = NULL;
+    status = pTpAllocPool(&pool, NULL);
+    ok(!status, "TpAllocPool failed with status %x\n", status);
+    ok(pool != NULL, "expected pool != NULL\n");
+
+    /* Allocate new timer item */
+    timer = NULL;
+    memset(&environment, 0, sizeof(environment));
+    environment.Version = 1;
+    environment.Pool = pool;
+    status = pTpAllocTimer(&timer, timer_cb, &userdata, &environment);
+    ok(!status, "TpAllocTimer failed with status %x\n", status);
+    ok(timer != NULL, "expected timer != NULL\n");
+
+    success = pTpIsTimerSet(timer);
+    ok(!success, "expected TpIsTimerSet(...) = FALSE\n");
+
+    /* Set a relative timeout */
+    userdata = 0;
+    when.QuadPart = (ULONGLONG)500 * -10000;
+    pTpSetTimer(timer, &when, 0, 0);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Wait until timer has triggered */
+    pTpWaitForTimer(timer, FALSE);
+    Sleep(250);
+    ok(userdata == 0, "expected userdata = 0, got %u\n", userdata);
+    while (userdata == 0) Sleep(10);
+    ok(userdata == 1, "expected userdata = 1, got %u\n", userdata);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Set an absolute timeout */
+    userdata = 0;
+    NtQuerySystemTime( &when );
+    when.QuadPart += (ULONGLONG)500 * 10000;
+    pTpSetTimer(timer, &when, 0, 0);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Wait until timer has triggered */
+    pTpWaitForTimer(timer, FALSE);
+    Sleep(250);
+    ok(userdata == 0, "expected userdata = 0, got %u\n", userdata);
+    while (userdata == 0) Sleep(10);
+    ok(userdata == 1, "expected userdata = 1, got %u\n", userdata);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Test a relative timeout repeated periodically */
+    userdata = 0;
+    when.QuadPart = (ULONGLONG)50 * -10000;
+    pTpSetTimer(timer, &when, 50, 0);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Wait until the timer was triggered a couple of times */
+    ticks = GetTickCount();
+    while (userdata < 100) Sleep(10);
+    ticks = GetTickCount() - ticks;
+    pTpSetTimer(timer, NULL, 0, 0);
+    pTpWaitForTimer(timer, TRUE);
+    ok(ticks >= 4500 && ticks <= 5500, "expected approximately 5000 ticks, got %u\n", ticks);
+    success = pTpIsTimerSet(timer);
+    ok(!success, "expected TpIsTimerSet(...) = FALSE\n");
+
+    /* Test with zero timeout, we expect a call immediately */
+    userdata = 0;
+    when.QuadPart = 0;
+    pTpSetTimer(timer, &when, 0, 0);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Wait until timer has triggered */
+    pTpWaitForTimer(timer, FALSE);
+    ok(userdata == 1 || broken(userdata == 0) /* Win 8 */,
+       "expected userdata = 1, got %u\n", userdata);
+    while (userdata == 0) Sleep(10);
+    success = pTpIsTimerSet(timer);
+    ok(success, "expected TpIsTimerSet(...) = TRUE\n");
+
+    /* Unset the timer again */
+    pTpSetTimer(timer, NULL, 0, 0);
+    success = pTpIsTimerSet(timer);
+    ok(!success, "expected TpIsTimerSet(...) = FALSE\n");
+
+    /* Cleanup */
+    pTpReleaseTimer(timer);
+    pTpReleasePool(pool);
+}
+
+static void CALLBACK window_length_cb(TP_CALLBACK_INSTANCE *instance, void *userdata, TP_TIMER *timer)
+{
+    trace("Running window length callback\n");
+    (*(DWORD *)userdata) = GetTickCount();
+}
+
+static void test_tp_window_length(void)
+{
+    TP_CALLBACK_ENVIRON environment;
+    TP_TIMER *timer, *timer2;
+    DWORD ticks, ticks2;
+    TP_POOL *pool;
+    NTSTATUS status;
+    LARGE_INTEGER when;
+
+    /* Allocate new threadpool */
+    pool = NULL;
+    status = pTpAllocPool(&pool, NULL);
+    ok(!status, "TpAllocPool failed with status %x\n", status);
+    ok(pool != NULL, "expected pool != NULL\n");
+
+    /* Allocate two identical timers */
+    timer = NULL;
+    memset(&environment, 0, sizeof(environment));
+    environment.Version = 1;
+    environment.Pool = pool;
+    status = pTpAllocTimer(&timer, window_length_cb, &ticks, &environment);
+    ok(!status, "TpAllocTimer failed with status %x\n", status);
+    ok(timer != NULL, "expected timer != NULL\n");
+
+    timer2 = NULL;
+    status = pTpAllocTimer(&timer2, window_length_cb, &ticks2, &environment);
+    ok(!status, "TpAllocTimer failed with status %x\n", status);
+    ok(timer2 != NULL, "expected timer2 != NULL\n");
+
+    /* Choose parameters so that timers are not merged */
+    ticks = ticks2 = 0;
+    NtQuerySystemTime( &when );
+    when.QuadPart += (ULONGLONG)500 * 10000;
+    pTpSetTimer(timer2, &when, 0, 0);
+    Sleep(50);
+    when.QuadPart -= (ULONGLONG)400 * 10000;
+    pTpSetTimer(timer, &when, 0, 200);
+    while (!ticks || !ticks2) Sleep(10);
+    ok(ticks2 >= ticks + 150, "expected that timers are not merged\n");
+
+    /* On Windows the timers also get merged in this case */
+    ticks = ticks2 = 0;
+    NtQuerySystemTime( &when );
+    when.QuadPart += (ULONGLONG)100 * 10000;
+    pTpSetTimer(timer, &when, 0, 450);
+    Sleep(50);
+    when.QuadPart += (ULONGLONG)400 * 10000;
+    pTpSetTimer(timer2, &when, 0, 0);
+    while (!ticks || !ticks2) Sleep(10);
+    todo_wine
+    ok(ticks2 >= ticks - 50 && ticks2 <= ticks + 50, "expected that timers are merged\n");
+
+    /* Timers will be merged */
+    ticks = ticks2 = 0;
+    NtQuerySystemTime( &when );
+    when.QuadPart += (ULONGLONG)500 * 10000;
+    pTpSetTimer(timer2, &when, 0, 0);
+    Sleep(50);
+    when.QuadPart -= (ULONGLONG)400 * 10000;
+    pTpSetTimer(timer, &when, 0, 450);
+    while (!ticks || !ticks2) Sleep(10);
+    ok(ticks2 >= ticks - 50 && ticks2 <= ticks + 50, "expected that timers are merged\n");
+
+    /* Cleanup */
+    pTpReleaseTimer(timer);
+    pTpReleaseTimer(timer2);
+    pTpReleasePool(pool);
+}
+
 START_TEST(threadpool)
 {
     if (!init_threadpool())
@@ -657,4 +880,9 @@ START_TEST(threadpool)
     test_tp_group_cancel();
     test_tp_instance();
     test_tp_disassociate();
+    test_tp_timer();
+    test_tp_window_length();
+
+    /* FIXME: Make sure worker threads have terminated before. */
+    Sleep(100);
 }
-- 
2.4.4


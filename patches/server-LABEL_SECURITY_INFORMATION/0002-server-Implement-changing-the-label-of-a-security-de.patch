From 8147386e251ecad87d6df713d0396c2d097ab83a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Tue, 30 Aug 2016 01:15:44 +0200
Subject: server: Implement changing the label of a security descriptor.

---
 dlls/advapi32/tests/security.c | 113 ++++++++++++++++++++++++++++++++++-
 dlls/ntdll/sec.c               |   3 +-
 server/handle.c                | 131 ++++++++++++++++++++++++++++++++++++++++-
 3 files changed, 243 insertions(+), 4 deletions(-)

diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
index 57297760832..685ab1c2b5f 100644
--- a/dlls/advapi32/tests/security.c
+++ b/dlls/advapi32/tests/security.c
@@ -6382,6 +6382,8 @@ static void test_AddMandatoryAce(void)
 {
     static SID low_level = {SID_REVISION, 1, {SECURITY_MANDATORY_LABEL_AUTHORITY},
                             {SECURITY_MANDATORY_LOW_RID}};
+    static SID medium_level = {SID_REVISION, 1, {SECURITY_MANDATORY_LABEL_AUTHORITY},
+                               {SECURITY_MANDATORY_MEDIUM_RID}};
     SYSTEM_MANDATORY_LABEL_ACE *ace;
     char buffer_sd[SECURITY_DESCRIPTOR_MIN_LENGTH];
     SECURITY_DESCRIPTOR *sd2, *sd = (SECURITY_DESCRIPTOR *)&buffer_sd;
@@ -6389,7 +6391,7 @@ static void test_AddMandatoryAce(void)
     char buffer_acl[256];
     ACL *pAcl = (ACL *)&buffer_acl;
     ACL *sAcl;
-    BOOL defaulted, present, ret, found;
+    BOOL defaulted, present, ret, found, found2;
     HANDLE handle;
     DWORD index, size;
 
@@ -6493,6 +6495,115 @@ static void test_AddMandatoryAce(void)
     ok(found, "Could not find mandatory label\n");
 
     HeapFree(GetProcessHeap(), 0, sd2);
+
+    ret = pAddMandatoryAce(pAcl, ACL_REVISION, 0, SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP, &medium_level);
+    ok(ret, "AddMandatoryAce failed with %u\n", GetLastError());
+
+    ret = SetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, sd);
+    ok(ret, "GetKernelObjectSecurity failed %u\n", GetLastError());
+
+    ret = GetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, NULL, 0, &size);
+    ok(!ret && GetLastError() == ERROR_INSUFFICIENT_BUFFER,
+       "GetKernelObjectSecurity failed with %u\n", GetLastError());
+
+    sd2 = HeapAlloc(GetProcessHeap(), 0, size);
+    ret = GetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, sd2, size, &size);
+    ok(ret, "GetKernelObjectSecurity failed %u\n", GetLastError());
+
+    sAcl = (void *)0xdeadbeef;
+    present = FALSE;
+    defaulted = TRUE;
+    ret = GetSecurityDescriptorSacl(sd2, &present, &sAcl, &defaulted);
+    ok(ret, "GetSecurityDescriptorSacl failed with %u\n", GetLastError());
+    ok(present, "sAcl not present\n");
+    ok(sAcl != (void *)0xdeadbeef, "sAcl not set\n");
+    ok(sAcl->AceCount == 2, "Expected 2 ACEs, got %d\n", sAcl->AceCount);
+    ok(!defaulted, "sAcl defaulted\n");
+
+    index = 0;
+    found = found2 = FALSE;
+    while (pGetAce( sAcl, index++, (void **)&ace ))
+    {
+        if (ace->Header.AceType == SYSTEM_MANDATORY_LABEL_ACE_TYPE)
+        {
+            if (EqualSid(&ace->SidStart, &low_level))
+            {
+                found = TRUE;
+                ok(ace->Header.AceFlags == 0, "Expected 0 as flags, got %x\n", ace->Header.AceFlags);
+                ok(ace->Mask == SYSTEM_MANDATORY_LABEL_NO_WRITE_UP,
+                   "Expected SYSTEM_MANDATORY_LABEL_NO_WRITE_UP as flag, got %x\n", ace->Mask);
+            }
+            if (EqualSid(&ace->SidStart, &medium_level))
+            {
+                found2 = TRUE;
+                ok(ace->Header.AceFlags == 0, "Expected 0 as flags, got %x\n", ace->Header.AceFlags);
+                ok(ace->Mask == SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP,
+                   "Expected SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP as flag, got %x\n", ace->Mask);
+            }
+        }
+    }
+    ok(found, "Could not find low mandatory label\n");
+    ok(found2, "Could not find medium mandatory label\n");
+
+    HeapFree( GetProcessHeap(), 0, sd2);
+
+    ret = SetSecurityDescriptorSacl(sd, FALSE, NULL, FALSE);
+    ok(ret, "SetSecurityDescriptorSacl failed with %u\n", GetLastError());
+
+    ret = SetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, sd);
+    ok(ret, "GetKernelObjectSecurity failed %u\n", GetLastError());
+
+    ret = GetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, NULL, 0, &size);
+    ok(!ret && GetLastError() == ERROR_INSUFFICIENT_BUFFER,
+       "GetKernelObjectSecurity failed with %u\n", GetLastError());
+
+    sd2 = HeapAlloc(GetProcessHeap(), 0, size);
+    ret = GetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, sd2, size, &size);
+    ok(ret, "GetKernelObjectSecurity failed %u\n", GetLastError());
+
+    sAcl = (void *)0xdeadbeef;
+    present = FALSE;
+    defaulted = TRUE;
+    ret = GetSecurityDescriptorSacl(sd2, &present, &sAcl, &defaulted);
+    ok(ret, "GetSecurityDescriptorSacl failed with %u\n", GetLastError());
+    ok(present, "sAcl not present\n");
+    ok(sAcl != (void *)0xdeadbeef, "sAcl not set\n");
+    ok(sAcl->AceCount == 0, "Expected 0 ACEs, got %d\n", sAcl->AceCount);
+    ok(!defaulted, "sAcl defaulted\n");
+
+    HeapFree(GetProcessHeap(), 0, sd2);
+
+    ret = InitializeAcl(pAcl, 256, ACL_REVISION);
+    ok(ret, "InitializeAcl failed with %u\n", GetLastError());
+
+    ret = pAddMandatoryAce(pAcl, ACL_REVISION3, 0, SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP, &medium_level);
+    ok(ret, "AddMandatoryAce failed with %u\n", GetLastError());
+
+    ret = SetSecurityDescriptorSacl(sd, TRUE, pAcl, FALSE);
+    ok(ret, "SetSecurityDescriptorSacl failed with %u\n", GetLastError());
+
+    ret = SetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, sd);
+    ok(ret, "GetKernelObjectSecurity failed %u\n", GetLastError());
+
+    ret = GetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, NULL, 0, &size);
+    ok(!ret && GetLastError() == ERROR_INSUFFICIENT_BUFFER,
+       "GetKernelObjectSecurity failed with %u\n", GetLastError());
+
+    sd2 = HeapAlloc(GetProcessHeap(), 0, size);
+    ret = GetKernelObjectSecurity(handle, LABEL_SECURITY_INFORMATION, sd2, size, &size);
+    ok(ret, "GetKernelObjectSecurity failed %u\n", GetLastError());
+
+    sAcl = (void *)0xdeadbeef;
+    present = FALSE;
+    defaulted = TRUE;
+    ret = GetSecurityDescriptorSacl(sd2, &present, &sAcl, &defaulted);
+    ok(ret, "GetSecurityDescriptorSacl failed with %u\n", GetLastError());
+    ok(present, "sAcl not present\n");
+    ok(sAcl != (void *)0xdeadbeef, "sAcl not set\n");
+    ok(sAcl->AclRevision == ACL_REVISION3, "Expected revision 3, got %d\n", sAcl->AclRevision);
+    ok(!defaulted, "sAcl defaulted\n");
+
+    HeapFree(GetProcessHeap(), 0, sd2);
     CloseHandle(handle);
 }
 
diff --git a/dlls/ntdll/sec.c b/dlls/ntdll/sec.c
index 3f7aa793236..5c858b5bcbb 100644
--- a/dlls/ntdll/sec.c
+++ b/dlls/ntdll/sec.c
@@ -1775,7 +1775,8 @@ NTSTATUS WINAPI NtSetSecurityObject(HANDLE Handle,
             return STATUS_INVALID_SECURITY_DESCR;
     }
 
-    if (SecurityInformation & SACL_SECURITY_INFORMATION)
+    if (SecurityInformation & SACL_SECURITY_INFORMATION ||
+        SecurityInformation & LABEL_SECURITY_INFORMATION)
     {
         status = RtlGetSaclSecurityDescriptor( SecurityDescriptor, &present, &sacl, &defaulted );
         if (status != STATUS_SUCCESS) return status;
diff --git a/server/handle.c b/server/handle.c
index 5ffcd74e464..3a216702026 100644
--- a/server/handle.c
+++ b/server/handle.c
@@ -673,12 +673,89 @@ DECL_HANDLER(get_object_info)
     release_object( obj );
 }
 
+/* merge security labels into an existing SACL */
+static int merge_security_labels( ACL **out, const ACL *old_sacl, const ACL *new_sacl )
+{
+    const ACE_HEADER *ace;
+    ACE_HEADER *merged_ace;
+    size_t size = sizeof(ACL);
+    int i, count = 0;
+    BYTE revision = ACL_REVISION;
+    ACL *merged_acl;
+
+    *out = NULL;
+    if (!old_sacl && !new_sacl) return 1;
+
+    if (old_sacl)
+    {
+        revision = max( revision, old_sacl->AclRevision );
+        ace = (const ACE_HEADER *)(old_sacl + 1);
+        for (i = 0; i < old_sacl->AceCount; i++, ace = ace_next( ace ))
+        {
+            if (ace->AceType == SYSTEM_MANDATORY_LABEL_ACE_TYPE) continue;
+            size += ace->AceSize;
+            count++;
+        }
+    }
+
+    if (new_sacl)
+    {
+        revision = max( revision, new_sacl->AclRevision );
+        ace = (const ACE_HEADER *)(new_sacl + 1);
+        for (i = 0; i < new_sacl->AceCount; i++, ace = ace_next( ace ))
+        {
+            /* FIXME: Should this be handled as error? */
+            if (ace->AceType != SYSTEM_MANDATORY_LABEL_ACE_TYPE) continue;
+            size += ace->AceSize;
+            count++;
+        }
+    }
+
+    merged_acl = mem_alloc( size );
+    if (!merged_acl) return 0;
+
+    merged_acl->AclRevision = revision;
+    merged_acl->Sbz1 = 0;
+    merged_acl->AclSize = size;
+    merged_acl->AceCount = count;
+    merged_acl->Sbz2 = 0;
+    merged_ace = (ACE_HEADER *)(merged_acl + 1);
+
+    if (old_sacl)
+    {
+        ace = (const ACE_HEADER *)(old_sacl + 1);
+        for (i = 0; i < old_sacl->AceCount; i++, ace = ace_next( ace ))
+        {
+            if (ace->AceType == SYSTEM_MANDATORY_LABEL_ACE_TYPE) continue;
+            memcpy( merged_ace, ace, ace->AceSize );
+            merged_ace = (ACE_HEADER *)ace_next( merged_ace );
+        }
+    }
+
+    if (new_sacl)
+    {
+        ace = (const ACE_HEADER *)(new_sacl + 1);
+        for (i = 0; i < new_sacl->AceCount; i++, ace = ace_next( ace ))
+        {
+            if (ace->AceType != SYSTEM_MANDATORY_LABEL_ACE_TYPE) continue;
+            memcpy( merged_ace, ace, ace->AceSize );
+            merged_ace = (ACE_HEADER *)ace_next( merged_ace );
+        }
+    }
+
+    *out = merged_acl;
+    return 1;
+}
+
 DECL_HANDLER(set_security_object)
 {
     data_size_t sd_size = get_req_data_size();
     const struct security_descriptor *sd = get_req_data();
+    struct security_descriptor *merged_sd = NULL;
+    ACL *merged_sacl = NULL;
     struct object *obj;
     unsigned int access = 0;
+    unsigned int security_info = req->security_info;
 
     if (!sd_is_valid( sd, sd_size ))
     {
@@ -687,7 +764,8 @@ DECL_HANDLER(set_security_object)
     }
 
     if (req->security_info & OWNER_SECURITY_INFORMATION ||
-        req->security_info & GROUP_SECURITY_INFORMATION)
+        req->security_info & GROUP_SECURITY_INFORMATION ||
+        req->security_info & LABEL_SECURITY_INFORMATION)
         access |= WRITE_OWNER;
     if (req->security_info & SACL_SECURITY_INFORMATION)
         access |= ACCESS_SYSTEM_SECURITY;
@@ -696,8 +774,57 @@ DECL_HANDLER(set_security_object)
 
     if (!(obj = get_handle_obj( current->process, req->handle, access, NULL ))) return;
 
-    obj->ops->set_sd( obj, sd, req->security_info );
+    /* check if we need to merge the security labels with the existing SACLs */
+    if ((security_info & LABEL_SECURITY_INFORMATION) &&
+        !(security_info & SACL_SECURITY_INFORMATION) &&
+        (sd->control & SE_SACL_PRESENT))
+    {
+        const struct security_descriptor *old_sd;
+        const ACL *old_sacl = NULL;
+        int present;
+        char *ptr;
+
+        if ((old_sd = obj->ops->get_sd( obj )))
+        {
+            old_sacl = sd_get_sacl( old_sd, &present );
+            if (!present) old_sacl = NULL;
+        }
+
+        if (!merge_security_labels( &merged_sacl, old_sacl, sd_get_sacl( sd, &present ) )) goto error;
+
+        /* allocate a new SD and replace SACL with merged version */
+        merged_sd = mem_alloc( sizeof(*merged_sd) + sd->owner_len + sd->group_len +
+                               (merged_sacl ? merged_sacl->AclSize : 0) + sd->dacl_len );
+        if (!merged_sd) goto error;
+
+        merged_sd->control   = sd->control;
+        merged_sd->owner_len = sd->owner_len;
+        merged_sd->group_len = sd->group_len;
+        merged_sd->sacl_len  = merged_sacl ? merged_sacl->AclSize : 0;
+        merged_sd->dacl_len  = sd->dacl_len;
+
+        ptr = (char *)(merged_sd + 1);
+        memcpy( ptr, sd_get_owner( sd ), sd->owner_len );
+        ptr += sd->owner_len;
+        memcpy( ptr, sd_get_group( sd ), sd->group_len );
+        ptr += sd->group_len;
+        if (merged_sacl)
+        {
+            memcpy( ptr, merged_sacl, merged_sacl->AclSize );
+            ptr += merged_sacl->AclSize;
+        }
+        memcpy( ptr, sd_get_dacl( sd, &present ), sd->dacl_len );
+
+        security_info |= SACL_SECURITY_INFORMATION;
+        sd = merged_sd;
+    }
+
+    obj->ops->set_sd( obj, sd, security_info );
+
+error:
     release_object( obj );
+    free( merged_sacl );
+    free( merged_sd );
 }
 
 /* extract security labels from SACL */
-- 
2.11.0


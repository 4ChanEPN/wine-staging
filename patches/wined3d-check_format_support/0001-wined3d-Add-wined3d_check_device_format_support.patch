From 0864f18c99567a16025d2cda9b70e23db43b2ed0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sun, 28 Aug 2016 04:07:01 +0200
Subject: wined3d: Add wined3d_check_device_format_support.

---
 dlls/wined3d/device.c     | 76 +++++++++++++++++++++++++++++++++++++++++++++++
 dlls/wined3d/wined3d.spec |  1 +
 include/wine/wined3d.h    | 33 ++++++++++++++++++++
 3 files changed, 110 insertions(+)

diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index a8de282..83fa003 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -3343,6 +3343,82 @@ struct wined3d_texture * CDECL wined3d_device_get_texture(const struct wined3d_d
     return device->state.textures[stage];
 }
 
+void CDECL wined3d_check_device_format_support(struct wined3d_device *device,
+        enum wined3d_format_id check_format_id, UINT *support)
+{
+    const struct wined3d_format *format = wined3d_get_format(&device->adapter->gl_info, check_format_id, 0);
+    const struct wined3d_gl_info *gl_info = &device->adapter->gl_info;
+
+    UINT support_flags = 0;
+
+    if (format->flags[WINED3D_GL_RES_TYPE_BUFFER] & WINED3DFMT_FLAG_TEXTURE)
+    {
+        support_flags |= WINED3D_FORMAT_SUPPORT_BUFFER;
+        support_flags |= WINED3D_FORMAT_SUPPORT_IA_VERTEX_BUFFER;
+        support_flags |= WINED3D_FORMAT_SUPPORT_IA_INDEX_BUFFER;
+        support_flags |= WINED3D_FORMAT_SUPPORT_SO_BUFFER;
+    }
+
+    if (format->flags[WINED3D_GL_RES_TYPE_TEX_1D] & WINED3DFMT_FLAG_TEXTURE)
+        support_flags |= WINED3D_FORMAT_SUPPORT_TEXTURE1D;
+
+    if (format->flags[WINED3D_GL_RES_TYPE_TEX_2D] & WINED3DFMT_FLAG_TEXTURE)
+    {
+        support_flags |= WINED3D_FORMAT_SUPPORT_TEXTURE2D;
+
+        if (gl_info->supported[EXT_TEXTURE_ARRAY])
+            support_flags |= WINED3D_FORMAT_SUPPORT_TEXTURECUBE;
+
+        /* OpenGL requires that all officially supported formats support mip mapping */
+        support_flags |= WINED3D_FORMAT_SUPPORT_MIP;
+
+        if (support_flags & gl_info->supported[SGIS_GENERATE_MIPMAP])
+            support_flags |= WINED3D_FORMAT_SUPPORT_MIP_AUTOGEN;
+
+        /* For the following flags it should be sufficient to check only 2d textures  */
+        if (format->flags[WINED3D_GL_RES_TYPE_TEX_2D] & WINED3DFMT_FLAG_RENDERTARGET)
+            support_flags |= WINED3D_FORMAT_SUPPORT_RENDER_TARGET;
+
+        if (format->flags[WINED3D_GL_RES_TYPE_TEX_2D] & WINED3DFMT_FLAG_POSTPIXELSHADER_BLENDING)
+            support_flags |= WINED3D_FORMAT_SUPPORT_BLENDABLE;
+
+        if ((format->flags[WINED3D_GL_RES_TYPE_TEX_2D] & WINED3DFMT_FLAG_DEPTH) &&
+            (format->flags[WINED3D_GL_RES_TYPE_TEX_2D] & WINED3DFMT_FLAG_STENCIL))
+            support_flags |= WINED3D_FORMAT_SUPPORT_DEPTH_STENCIL;
+
+        if (format->flags[WINED3D_GL_RES_TYPE_TEX_2D] & WINED3DFMT_FLAG_POSTPIXELSHADER_BLENDING)
+            support_flags |= WINED3D_FORMAT_SUPPORT_BLENDABLE;
+
+        /* not sure how to test the following flags - assuming yes */
+        support_flags |= WINED3D_FORMAT_SUPPORT_SHADER_LOAD;
+        support_flags |= WINED3D_FORMAT_SUPPORT_SHADER_SAMPLE;
+        support_flags |= WINED3D_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON;
+        support_flags |= WINED3D_FORMAT_SUPPORT_SHADER_GATHER;
+        support_flags |= WINED3D_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON;
+
+        support_flags |= WINED3D_FORMAT_SUPPORT_CPU_LOCKABLE;
+        support_flags |= WINED3D_FORMAT_SUPPORT_DISPLAY;
+        support_flags |= WINED3D_FORMAT_SUPPORT_BACK_BUFFER_CAST;
+        support_flags |= WINED3D_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW;
+        support_flags |= WINED3D_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON;
+    }
+
+    if (format->flags[WINED3D_GL_RES_TYPE_TEX_3D] & WINED3DFMT_FLAG_TEXTURE)
+        support_flags |= WINED3D_FORMAT_SUPPORT_TEXTURE3D;
+
+    if (gl_info->supported[ARB_MULTISAMPLE])
+    {
+        /* TODO: check if multisampling for this format is supported */
+        support_flags |= WINED3D_FORMAT_SUPPORT_MULTISAMPLE_LOAD;
+        support_flags |= WINED3D_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE;
+
+        if (support_flags & WINED3D_FORMAT_SUPPORT_RENDER_TARGET)
+            support_flags |= WINED3D_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET;
+    }
+
+    *support = support_flags;
+}
+
 HRESULT CDECL wined3d_device_get_device_caps(const struct wined3d_device *device, WINED3DCAPS *caps)
 {
     TRACE("device %p, caps %p.\n", device, caps);
diff --git a/dlls/wined3d/wined3d.spec b/dlls/wined3d/wined3d.spec
index 34b2d0a..efd7501 100644
--- a/dlls/wined3d/wined3d.spec
+++ b/dlls/wined3d/wined3d.spec
@@ -5,6 +5,7 @@
 @ cdecl wined3d_check_depth_stencil_match(ptr long long long long long)
 @ cdecl wined3d_check_device_format(ptr long long long long long long)
 @ cdecl wined3d_check_device_format_conversion(ptr long long long long)
+@ cdecl wined3d_check_device_format_support(ptr long ptr)
 @ cdecl wined3d_check_device_multisample_type(ptr long long long long long ptr)
 @ cdecl wined3d_check_device_type(ptr long long long long long)
 @ cdecl wined3d_create(long)
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 7271ec0..c5ccee1 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -796,6 +796,37 @@ enum wined3d_display_rotation
     WINED3D_DISPLAY_ROTATION_270            = 4,
 };
 
+enum wined3d_format_support
+{
+    WINED3D_FORMAT_SUPPORT_BUFFER                      = 0x0000001,
+    WINED3D_FORMAT_SUPPORT_IA_VERTEX_BUFFER            = 0x0000002,
+    WINED3D_FORMAT_SUPPORT_IA_INDEX_BUFFER             = 0x0000004,
+    WINED3D_FORMAT_SUPPORT_SO_BUFFER                   = 0x0000008,
+    WINED3D_FORMAT_SUPPORT_TEXTURE1D                   = 0x0000010,
+    WINED3D_FORMAT_SUPPORT_TEXTURE2D                   = 0x0000020,
+    WINED3D_FORMAT_SUPPORT_TEXTURE3D                   = 0x0000040,
+    WINED3D_FORMAT_SUPPORT_TEXTURECUBE                 = 0x0000080,
+    WINED3D_FORMAT_SUPPORT_SHADER_LOAD                 = 0x0000100,
+    WINED3D_FORMAT_SUPPORT_SHADER_SAMPLE               = 0x0000200,
+    WINED3D_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON    = 0x0000400,
+    WINED3D_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT     = 0x0000800,
+    WINED3D_FORMAT_SUPPORT_MIP                         = 0x0001000,
+    WINED3D_FORMAT_SUPPORT_MIP_AUTOGEN                 = 0x0002000,
+    WINED3D_FORMAT_SUPPORT_RENDER_TARGET               = 0x0004000,
+    WINED3D_FORMAT_SUPPORT_BLENDABLE                   = 0x0008000,
+    WINED3D_FORMAT_SUPPORT_DEPTH_STENCIL               = 0x0010000,
+    WINED3D_FORMAT_SUPPORT_CPU_LOCKABLE                = 0x0020000,
+    WINED3D_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE         = 0x0040000,
+    WINED3D_FORMAT_SUPPORT_DISPLAY                     = 0x0080000,
+    WINED3D_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT      = 0x0100000,
+    WINED3D_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET    = 0x0200000,
+    WINED3D_FORMAT_SUPPORT_MULTISAMPLE_LOAD            = 0x0400000,
+    WINED3D_FORMAT_SUPPORT_SHADER_GATHER               = 0x0800000,
+    WINED3D_FORMAT_SUPPORT_BACK_BUFFER_CAST            = 0x1000000,
+    WINED3D_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
+    WINED3D_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON    = 0x4000000,
+};
+
 #define WINED3DCOLORWRITEENABLE_RED                             (1u << 0)
 #define WINED3DCOLORWRITEENABLE_GREEN                           (1u << 1)
 #define WINED3DCOLORWRITEENABLE_BLUE                            (1u << 2)
@@ -2066,6 +2097,8 @@ HRESULT __cdecl wined3d_check_device_format(const struct wined3d *wined3d, UINT
 HRESULT __cdecl wined3d_check_device_format_conversion(const struct wined3d *wined3d, UINT adapter_idx,
         enum wined3d_device_type device_type, enum wined3d_format_id source_format_id,
         enum wined3d_format_id target_format_id);
+void CDECL wined3d_check_device_format_support(struct wined3d_device *device,
+        enum wined3d_format_id check_format_id, UINT *support);
 HRESULT __cdecl wined3d_check_device_multisample_type(const struct wined3d *wined3d, UINT adapter_idx,
         enum wined3d_device_type device_type, enum wined3d_format_id surface_format_id, BOOL windowed,
         enum wined3d_multisample_type multisample_type, DWORD *quality_levels);
-- 
2.9.0


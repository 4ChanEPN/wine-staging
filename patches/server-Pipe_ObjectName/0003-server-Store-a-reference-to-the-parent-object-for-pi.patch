From 84d1dc87366a3f72365b29f490da5bed67998386 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Mon, 17 Aug 2015 01:11:47 +0200
Subject: server: Store a reference to the parent object for pipe servers.

---
 server/named_pipe.c |  9 +++++----
 server/object.c     | 21 ++++++++++++---------
 2 files changed, 17 insertions(+), 13 deletions(-)

diff --git a/server/named_pipe.c b/server/named_pipe.c
index 0ce3e59..283eb2c 100644
--- a/server/named_pipe.c
+++ b/server/named_pipe.c
@@ -764,7 +764,7 @@ static struct pipe_server *create_pipe_server( struct named_pipe *pipe, unsigned
 {
     struct pipe_server *server;
 
-    server = alloc_object( &pipe_server_ops );
+    server = create_object( NULL, &pipe_server_ops, NULL, &pipe->obj );
     if (!server)
         return NULL;
 
@@ -786,11 +786,12 @@ static struct pipe_server *create_pipe_server( struct named_pipe *pipe, unsigned
     return server;
 }
 
-static struct pipe_client *create_pipe_client( unsigned int flags, unsigned int pipe_flags )
+static struct pipe_client *create_pipe_client( struct named_pipe *pipe, unsigned int flags,
+                                               unsigned int pipe_flags )
 {
     struct pipe_client *client;
 
-    client = alloc_object( &pipe_client_ops );
+    client = create_object( NULL, &pipe_client_ops, NULL, &pipe->obj );
     if (!client)
         return NULL;
 
@@ -876,7 +877,7 @@ static struct object *named_pipe_open_file( struct object *obj, unsigned int acc
         return NULL;
     }
 
-    if ((client = create_pipe_client( options, pipe->flags )))
+    if ((client = create_pipe_client( pipe, options, pipe->flags )))
     {
         type = ((pipe->flags & NAMED_PIPE_MESSAGE_STREAM_WRITE) && is_messagemode_supported()) ?
                SOCK_SEQPACKET : SOCK_STREAM;
diff --git a/server/object.c b/server/object.c
index bfb4689..5f16046 100644
--- a/server/object.c
+++ b/server/object.c
@@ -175,22 +175,25 @@ WCHAR *get_object_full_name( struct object *obj, data_size_t *ret_len )
     data_size_t len = 0;
     char *ret;
 
-    while (ptr && ptr->name)
+    while (ptr)
     {
         struct object_name *name = ptr->name;
-        len += name->len + sizeof(WCHAR);
+        if (name) len += name->len + sizeof(WCHAR);
         ptr = ptr->parent;
     }
     if (!len) return NULL;
     if (!(ret = malloc( len ))) return NULL;
 
     *ret_len = len;
-    while (obj && obj->name)
+    while (obj)
     {
         struct object_name *name = obj->name;
-        memcpy( ret + len - name->len, name->name, name->len );
-        len -= name->len + sizeof(WCHAR);
-        memcpy( ret + len, &backslash, sizeof(WCHAR) );
+        if (name)
+        {
+            memcpy( ret + len - name->len, name->name, name->len );
+            len -= name->len + sizeof(WCHAR);
+            memcpy( ret + len, &backslash, sizeof(WCHAR) );
+        }
         obj = obj->parent;
     }
     return (WCHAR *)ret;
@@ -220,13 +223,13 @@ void *alloc_object( const struct object_ops *ops )
 void *create_object( struct namespace *namespace, const struct object_ops *ops,
                      const struct unicode_str *name, struct object *parent )
 {
+    struct object_name *name_ptr = NULL;
     struct object *obj;
-    struct object_name *name_ptr;
 
-    if (!(name_ptr = alloc_name( name ))) return NULL;
+    if (namespace && !(name_ptr = alloc_name( name ))) return NULL;
     if ((obj = alloc_object( ops )))
     {
-        set_object_name( namespace, obj, name_ptr );
+        if (namespace) set_object_name( namespace, obj, name_ptr );
         if (parent) obj->parent = grab_object( parent );
     }
     else
-- 
2.5.0


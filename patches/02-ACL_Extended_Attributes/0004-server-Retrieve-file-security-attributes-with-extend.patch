From 469fa2de7b5ea74c880a64c4acbb31a2397c8dc4 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Thu, 17 Apr 2014 16:09:01 -0600
Subject: server: Retrieve file security attributes with extended file
 attributes.

---
 dlls/advapi32/tests/security.c |   49 ++++++++++++++--------------
 server/file.c                  |   70 ++++++++++++++++++++++++++++++++++++++--
 2 files changed, 91 insertions(+), 28 deletions(-)

diff --git a/dlls/advapi32/tests/security.c b/dlls/advapi32/tests/security.c
index bd45189..e5ef7e6 100644
--- a/dlls/advapi32/tests/security.c
+++ b/dlls/advapi32/tests/security.c
@@ -3105,24 +3105,24 @@ static void test_CreateDirectoryA(void)
         bret = pGetAce(pDacl, 0, (VOID **)&ace);
         ok(bret, "Failed to get Current User ACE.\n");
         bret = EqualSid(&ace->SidStart, user_sid);
-        todo_wine ok(bret, "Current User ACE != Current User SID.\n");
-        todo_wine ok(((ACE_HEADER *)ace)->AceFlags == (OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE),
-                     "Current User ACE has unexpected flags (0x%x != 0x03)\n",
-                     ((ACE_HEADER *)ace)->AceFlags);
-        ok(ace->Mask == 0x1f01ff, "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n",
-                                  ace->Mask);
+        ok(bret, "Current User ACE != Current User SID.\n");
+        ok(((ACE_HEADER *)ace)->AceFlags == (OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE),
+           "Current User ACE has unexpected flags (0x%x != 0x03)\n",
+           ((ACE_HEADER *)ace)->AceFlags);
+        todo_wine ok(ace->Mask == 0x1f01ff,
+                     "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
     if (acl_size.AceCount > 1)
     {
         bret = pGetAce(pDacl, 1, (VOID **)&ace);
         ok(bret, "Failed to get Administators Group ACE.\n");
         bret = EqualSid(&ace->SidStart, admin_sid);
-        todo_wine ok(bret, "Administators Group ACE != Administators Group SID.\n");
-        todo_wine ok(((ACE_HEADER *)ace)->AceFlags == (OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE),
-                     "Administators Group ACE has unexpected flags (0x%x != 0x03)\n",
-                     ((ACE_HEADER *)ace)->AceFlags);
-        ok(ace->Mask == 0x1f01ff, "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n",
-                                  ace->Mask);
+        ok(bret, "Administators Group ACE != Administators Group SID.\n");
+        ok(((ACE_HEADER *)ace)->AceFlags == (OBJECT_INHERIT_ACE|CONTAINER_INHERIT_ACE),
+           "Administators Group ACE has unexpected flags (0x%x != 0x03)\n",
+           ((ACE_HEADER *)ace)->AceFlags);
+        todo_wine ok(ace->Mask == 0x1f01ff,
+                     "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
 
 done:
@@ -3294,23 +3294,22 @@ static void test_GetNamedSecurityInfoA(void)
         bret = pGetAce(pDacl, 0, (VOID **)&ace);
         ok(bret, "Failed to get Current User ACE.\n");
         bret = EqualSid(&ace->SidStart, user_sid);
-        todo_wine ok(bret, "Current User ACE != Current User SID.\n");
+        ok(bret, "Current User ACE != Current User SID.\n");
         ok(((ACE_HEADER *)ace)->AceFlags == 0,
            "Current User ACE has unexpected flags (0x%x != 0x0)\n", ((ACE_HEADER *)ace)->AceFlags);
-        ok(ace->Mask == 0x1f01ff, "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n",
-                                  ace->Mask);
+        todo_wine ok(ace->Mask == 0x1f01ff,
+                     "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
     if (acl_size.AceCount > 1)
     {
         bret = pGetAce(pDacl, 1, (VOID **)&ace);
         ok(bret, "Failed to get Administators Group ACE.\n");
         bret = EqualSid(&ace->SidStart, admin_sid);
-        todo_wine ok(bret || broken(!bret) /* win2k */,
-                     "Administators Group ACE != Administators Group SID.\n");
+        ok(bret || broken(!bret) /* win2k */, "Administators Group ACE != Administators Group SID.\n");
         ok(((ACE_HEADER *)ace)->AceFlags == 0,
            "Administators Group ACE has unexpected flags (0x%x != 0x0)\n", ((ACE_HEADER *)ace)->AceFlags);
-        ok(ace->Mask == 0x1f01ff || broken(ace->Mask == GENERIC_ALL) /* win2k */,
-           "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
+        todo_wine ok(ace->Mask == 0x1f01ff || broken(ace->Mask == GENERIC_ALL) /* win2k */,
+                     "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
     LocalFree(pSD);
     HeapFree(GetProcessHeap(), 0, user);
@@ -3960,22 +3959,22 @@ static void test_GetSecurityInfo(void)
         bret = pGetAce(pDacl, 0, (VOID **)&ace);
         ok(bret, "Failed to get Current User ACE.\n");
         bret = EqualSid(&ace->SidStart, user_sid);
-        todo_wine ok(bret, "Current User ACE != Current User SID.\n");
+        ok(bret, "Current User ACE != Current User SID.\n");
         ok(((ACE_HEADER *)ace)->AceFlags == 0,
            "Current User ACE has unexpected flags (0x%x != 0x0)\n", ((ACE_HEADER *)ace)->AceFlags);
-        ok(ace->Mask == 0x1f01ff, "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n",
-                                    ace->Mask);
+        todo_wine ok(ace->Mask == 0x1f01ff,
+                     "Current User ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
     if (acl_size.AceCount > 1)
     {
         bret = pGetAce(pDacl, 1, (VOID **)&ace);
         ok(bret, "Failed to get Administators Group ACE.\n");
         bret = EqualSid(&ace->SidStart, admin_sid);
-        todo_wine ok(bret, "Administators Group ACE != Administators Group SID.\n");
+        ok(bret, "Administators Group ACE != Administators Group SID.\n");
         ok(((ACE_HEADER *)ace)->AceFlags == 0,
            "Administators Group ACE has unexpected flags (0x%x != 0x0)\n", ((ACE_HEADER *)ace)->AceFlags);
-        ok(ace->Mask == 0x1f01ff, "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n",
-                                  ace->Mask);
+        todo_wine ok(ace->Mask == 0x1f01ff,
+                     "Administators Group ACE has unexpected mask (0x%x != 0x1f01ff)\n", ace->Mask);
     }
     CloseHandle(obj);
 }
diff --git a/server/file.c b/server/file.c
index ceb57be..430d183 100644
--- a/server/file.c
+++ b/server/file.c
@@ -453,12 +453,75 @@ struct security_descriptor *mode_to_sd( mode_t mode, const SID *user, const SID
     return sd;
 }
 
+struct security_descriptor *get_xattr_sd( int fd, const SID *user, const SID *group )
+{
+#ifdef HAVE_ATTR_XATTR_H
+    char buffer[XATTR_SIZE_MAX], *sd_ptr, *buffer_ptr;
+    struct security_descriptor *sd;
+    int n, owner_len, group_len;
+
+    n = fgetxattr( fd, "user.wine.sd", buffer, sizeof(buffer) );
+    if (n == -1) return NULL;
+    /* validate that we can handle the descriptor */
+    if (buffer[0] != SECURITY_DESCRIPTOR_REVISION || buffer[1] != 0) return NULL;
+
+    owner_len = FIELD_OFFSET(SID, SubAuthority[user->SubAuthorityCount]);
+    group_len = FIELD_OFFSET(SID, SubAuthority[group->SubAuthorityCount]);
+    sd = mem_alloc( n - 2 + owner_len + group_len );
+    sd_ptr = (char *)sd;
+    buffer_ptr = &buffer[2];
+    memcpy( sd_ptr, buffer_ptr, sizeof(struct security_descriptor));
+    sd_ptr += sizeof(struct security_descriptor);
+    buffer_ptr += sizeof(struct security_descriptor);
+
+    /* if no owner or group information is stored in the SD then return the corresponding data
+     * from the information stored in the filesystem */
+    if (!sd->owner_len)
+    {
+        memcpy( sd_ptr, user, owner_len );
+        sd_ptr += owner_len;
+    }
+    else
+    {
+        memcpy( sd_ptr, buffer_ptr, sd->owner_len );
+        sd_ptr += sd->owner_len;
+    }
+    buffer_ptr += sd->owner_len;
+    if (!sd->owner_len)
+    {
+        memcpy( sd_ptr, group, group_len );
+        sd_ptr += group_len;
+    }
+    else
+    {
+        memcpy( sd_ptr, buffer_ptr, sd->group_len );
+        sd_ptr += sd->group_len;
+    }
+    buffer_ptr += sd->group_len;
+
+    memcpy( sd_ptr, buffer_ptr, sd->sacl_len );
+    sd_ptr += sd->sacl_len;
+    buffer_ptr += sd->sacl_len;
+    memcpy( sd_ptr, buffer_ptr, sd->dacl_len );
+    sd_ptr += sd->dacl_len;
+    buffer_ptr += sd->dacl_len;
+
+    sd->owner_len = owner_len;
+    sd->group_len = group_len;
+
+    return sd;
+#else
+    return NULL;
+#endif
+}
+
 struct security_descriptor *get_file_sd( struct object *obj, struct fd *fd, mode_t *mode,
                                          uid_t *uid )
 {
     int unix_fd = get_unix_fd( fd );
     struct stat st;
     struct security_descriptor *sd;
+    const SID *user, *group;
 
     if (unix_fd == -1 || fstat( unix_fd, &st ) == -1)
         return obj->sd;
@@ -468,9 +531,10 @@ struct security_descriptor *get_file_sd( struct object *obj, struct fd *fd, mode
         (st.st_uid == *uid))
         return obj->sd;
 
-    sd = mode_to_sd( st.st_mode,
-                     security_unix_uid_to_sid( st.st_uid ),
-                     token_get_primary_group( current->process->token ));
+    user = security_unix_uid_to_sid( st.st_uid );
+    group = token_get_primary_group( current->process->token );
+    sd = get_xattr_sd( unix_fd, user, group );
+    if (!sd) sd = mode_to_sd( st.st_mode, user, group);
     if (!sd) return obj->sd;
 
     *mode = st.st_mode;
-- 
1.7.9.5


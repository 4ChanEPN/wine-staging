From 4f9fa356757454feea9c84a51dacbfa39b013503 Mon Sep 17 00:00:00 2001
From: "Erich E. Hoover" <erich.e.hoover@gmail.com>
Date: Fri, 18 Apr 2014 13:58:24 -0600
Subject: server: Store file security attributes with extended file
 attributes.

---
 configure.ac  |   12 ++++++++
 server/file.c |   96 +++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 2 files changed, 106 insertions(+), 2 deletions(-)

diff --git a/configure.ac b/configure.ac
index 46602d6..99fcb9b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -73,6 +73,7 @@ AC_ARG_WITH(pthread,   AS_HELP_STRING([--without-pthread],[do not use the pthrea
 AC_ARG_WITH(sane,      AS_HELP_STRING([--without-sane],[do not use SANE (scanner support)]))
 AC_ARG_WITH(tiff,      AS_HELP_STRING([--without-tiff],[do not use TIFF]))
 AC_ARG_WITH(v4l,       AS_HELP_STRING([--without-v4l],[do not use v4l1 (v4l support)]))
+AC_ARG_WITH(xattr,     AS_HELP_STRING([--without-xattr],[do not use xattr (security attributes support)]))
 AC_ARG_WITH(xcomposite,AS_HELP_STRING([--without-xcomposite],[do not use the Xcomposite extension]),
             [if test "x$withval" = "xno"; then ac_cv_header_X11_extensions_Xcomposite_h=no; fi])
 AC_ARG_WITH(xcursor,   AS_HELP_STRING([--without-xcursor],[do not use the Xcursor extension]),
@@ -664,6 +665,17 @@ AC_CHECK_HEADERS([libprocstat.h],,,
 #include <sys/socket.h>
 #endif])
 
+if test "x$with_xattr" != "xno"
+then
+  AC_CHECK_HEADERS(attr/xattr.h,HAVE_XATTR=1)
+fi
+if test "x$with_xattr" == "xyes"
+then
+  WINE_ERROR_WITH(xattr,[test "x$HAVE_XATTR" = "x"],[xattr ${notice_platform}development files not \
+found. Wine will be built without extended attribute support, which probably isn't what you want. \
+You will need to install ${notice_platform}development packages of libacl at the very least.])
+fi
+
 dnl **** Check for working dll ****
 
 AC_SUBST(dlldir,"\${libdir}/wine")
diff --git a/server/file.c b/server/file.c
index 1f008ea..b9106a8 100644
--- a/server/file.c
+++ b/server/file.c
@@ -32,6 +32,7 @@
 #include <sys/time.h>
 #include <sys/types.h>
 #include <time.h>
+#include <limits.h>
 #include <unistd.h>
 #ifdef HAVE_UTIME_H
 #include <utime.h>
@@ -39,6 +40,9 @@
 #ifdef HAVE_POLL_H
 #include <poll.h>
 #endif
+#ifdef HAVE_ATTR_XATTR_H
+#include <attr/xattr.h>
+#endif
 
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
@@ -178,11 +182,75 @@ static struct object *create_file_obj( struct fd *fd, unsigned int access, mode_
     return &file->obj;
 }
 
+void set_xattr_sd( int fd, const struct security_descriptor *sd, const SID *user, const SID *group )
+{
+#ifdef HAVE_ATTR_XATTR_H
+    char buffer[XATTR_SIZE_MAX], *dst_ptr = &buffer[2], *src_ptr = (char *)sd;
+    int present, len, owner_len, group_len;
+    struct security_descriptor *dst_sd;
+    const ACL *dacl;
+
+    /* there's no point in storing the security descriptor if there's no DACL */
+    if (!sd) return;
+    dacl = sd_get_dacl( sd, &present );
+    if (!present || !dacl) return;
+
+    /* make sure that we always store the ownership information */
+    if (!sd->owner_len)
+        owner_len = FIELD_OFFSET(SID, SubAuthority[user->SubAuthorityCount]);
+    else
+        owner_len = sd->owner_len;
+    if (!sd->group_len)
+        group_len = FIELD_OFFSET(SID, SubAuthority[group->SubAuthorityCount]);
+    else
+        group_len = sd->group_len;
+    len = 2 + sizeof(struct security_descriptor) + owner_len + group_len + sd->sacl_len
+          + sd->dacl_len;
+    if (len > XATTR_SIZE_MAX) return;
+
+    /* include the descriptor revision and resource manager control bits */
+    buffer[0] = SECURITY_DESCRIPTOR_REVISION;
+    buffer[1] = 0;
+    memcpy( dst_ptr, sd, sizeof(struct security_descriptor) );
+    dst_sd = (struct security_descriptor *)dst_ptr;
+    src_ptr += sizeof(struct security_descriptor);
+    dst_ptr += sizeof(struct security_descriptor);
+    dst_sd->owner_len = owner_len;
+    dst_sd->group_len = group_len;
+    /* copy the appropriate ownership information (explicit or inferred) */
+    if (sd->owner_len)
+    {
+        memcpy( dst_ptr, src_ptr, sd->owner_len );
+        src_ptr += sd->owner_len;
+    }
+    else
+        memcpy( dst_ptr, user, owner_len );
+    dst_ptr += owner_len;
+    if (sd->group_len)
+    {
+        memcpy( dst_ptr, src_ptr, sd->group_len );
+        src_ptr += sd->group_len;
+    }
+    else
+        memcpy( dst_ptr, group, group_len );
+    dst_ptr += group_len;
+    /* copy the ACL information (explicit only) */
+    memcpy( dst_ptr, src_ptr, sd->sacl_len );
+    src_ptr += sd->sacl_len;
+    dst_ptr += sd->sacl_len;
+    memcpy( dst_ptr, src_ptr, sd->dacl_len );
+    src_ptr += sd->dacl_len;
+    dst_ptr += sd->dacl_len;
+    fsetxattr( fd, "user.wine.sd", buffer, len, 0 );
+#endif
+}
+
 static struct object *create_file( struct fd *root, const char *nameptr, data_size_t len,
                                    unsigned int access, unsigned int sharing, int create,
                                    unsigned int options, unsigned int attrs,
                                    const struct security_descriptor *sd )
 {
+    const SID *owner = NULL, *group = NULL;
     struct object *obj = NULL;
     struct fd *fd;
     int flags;
@@ -213,9 +281,12 @@ static struct object *create_file( struct fd *root, const char *nameptr, data_si
 
     if (sd)
     {
-        const SID *owner = sd_get_owner( sd );
+        owner = sd_get_owner( sd );
         if (!owner)
             owner = token_get_user( current->process->token );
+        group = sd_get_group( sd );
+        if (!group)
+            group = token_get_primary_group( current->process->token );
         mode = sd_to_mode( sd, owner );
     }
     else if (options & FILE_DIRECTORY_FILE)
@@ -239,6 +310,7 @@ static struct object *create_file( struct fd *root, const char *nameptr, data_si
     /* FIXME: should set error to STATUS_OBJECT_NAME_COLLISION if file existed before */
     fd = open_fd( root, name, flags | O_NONBLOCK | O_LARGEFILE, &mode, access, sharing, options );
     if (!fd) goto done;
+    set_xattr_sd( get_unix_fd( fd ), sd, owner, group );
 
     if (S_ISDIR(mode))
         obj = create_dir_obj( fd, access, mode );
@@ -548,7 +620,7 @@ int set_file_sd( struct object *obj, struct fd *fd, const struct security_descri
                  unsigned int set_info )
 {
     int unix_fd = get_unix_fd( fd );
-    const SID *owner;
+    const SID *owner, *group;
     struct stat st;
     mode_t mode;
 
@@ -572,6 +644,24 @@ int set_file_sd( struct object *obj, struct fd *fd, const struct security_descri
     else
         owner = token_get_user( current->process->token );
 
+    if (set_info & GROUP_SECURITY_INFORMATION)
+    {
+        group = sd_get_group( sd );
+        if (!group)
+        {
+            set_error( STATUS_INVALID_SECURITY_DESCR );
+            return 0;
+        }
+        if (!obj->sd || !security_equal_sid( group, sd_get_group( obj->sd ) ))
+        {
+            /* FIXME: get Unix uid and call fchown */
+        }
+    }
+    else if (obj->sd)
+        group = sd_get_group( obj->sd );
+    else
+        group = token_get_primary_group( current->process->token );
+
     /* group and sacl not supported */
 
     if (set_info & DACL_SECURITY_INFORMATION)
@@ -580,6 +670,8 @@ int set_file_sd( struct object *obj, struct fd *fd, const struct security_descri
         mode = st.st_mode & (S_ISUID|S_ISGID|S_ISVTX);
         mode |= sd_to_mode( sd, owner );
 
+        set_xattr_sd( unix_fd, sd, owner, group );
+
         if (((st.st_mode ^ mode) & (S_IRWXU|S_IRWXG|S_IRWXO)) && fchmod( unix_fd, mode ) == -1)
         {
             file_set_error();
-- 
1.7.9.5


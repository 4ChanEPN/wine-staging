From 4d0561f1b3bbf5d72e49ddeb14f7ed25eb9c2d01 Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Fri, 17 Apr 2015 12:40:38 +0200
Subject: server: Fix handling of opening read-only files with
 FILE_DELETE_ON_CLOSE.

---
 dlls/kernel32/file.c       | 3 +--
 dlls/kernel32/tests/file.c | 6 ------
 server/fd.c                | 9 +++++++++
 3 files changed, 10 insertions(+), 8 deletions(-)

diff --git a/dlls/kernel32/file.c b/dlls/kernel32/file.c
index 5ea024f..f6ee97e 100644
--- a/dlls/kernel32/file.c
+++ b/dlls/kernel32/file.c
@@ -1683,8 +1683,7 @@ BOOL WINAPI DeleteFileW( LPCWSTR path )
     attr.SecurityDescriptor = NULL;
     attr.SecurityQualityOfService = NULL;
 
-    status = NtCreateFile(&hFile, GENERIC_READ | GENERIC_WRITE | SYNCHRONIZE | DELETE,
-			  &attr, &io, NULL, 0,
+    status = NtCreateFile(&hFile, SYNCHRONIZE | DELETE, &attr, &io, NULL, 0,
 			  FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
 			  FILE_OPEN, FILE_DELETE_ON_CLOSE | FILE_NON_DIRECTORY_FILE, NULL, 0);
     if (status == STATUS_SUCCESS) status = NtClose(hFile);
diff --git a/dlls/kernel32/tests/file.c b/dlls/kernel32/tests/file.c
index ca49863..134f877 100644
--- a/dlls/kernel32/tests/file.c
+++ b/dlls/kernel32/tests/file.c
@@ -361,17 +361,13 @@ static void test__lcreat( void )
     status = NtCreateFile( &file, DELETE, &attr, &io, NULL, 0,
                            FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE,
                            FILE_OPEN, FILE_DELETE_ON_CLOSE | FILE_NON_DIRECTORY_FILE, NULL, 0 );
-    todo_wine
     ok( status == STATUS_CANNOT_DELETE, "expected STATUS_CANNOT_DELETE, got %08x\n", status );
     if (!status) CloseHandle( file );
 
     RtlFreeUnicodeString( &filenameW );
 
-    todo_wine
     ok( GetFileAttributesA( filename ) != INVALID_FILE_ATTRIBUTES, "file was deleted\n" );
-    todo_wine
     ok( SetFileAttributesA(filename, FILE_ATTRIBUTE_NORMAL ) != 0, "couldn't change attributes on file\n" );
-    todo_wine
     ok( DeleteFileA( filename ) != 0, "now it should be possible to delete the file\n" );
 
     filehandle = _lcreat( filename, 2 );
@@ -1784,14 +1780,12 @@ static void test_DeleteFileA( void )
 
     SetLastError(0xdeadbeef);
     ret = DeleteFileA(temp_file);
-todo_wine
     ok(ret, "DeleteFile error %d\n", GetLastError());
 
     SetLastError(0xdeadbeef);
     ret = CloseHandle(hfile);
     ok(ret, "CloseHandle error %d\n", GetLastError());
     ret = DeleteFileA(temp_file);
-todo_wine
     ok(!ret, "DeleteFile should fail\n");
 
     SetLastError(0xdeadbeef);
diff --git a/server/fd.c b/server/fd.c
index fe778f1..500d273 100644
--- a/server/fd.c
+++ b/server/fd.c
@@ -1834,6 +1834,15 @@ struct fd *open_fd( struct fd *root, const char *name, int flags, mode_t *mode,
         list_add_head( &inode->open, &fd->inode_entry );
         closed_fd = NULL;
 
+        /* can't unlink files we don't have permission to access */
+        if ((options & FILE_DELETE_ON_CLOSE) && S_ISREG(st.st_mode) &&
+            !(flags & O_CREAT) && !(st.st_mode & (S_IWUSR | S_IWGRP | S_IWOTH)))
+        {
+            /* FIXME: instead of checking for O_CREAT it should check if the file was created */
+            set_error( STATUS_CANNOT_DELETE );
+            goto error;
+        }
+
         /* check directory options */
         if ((options & FILE_DIRECTORY_FILE) && !S_ISDIR(st.st_mode))
         {
-- 
2.6.1


From 673399c500a4616d18443df206dbdb1d354f912b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Mon, 3 Jul 2017 00:21:12 +0200
Subject: d3d11: Implement depth bias and slope.

---
 dlls/d3d11/device.c      | 13 ++++++++++---
 dlls/d3d11/tests/d3d11.c |  6 +++---
 dlls/dxgi/factory.c      |  2 +-
 dlls/wined3d/state.c     |  6 ++++++
 include/wine/wined3d.h   |  1 +
 5 files changed, 21 insertions(+), 7 deletions(-)

diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 08a98626f28..4c46c9f235b 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -1823,6 +1823,7 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_RSSetState(ID3D11DeviceCon
     struct d3d_device *device = device_from_immediate_ID3D11DeviceContext(iface);
     struct d3d_rasterizer_state *rasterizer_state_impl;
     const D3D11_RASTERIZER_DESC *desc;
+    union {DWORD d; float f;} slope;
 
     TRACE("iface %p, rasterizer_state %p.\n", iface, rasterizer_state);
 
@@ -1835,6 +1836,8 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_RSSetState(ID3D11DeviceCon
         wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_SCISSORTESTENABLE, FALSE);
         wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_MULTISAMPLEANTIALIAS, FALSE);
         wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_ANTIALIASEDLINEENABLE, FALSE);
+        wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_DEPTHBIAS, 0);
+        wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_SLOPESCALEDEPTHBIAS, 0);
         wined3d_mutex_unlock();
         return;
     }
@@ -1844,12 +1847,16 @@ static void STDMETHODCALLTYPE d3d11_immediate_context_RSSetState(ID3D11DeviceCon
     desc = &rasterizer_state_impl->desc;
     wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_FILLMODE, desc->FillMode);
     wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_CULLMODE, desc->CullMode);
+
     /* OpenGL style depth bias. */
-    if (desc->DepthBias || desc->SlopeScaledDepthBias)
-        FIXME("Ignoring depth bias.\n");
-    /* GL_DEPTH_CLAMP */
+    slope.f = desc->SlopeScaledDepthBias;
+    wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_DEPTHBIAS, desc->DepthBias);
+    wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_SLOPESCALEDEPTHBIAS, slope.d);
+    if (desc->DepthBiasClamp)
+        FIXME("Ignoring DepthBiasClamp %f.\n", desc->DepthBiasClamp);
     if (!desc->DepthClipEnable)
         FIXME("Ignoring DepthClipEnable %#x.\n", desc->DepthClipEnable);
+
     wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_SCISSORTESTENABLE, desc->ScissorEnable);
     wined3d_device_set_render_state(device->wined3d_device, WINED3D_RS_MULTISAMPLEANTIALIAS, desc->MultisampleEnable);
     wined3d_device_set_render_state(device->wined3d_device,
diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index 7c9c8395315..b7b35ef8b85 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -15687,7 +15687,7 @@ static void test_depth_separate(void)
     draw_color_quad_depth(&test_context, &blue, 0.5f);
     get_texture_readback(test_context.backbuffer, 0, &rb);
     color = get_readback_color(&rb, 320, 240);
-    todo_wine ok(compare_color(color, blue_d, 1), "Got unexpected color 0x%08x.\n", color);
+    ok(compare_color(color, blue_d, 1), "Got unexpected color 0x%08x.\n", color);
     release_resource_readback(&rb);
     ID3D11RasterizerState_Release(rs);
     rs_desc.DepthBias = -100005;
@@ -15697,7 +15697,7 @@ static void test_depth_separate(void)
     draw_color_quad_depth(&test_context, &white, 0.5f);
     get_texture_readback(test_context.backbuffer, 0, &rb);
     color = get_readback_color(&rb, 320, 240);
-    todo_wine ok(compare_color(color, white_d, 1), "Got unexpected color 0x%08x.\n", color);
+    ok(compare_color(color, white_d, 1), "Got unexpected color 0x%08x.\n", color);
     release_resource_readback(&rb);
     ID3D11RasterizerState_Release(rs);
     rs_desc.DepthBias = -99995;
@@ -15707,7 +15707,7 @@ static void test_depth_separate(void)
     draw_color_quad_depth(&test_context, &green, 0.5f);
     get_texture_readback(test_context.backbuffer, 0, &rb);
     color = get_readback_color(&rb, 320, 240);
-    todo_wine ok(compare_color(color, white_d, 1), "Got unexpected color 0x%08x.\n", color);
+    ok(compare_color(color, white_d, 1), "Got unexpected color 0x%08x.\n", color);
     release_resource_readback(&rb);
 
     ID3D11DepthStencilState_Release(ds_state);
diff --git a/dlls/dxgi/factory.c b/dlls/dxgi/factory.c
index 662b0cf3745..c218276a220 100644
--- a/dlls/dxgi/factory.c
+++ b/dlls/dxgi/factory.c
@@ -318,7 +318,7 @@ static HRESULT dxgi_factory_init(struct dxgi_factory *factory, BOOL extended)
     wined3d_private_store_init(&factory->private_store);
 
     wined3d_mutex_lock();
-    factory->wined3d = wined3d_create(0);
+    factory->wined3d = wined3d_create(WINED3D_FORWARD_DEPTH_BIAS);
     wined3d_mutex_unlock();
     if (!factory->wined3d)
     {
diff --git a/dlls/wined3d/state.c b/dlls/wined3d/state.c
index 950c4d511c3..5b43927fea5 100644
--- a/dlls/wined3d/state.c
+++ b/dlls/wined3d/state.c
@@ -1726,6 +1726,7 @@ static void state_depthbias(struct wined3d_context *context, const struct wined3
         union
         {
             DWORD d;
+            INT   i;
             float f;
         } scale_bias, const_bias;
 
@@ -1741,6 +1742,11 @@ static void state_depthbias(struct wined3d_context *context, const struct wined3
             gl_info->gl_ops.gl.p_glPolygonOffset(bias, bias);
             checkGLcall("glPolygonOffset");
         }
+        else if (context->d3d_info->wined3d_creation_flags & WINED3D_FORWARD_DEPTH_BIAS)
+        {
+            gl_info->gl_ops.gl.p_glPolygonOffset(scale_bias.f, const_bias.i);
+            checkGLcall("glPolygonOffset(...)");
+        }
         else
         {
             if (depth)
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 653c6a5a904..7491c49587a 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -1310,6 +1310,7 @@ enum wined3d_shader_byte_code_format
 #define WINED3D_LEGACY_UNBOUND_RESOURCE_COLOR                   0x00000400
 #define WINED3D_NO_PRIMITIVE_RESTART                            0x00000800
 #define WINED3D_LEGACY_CUBEMAP_FILTERING                        0x00001000
+#define WINED3D_FORWARD_DEPTH_BIAS                              0x00002000
 
 #define WINED3D_RESZ_CODE                                       0x7fa05000
 
-- 
2.13.1


From eed82dcb03b097fe5e35ad02299977c7298c08aa Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Fri, 10 Apr 2015 07:51:16 +0200
Subject: msvcrt: Calculate sinh/cosh/exp/pow with higher precision. (v2)

Based on a patch by Zheng Chen.
---
 dlls/msvcrt/math.c | 63 ++++++++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 59 insertions(+), 4 deletions(-)

diff --git a/dlls/msvcrt/math.c b/dlls/msvcrt/math.c
index a94c34ac80e..6736f03ec4c 100644
--- a/dlls/msvcrt/math.c
+++ b/dlls/msvcrt/math.c
@@ -64,6 +64,61 @@ static MSVCRT_matherr_func MSVCRT_default_matherr_func = NULL;
 static BOOL sse2_supported;
 static BOOL sse2_enabled;
 
+#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+
+static inline double precise_cosh( double x )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = cosh( x );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+static inline double precise_exp( double x )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = exp( x );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+static inline double precise_pow( double x, double y )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = pow( x, y );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+static inline double precise_sinh( double x )
+{
+    WORD precise_cw = 0x37f, pre_cw;
+    double z;
+    __asm__ __volatile__( "fnstcw %0" : "=m" (pre_cw) );
+    __asm__ __volatile__( "fldcw %0" : : "m" (precise_cw) );
+    z = sinh( x );
+    __asm__ __volatile__( "fldcw %0" : : "m" (pre_cw) );
+    return z;
+}
+
+#else
+
+#define precise_cosh cosh
+#define precise_exp  exp
+#define precise_pow  pow
+#define precise_sinh sinh
+
+#endif
+
 void msvcrt_init_math(void)
 {
     sse2_supported = sse2_enabled = IsProcessorFeaturePresent( PF_XMMI64_INSTRUCTIONS_AVAILABLE );
@@ -476,7 +531,7 @@ double CDECL MSVCRT_cos( double x )
  */
 double CDECL MSVCRT_cosh( double x )
 {
-  double ret = cosh(x);
+  double ret = precise_cosh(x);
   if (isnan(x)) math_error(_DOMAIN, "cosh", x, 0, ret);
   return ret;
 }
@@ -486,7 +541,7 @@ double CDECL MSVCRT_cosh( double x )
  */
 double CDECL MSVCRT_exp( double x )
 {
-  double ret = exp(x);
+  double ret = precise_exp(x);
   if (isnan(x)) math_error(_DOMAIN, "exp", x, 0, ret);
   else if (isfinite(x) && !ret) math_error(_UNDERFLOW, "exp", x, 0, ret);
   else if (isfinite(x) && !isfinite(ret)) math_error(_OVERFLOW, "exp", x, 0, ret);
@@ -531,7 +586,7 @@ double CDECL MSVCRT_log10( double x )
 double CDECL MSVCRT_pow( double x, double y )
 {
   /* FIXME: If x < 0 and y is not integral, set EDOM */
-  double z = pow(x,y);
+  double z = precise_pow(x, y);
   if (!isfinite(z)) math_error(_DOMAIN, "pow", x, y, z);
   return z;
 }
@@ -551,7 +606,7 @@ double CDECL MSVCRT_sin( double x )
  */
 double CDECL MSVCRT_sinh( double x )
 {
-  double ret = sinh(x);
+  double ret = precise_sinh(x);
   if (isnan(x)) math_error(_DOMAIN, "sinh", x, 0, ret);
   return ret;
 }
-- 
2.13.1


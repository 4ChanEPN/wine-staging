From 7f44ee4aff40ef69667739e3de65d3f0964b2f68 Mon Sep 17 00:00:00 2001
From: Andrew Cook <ariscop@gmail.com>
Date: Thu, 26 Feb 2015 18:50:14 +0100
Subject: kernel32/tests: Add tests for JOB_OBJECT_LIMIT_ACTIVE_PROCESS.

Cleanup and improvements by Sebastian Lackner <sebastian@fds-team.de>.
---
 dlls/kernel32/tests/process.c | 93 +++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 93 insertions(+)

diff --git a/dlls/kernel32/tests/process.c b/dlls/kernel32/tests/process.c
index 1779c81..fc69ec8 100644
--- a/dlls/kernel32/tests/process.c
+++ b/dlls/kernel32/tests/process.c
@@ -2458,6 +2458,98 @@ static void test_KillOnJobClose(void)
     CloseHandle(pi.hThread);
 }
 
+static void test_LimitActiveProcesses(void)
+{
+    JOBOBJECT_BASIC_LIMIT_INFORMATION limit_info;
+    PROCESS_INFORMATION pi[2];
+    STARTUPINFOA si = {0};
+    char buffer[MAX_PATH] = "";
+    DWORD dwret;
+    HANDLE job;
+    BOOL ret;
+
+    job = pCreateJobObjectW(NULL, NULL);
+    ok(job != NULL, "CreateJobObject error %u\n", GetLastError());
+
+    limit_info.LimitFlags = JOB_OBJECT_LIMIT_ACTIVE_PROCESS;
+    limit_info.ActiveProcessLimit = 1;
+    ret = pSetInformationJobObject(job, JobObjectBasicLimitInformation, &limit_info, sizeof(limit_info));
+    ok(ret, "SetInformationJobObject error %u\n", GetLastError());
+
+    /* Only active processes count toward the limit */
+    create_process("exit", &pi[0]);
+    dwret = WaitForSingleObject(pi[0].hProcess, 1000);
+    ok(dwret == WAIT_OBJECT_0, "WaitForSingleObject returned %u\n", dwret);
+    CloseHandle(pi[0].hProcess);
+    CloseHandle(pi[0].hThread);
+
+    create_process("wait", &pi[0]);
+    create_process("wait", &pi[1]);
+
+    ret = pAssignProcessToJobObject(job, pi[0].hProcess);
+    ok(ret, "AssignProcessToJobObject error %u\n", GetLastError());
+
+    ret = pAssignProcessToJobObject(job, pi[1].hProcess);
+    todo_wine
+    ok(!ret, "AssignProcessToJobObject expected failure\n");
+    todo_wine
+    expect_eq_d(ERROR_NOT_ENOUGH_QUOTA, GetLastError());
+
+    /* Fails randomly on 2000 and xp */
+    dwret = WaitForSingleObject(pi[1].hProcess, 500);
+    todo_wine
+    ok(dwret == WAIT_OBJECT_0, "WaitForSingleObject returned %u\n", dwret);
+    if (dwret == WAIT_OBJECT_0)
+    {
+        dwret = 0xdeadbeef;
+        ret = GetExitCodeProcess(pi[1].hProcess, &dwret);
+        ok(ret, "GetExitCodeProcess error %u\n", GetLastError());
+        ok(dwret == ERROR_NOT_ENOUGH_QUOTA || broken(dwret == 0) /* randomly fails on Win 2000 / XP */,
+           "wrong exitcode %u\n", dwret);
+    }
+    else
+    {
+        TerminateProcess(pi[1].hProcess, 0);
+    }
+
+    CloseHandle(pi[1].hProcess);
+    CloseHandle(pi[1].hThread);
+
+    limit_info.LimitFlags = JOB_OBJECT_LIMIT_ACTIVE_PROCESS;
+    limit_info.ActiveProcessLimit = 2;
+    ret = pSetInformationJobObject(job, JobObjectBasicLimitInformation, &limit_info, sizeof(limit_info));
+    ok(ret, "SetInformationJobObject error %u\n", GetLastError());
+
+    ret = pAssignProcessToJobObject(job, GetCurrentProcess());
+    ok(ret, "AssignProcessToJobObject error %u\n", GetLastError());
+
+    snprintf(buffer, MAX_PATH, "\"%s\" tests/process.c %s", selfname, "exit");
+
+    ret = CreateProcessA(NULL, buffer, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi[1]);
+    todo_wine
+    ok(!ret, "CreateProcessA expected failure\n");
+    todo_wine
+    expect_eq_d(ERROR_NOT_ENOUGH_QUOTA, GetLastError());
+
+    if (ret)
+    {
+        TerminateProcess(pi[1].hProcess, 0);
+
+        dwret = WaitForSingleObject(pi[1].hProcess, 500);
+        ok(dwret == WAIT_OBJECT_0, "WaitForSingleObject returned %u\n", dwret);
+
+        CloseHandle(pi[1].hProcess);
+        CloseHandle(pi[1].hThread);
+    }
+
+    TerminateProcess(pi[0].hProcess, 0);
+
+    CloseHandle(pi[0].hProcess);
+    CloseHandle(pi[0].hThread);
+
+    CloseHandle(job);
+}
+
 START_TEST(process)
 {
     BOOL b = init();
@@ -2522,4 +2614,5 @@ START_TEST(process)
     test_QueryInformationJobObject();
     test_CompletionPort();
     test_KillOnJobClose();
+    test_LimitActiveProcesses();
 }
-- 
2.3.0


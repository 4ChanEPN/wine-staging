From b7f6fb29fec1d258bc1db2c110044e2ae2779f9f Mon Sep 17 00:00:00 2001
From: Andrew Cook <ariscop@gmail.com>
Date: Thu, 26 Feb 2015 22:30:28 +0100
Subject: kernel32/tests: Add tests for job inheritance.

Cleanup and improvements by Sebastian Lackner <sebastian@fds-team.de>.
---
 dlls/kernel32/tests/process.c | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/dlls/kernel32/tests/process.c b/dlls/kernel32/tests/process.c
index f3f9552..466c231 100644
--- a/dlls/kernel32/tests/process.c
+++ b/dlls/kernel32/tests/process.c
@@ -2466,7 +2466,7 @@ static HANDLE test_LimitActiveProcesses(void)
     char buffer[MAX_PATH] = "";
     DWORD dwret;
     HANDLE job;
-    BOOL ret;
+    BOOL ret, out;
 
     job = pCreateJobObjectW(NULL, NULL);
     ok(job != NULL, "CreateJobObject error %u\n", GetLastError());
@@ -2547,6 +2547,33 @@ static HANDLE test_LimitActiveProcesses(void)
     CloseHandle(pi[0].hProcess);
     CloseHandle(pi[0].hThread);
 
+    /* remove quota again */
+    limit_info.LimitFlags = 0;
+    ret = pSetInformationJobObject(job, JobObjectBasicLimitInformation, &limit_info, sizeof(limit_info));
+    ok(ret, "SetInformationJobObject error %u\n", GetLastError());
+
+    if (!pIsProcessInJob)
+    {
+        win_skip("IsProcessInJob not available.\n");
+        goto out;
+    }
+
+    ret = CreateProcessA(NULL, buffer, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi[0]);
+    ok(ret, "CreateProcessA error %u\n", GetLastError());
+
+    out = FALSE;
+    ret = pIsProcessInJob(pi[0].hProcess, job, &out);
+    ok(ret, "IsProcessInJob error %u\n", GetLastError());
+    todo_wine
+    ok(out, "IsProcessInJob returned out=%u\n", out);
+
+    dwret = WaitForSingleObject(pi[0].hProcess, 500);
+    ok(dwret == WAIT_OBJECT_0, "WaitForSingleObject returned %u\n", dwret);
+
+    CloseHandle(pi[0].hProcess);
+    CloseHandle(pi[0].hThread);
+
+out:
     return job;
 }
 
-- 
2.3.0


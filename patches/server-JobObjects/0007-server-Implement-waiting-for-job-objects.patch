From 0bd977f5878df0fbe053847aecf9ae0ed7cd110d Mon Sep 17 00:00:00 2001
From: Sebastian Lackner <sebastian@fds-team.de>
Date: Sat, 28 Feb 2015 06:58:48 +0100
Subject: server: Implement waiting for job objects.

---
 dlls/kernel32/tests/process.c | 2 --
 server/process.c              | 7 ++++++-
 2 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/dlls/kernel32/tests/process.c b/dlls/kernel32/tests/process.c
index e0da270..cf2c1df 100644
--- a/dlls/kernel32/tests/process.c
+++ b/dlls/kernel32/tests/process.c
@@ -2501,7 +2501,6 @@ static void test_WaitForJobObject(void)
     ok(ret, "TerminateJobObject error %u\n", GetLastError());
 
     dwret = WaitForSingleObject(job, 500);
-    todo_wine
     ok(dwret == WAIT_OBJECT_0 || broken(dwret == WAIT_TIMEOUT),
        "WaitForSingleObject returned %u\n", dwret);
 
@@ -2510,7 +2509,6 @@ static void test_WaitForJobObject(void)
         CloseHandle(pi.hProcess);
         CloseHandle(pi.hThread);
         CloseHandle(job);
-        todo_wine
         win_skip("TerminateJobObject doesn't signal job, skipping tests\n");
         return;
     }
diff --git a/server/process.c b/server/process.c
index db5a3b5..673ce20 100644
--- a/server/process.c
+++ b/server/process.c
@@ -151,6 +151,7 @@ struct job
     int num_processes;             /* count of running processes */
     int limit_flags;               /* limit flags */
     int terminating;               /* job is terminating */
+    int signaled;                  /* job is signaled */
     struct completion *completion_port;
     apc_param_t completion_key;
 };
@@ -193,6 +194,7 @@ static struct job *create_job_object( struct directory *root, const struct unico
             job->num_processes = 0;
             job->limit_flags = 0;
             job->terminating = 0;
+            job->signaled = 0;
             job->completion_port = NULL;
             job->completion_key = 0;
         }
@@ -290,6 +292,8 @@ static void terminate_job( struct job *job, int exit_code )
     }
 
     job->terminating = 0;
+    job->signaled = 1;
+    wake_up( &job->obj, 0 );
 }
 
 static int job_close_handle( struct object *obj, struct process *process, obj_handle_t handle )
@@ -327,7 +331,8 @@ static void job_dump( struct object *obj, int verbose )
 
 static int job_signaled( struct object *obj, struct wait_queue_entry *entry )
 {
-    return 0;
+    struct job *job = (struct job *)obj;
+    return job->signaled;
 }
 
 struct ptid_entry
-- 
2.3.0

